/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/dom7/dom7.esm.js":
/*!***************************************!*\
  !*** ./node_modules/dom7/dom7.esm.js ***!
  \***************************************/
/*! exports provided: default, $, add, addClass, animate, animationEnd, append, appendTo, attr, blur, change, children, click, closest, css, data, dataset, detach, each, empty, eq, filter, find, focus, focusin, focusout, hasClass, height, hide, html, index, insertAfter, insertBefore, is, keydown, keypress, keyup, mousedown, mouseenter, mouseleave, mousemove, mouseout, mouseover, mouseup, next, nextAll, off, offset, on, once, outerHeight, outerWidth, parent, parents, prepend, prependTo, prev, prevAll, prop, remove, removeAttr, removeClass, removeData, resize, scroll, scrollLeft, scrollTo, scrollTop, show, siblings, stop, styles, submit, text, toggleClass, touchend, touchmove, touchstart, transform, transition, transitionEnd, trigger, val, value, width */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "$", function() { return $; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addClass", function() { return addClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "animate", function() { return animate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "animationEnd", function() { return animationEnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "append", function() { return append; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "appendTo", function() { return appendTo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "attr", function() { return attr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blur", function() { return blur; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "change", function() { return change; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "children", function() { return children; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "click", function() { return click; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "closest", function() { return closest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "css", function() { return css; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "data", function() { return data; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dataset", function() { return dataset; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "detach", function() { return detach; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "each", function() { return each; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "empty", function() { return empty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eq", function() { return eq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filter", function() { return filter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "find", function() { return find; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "focus", function() { return focus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "focusin", function() { return focusin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "focusout", function() { return focusout; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasClass", function() { return hasClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "height", function() { return height; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hide", function() { return hide; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "html", function() { return html; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "index", function() { return index; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "insertAfter", function() { return insertAfter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "insertBefore", function() { return insertBefore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "is", function() { return is; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keydown", function() { return keydown; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keypress", function() { return keypress; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keyup", function() { return keyup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mousedown", function() { return mousedown; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mouseenter", function() { return mouseenter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mouseleave", function() { return mouseleave; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mousemove", function() { return mousemove; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mouseout", function() { return mouseout; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mouseover", function() { return mouseover; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mouseup", function() { return mouseup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "next", function() { return next; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nextAll", function() { return nextAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "off", function() { return off; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "offset", function() { return offset; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "on", function() { return on; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "once", function() { return once; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "outerHeight", function() { return outerHeight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "outerWidth", function() { return outerWidth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parent", function() { return parent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parents", function() { return parents; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prepend", function() { return prepend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prependTo", function() { return prependTo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prev", function() { return prev; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prevAll", function() { return prevAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prop", function() { return prop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "remove", function() { return remove; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeAttr", function() { return removeAttr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeClass", function() { return removeClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeData", function() { return removeData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resize", function() { return resize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scroll", function() { return scroll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scrollLeft", function() { return scrollLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scrollTo", function() { return scrollTo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scrollTop", function() { return scrollTop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "show", function() { return show; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "siblings", function() { return siblings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stop", function() { return stop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "styles", function() { return styles; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "submit", function() { return submit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "text", function() { return text; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toggleClass", function() { return toggleClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "touchend", function() { return touchend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "touchmove", function() { return touchmove; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "touchstart", function() { return touchstart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transform", function() { return transform; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transition", function() { return transition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transitionEnd", function() { return transitionEnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "trigger", function() { return trigger; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "val", function() { return val; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "value", function() { return value; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "width", function() { return width; });
/* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");
/**
 * Dom7 3.0.0-alpha.9
 * Minimalistic JavaScript library for DOM manipulation, with a jQuery-compatible API
 * https://framework7.io/docs/dom7.html
 *
 * Copyright 2020, Vladimir Kharlampidi
 *
 * Licensed under MIT
 *
 * Released on: August 25, 2020
 */


function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}
/* eslint-disable no-proto */


function makeReactive(obj) {
  var proto = obj.__proto__;
  Object.defineProperty(obj, '__proto__', {
    get: function get() {
      return proto;
    },
    set: function set(value) {
      proto.__proto__ = value;
    }
  });
}

var Dom7 = /*#__PURE__*/function (_Array) {
  _inheritsLoose(Dom7, _Array);

  function Dom7(items) {
    var _this;

    _this = _Array.call.apply(_Array, [this].concat(items)) || this;
    makeReactive(_assertThisInitialized(_this));
    return _this;
  }

  return Dom7;
}( /*#__PURE__*/_wrapNativeSuper(Array));

function arrayFlat(arr) {
  if (arr === void 0) {
    arr = [];
  }

  var res = [];
  arr.forEach(function (el) {
    if (Array.isArray(el)) {
      res.push.apply(res, arrayFlat(el));
    } else {
      res.push(el);
    }
  });
  return res;
}

function arrayFilter(arr, callback) {
  return Array.prototype.filter.call(arr, callback);
}

function arrayUnique(arr) {
  var uniqueArray = [];

  for (var i = 0; i < arr.length; i += 1) {
    if (uniqueArray.indexOf(arr[i]) === -1) uniqueArray.push(arr[i]);
  }

  return uniqueArray;
}

function toCamelCase(string) {
  return string.toLowerCase().replace(/-(.)/g, function (match, group) {
    return group.toUpperCase();
  });
}

function qsa(selector, context) {
  if (typeof selector !== 'string') {
    return [selector];
  }

  var a = [];
  var res = context.querySelectorAll(selector);

  for (var i = 0; i < res.length; i += 1) {
    a.push(res[i]);
  }

  return a;
}

function $(selector, context) {
  var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();
  var document = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getDocument"])();
  var arr = [];

  if (!context && selector instanceof Dom7) {
    return selector;
  }

  if (!selector) {
    return new Dom7(arr);
  }

  if (typeof selector === 'string') {
    var html = selector.trim();

    if (html.indexOf('<') >= 0 && html.indexOf('>') >= 0) {
      var toCreate = 'div';
      if (html.indexOf('<li') === 0) toCreate = 'ul';
      if (html.indexOf('<tr') === 0) toCreate = 'tbody';
      if (html.indexOf('<td') === 0 || html.indexOf('<th') === 0) toCreate = 'tr';
      if (html.indexOf('<tbody') === 0) toCreate = 'table';
      if (html.indexOf('<option') === 0) toCreate = 'select';
      var tempParent = document.createElement(toCreate);
      tempParent.innerHTML = html;

      for (var i = 0; i < tempParent.childNodes.length; i += 1) {
        arr.push(tempParent.childNodes[i]);
      }
    } else {
      arr = qsa(selector.trim(), context || document);
    } // arr = qsa(selector, document);

  } else if (selector.nodeType || selector === window || selector === document) {
    arr.push(selector);
  } else if (Array.isArray(selector)) {
    if (selector instanceof Dom7) return selector;
    arr = selector;
  }

  return new Dom7(arrayUnique(arr));
}

$.fn = Dom7.prototype;

function addClass() {
  for (var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++) {
    classes[_key] = arguments[_key];
  }

  var classNames = arrayFlat(classes.map(function (c) {
    return c.split(' ');
  }));
  this.forEach(function (el) {
    var _el$classList;

    (_el$classList = el.classList).add.apply(_el$classList, classNames);
  });
  return this;
}

function removeClass() {
  for (var _len2 = arguments.length, classes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    classes[_key2] = arguments[_key2];
  }

  var classNames = arrayFlat(classes.map(function (c) {
    return c.split(' ');
  }));
  this.forEach(function (el) {
    var _el$classList2;

    (_el$classList2 = el.classList).remove.apply(_el$classList2, classNames);
  });
  return this;
}

function toggleClass() {
  for (var _len3 = arguments.length, classes = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    classes[_key3] = arguments[_key3];
  }

  var classNames = arrayFlat(classes.map(function (c) {
    return c.split(' ');
  }));
  this.forEach(function (el) {
    classNames.forEach(function (className) {
      el.classList.toggle(className);
    });
  });
}

function hasClass() {
  for (var _len4 = arguments.length, classes = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    classes[_key4] = arguments[_key4];
  }

  var classNames = arrayFlat(classes.map(function (c) {
    return c.split(' ');
  }));
  return arrayFilter(this, function (el) {
    return classNames.filter(function (className) {
      return el.classList.contains(className);
    }).length > 0;
  }).length > 0;
}

function attr(attrs, value) {
  if (arguments.length === 1 && typeof attrs === 'string') {
    // Get attr
    if (this[0]) return this[0].getAttribute(attrs);
    return undefined;
  } // Set attrs


  for (var i = 0; i < this.length; i += 1) {
    if (arguments.length === 2) {
      // String
      this[i].setAttribute(attrs, value);
    } else {
      // Object
      for (var attrName in attrs) {
        this[i][attrName] = attrs[attrName];
        this[i].setAttribute(attrName, attrs[attrName]);
      }
    }
  }

  return this;
}

function removeAttr(attr) {
  for (var i = 0; i < this.length; i += 1) {
    this[i].removeAttribute(attr);
  }

  return this;
}

function prop(props, value) {
  if (arguments.length === 1 && typeof props === 'string') {
    // Get prop
    if (this[0]) return this[0][props];
  } else {
    // Set props
    for (var i = 0; i < this.length; i += 1) {
      if (arguments.length === 2) {
        // String
        this[i][props] = value;
      } else {
        // Object
        for (var propName in props) {
          this[i][propName] = props[propName];
        }
      }
    }

    return this;
  }

  return this;
}

function data(key, value) {
  var el;

  if (typeof value === 'undefined') {
    el = this[0];
    if (!el) return undefined; // Get value

    if (el.dom7ElementDataStorage && key in el.dom7ElementDataStorage) {
      return el.dom7ElementDataStorage[key];
    }

    var dataKey = el.getAttribute("data-" + key);

    if (dataKey) {
      return dataKey;
    }

    return undefined;
  } // Set value


  for (var i = 0; i < this.length; i += 1) {
    el = this[i];
    if (!el.dom7ElementDataStorage) el.dom7ElementDataStorage = {};
    el.dom7ElementDataStorage[key] = value;
  }

  return this;
}

function removeData(key) {
  for (var i = 0; i < this.length; i += 1) {
    var el = this[i];

    if (el.dom7ElementDataStorage && el.dom7ElementDataStorage[key]) {
      el.dom7ElementDataStorage[key] = null;
      delete el.dom7ElementDataStorage[key];
    }
  }
}

function dataset() {
  var el = this[0];
  if (!el) return undefined;
  var dataset = {}; // eslint-disable-line

  if (el.dataset) {
    for (var dataKey in el.dataset) {
      dataset[dataKey] = el.dataset[dataKey];
    }
  } else {
    for (var i = 0; i < el.attributes.length; i += 1) {
      var _attr = el.attributes[i];

      if (_attr.name.indexOf('data-') >= 0) {
        dataset[toCamelCase(_attr.name.split('data-')[1])] = _attr.value;
      }
    }
  }

  for (var key in dataset) {
    if (dataset[key] === 'false') dataset[key] = false;else if (dataset[key] === 'true') dataset[key] = true;else if (parseFloat(dataset[key]) === dataset[key] * 1) dataset[key] *= 1;
  }

  return dataset;
}

function val(value) {
  if (typeof value === 'undefined') {
    // get value
    var el = this[0];
    if (!el) return undefined;

    if (el.multiple && el.nodeName.toLowerCase() === 'select') {
      var values = [];

      for (var i = 0; i < el.selectedOptions.length; i += 1) {
        values.push(el.selectedOptions[i].value);
      }

      return values;
    }

    return el.value;
  } // set value


  for (var _i = 0; _i < this.length; _i += 1) {
    var _el = this[_i];

    if (Array.isArray(value) && _el.multiple && _el.nodeName.toLowerCase() === 'select') {
      for (var j = 0; j < _el.options.length; j += 1) {
        _el.options[j].selected = value.indexOf(_el.options[j].value) >= 0;
      }
    } else {
      _el.value = value;
    }
  }

  return this;
}

function value(value) {
  return this.val(value);
}

function transform(transform) {
  for (var i = 0; i < this.length; i += 1) {
    this[i].style.transform = transform;
  }

  return this;
}

function transition(duration) {
  for (var i = 0; i < this.length; i += 1) {
    this[i].style.transition = typeof duration !== 'string' ? duration + "ms" : duration;
  }

  return this;
}

function on() {
  for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
    args[_key5] = arguments[_key5];
  }

  var eventType = args[0],
      targetSelector = args[1],
      listener = args[2],
      capture = args[3];

  if (typeof args[1] === 'function') {
    eventType = args[0];
    listener = args[1];
    capture = args[2];
    targetSelector = undefined;
  }

  if (!capture) capture = false;

  function handleLiveEvent(e) {
    var target = e.target;
    if (!target) return;
    var eventData = e.target.dom7EventData || [];

    if (eventData.indexOf(e) < 0) {
      eventData.unshift(e);
    }

    if ($(target).is(targetSelector)) listener.apply(target, eventData);else {
      var _parents = $(target).parents(); // eslint-disable-line


      for (var k = 0; k < _parents.length; k += 1) {
        if ($(_parents[k]).is(targetSelector)) listener.apply(_parents[k], eventData);
      }
    }
  }

  function handleEvent(e) {
    var eventData = e && e.target ? e.target.dom7EventData || [] : [];

    if (eventData.indexOf(e) < 0) {
      eventData.unshift(e);
    }

    listener.apply(this, eventData);
  }

  var events = eventType.split(' ');
  var j;

  for (var i = 0; i < this.length; i += 1) {
    var el = this[i];

    if (!targetSelector) {
      for (j = 0; j < events.length; j += 1) {
        var event = events[j];
        if (!el.dom7Listeners) el.dom7Listeners = {};
        if (!el.dom7Listeners[event]) el.dom7Listeners[event] = [];
        el.dom7Listeners[event].push({
          listener: listener,
          proxyListener: handleEvent
        });
        el.addEventListener(event, handleEvent, capture);
      }
    } else {
      // Live events
      for (j = 0; j < events.length; j += 1) {
        var _event = events[j];
        if (!el.dom7LiveListeners) el.dom7LiveListeners = {};
        if (!el.dom7LiveListeners[_event]) el.dom7LiveListeners[_event] = [];

        el.dom7LiveListeners[_event].push({
          listener: listener,
          proxyListener: handleLiveEvent
        });

        el.addEventListener(_event, handleLiveEvent, capture);
      }
    }
  }

  return this;
}

function off() {
  for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
    args[_key6] = arguments[_key6];
  }

  var eventType = args[0],
      targetSelector = args[1],
      listener = args[2],
      capture = args[3];

  if (typeof args[1] === 'function') {
    eventType = args[0];
    listener = args[1];
    capture = args[2];
    targetSelector = undefined;
  }

  if (!capture) capture = false;
  var events = eventType.split(' ');

  for (var i = 0; i < events.length; i += 1) {
    var event = events[i];

    for (var j = 0; j < this.length; j += 1) {
      var el = this[j];
      var handlers = void 0;

      if (!targetSelector && el.dom7Listeners) {
        handlers = el.dom7Listeners[event];
      } else if (targetSelector && el.dom7LiveListeners) {
        handlers = el.dom7LiveListeners[event];
      }

      if (handlers && handlers.length) {
        for (var k = handlers.length - 1; k >= 0; k -= 1) {
          var handler = handlers[k];

          if (listener && handler.listener === listener) {
            el.removeEventListener(event, handler.proxyListener, capture);
            handlers.splice(k, 1);
          } else if (listener && handler.listener && handler.listener.dom7proxy && handler.listener.dom7proxy === listener) {
            el.removeEventListener(event, handler.proxyListener, capture);
            handlers.splice(k, 1);
          } else if (!listener) {
            el.removeEventListener(event, handler.proxyListener, capture);
            handlers.splice(k, 1);
          }
        }
      }
    }
  }

  return this;
}

function once() {
  var dom = this;

  for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
    args[_key7] = arguments[_key7];
  }

  var eventName = args[0],
      targetSelector = args[1],
      listener = args[2],
      capture = args[3];

  if (typeof args[1] === 'function') {
    eventName = args[0];
    listener = args[1];
    capture = args[2];
    targetSelector = undefined;
  }

  function onceHandler() {
    for (var _len8 = arguments.length, eventArgs = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
      eventArgs[_key8] = arguments[_key8];
    }

    listener.apply(this, eventArgs);
    dom.off(eventName, targetSelector, onceHandler, capture);

    if (onceHandler.dom7proxy) {
      delete onceHandler.dom7proxy;
    }
  }

  onceHandler.dom7proxy = listener;
  return dom.on(eventName, targetSelector, onceHandler, capture);
}

function trigger() {
  var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();

  for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
    args[_key9] = arguments[_key9];
  }

  var events = args[0].split(' ');
  var eventData = args[1];

  for (var i = 0; i < events.length; i += 1) {
    var event = events[i];

    for (var j = 0; j < this.length; j += 1) {
      var el = this[j];

      if (window.CustomEvent) {
        var evt = new window.CustomEvent(event, {
          detail: eventData,
          bubbles: true,
          cancelable: true
        });
        el.dom7EventData = args.filter(function (data, dataIndex) {
          return dataIndex > 0;
        });
        el.dispatchEvent(evt);
        el.dom7EventData = [];
        delete el.dom7EventData;
      }
    }
  }

  return this;
}

function transitionEnd(callback) {
  var dom = this;

  function fireCallBack(e) {
    if (e.target !== this) return;
    callback.call(this, e);
    dom.off('transitionend', fireCallBack);
  }

  if (callback) {
    dom.on('transitionend', fireCallBack);
  }

  return this;
}

function animationEnd(callback) {
  var dom = this;

  function fireCallBack(e) {
    if (e.target !== this) return;
    callback.call(this, e);
    dom.off('animationend', fireCallBack);
  }

  if (callback) {
    dom.on('animationend', fireCallBack);
  }

  return this;
}

function width() {
  var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();

  if (this[0] === window) {
    return window.innerWidth;
  }

  if (this.length > 0) {
    return parseFloat(this.css('width'));
  }

  return null;
}

function outerWidth(includeMargins) {
  if (this.length > 0) {
    if (includeMargins) {
      var _styles = this.styles();

      return this[0].offsetWidth + parseFloat(_styles.getPropertyValue('margin-right')) + parseFloat(_styles.getPropertyValue('margin-left'));
    }

    return this[0].offsetWidth;
  }

  return null;
}

function height() {
  var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();

  if (this[0] === window) {
    return window.innerHeight;
  }

  if (this.length > 0) {
    return parseFloat(this.css('height'));
  }

  return null;
}

function outerHeight(includeMargins) {
  if (this.length > 0) {
    if (includeMargins) {
      var _styles2 = this.styles();

      return this[0].offsetHeight + parseFloat(_styles2.getPropertyValue('margin-top')) + parseFloat(_styles2.getPropertyValue('margin-bottom'));
    }

    return this[0].offsetHeight;
  }

  return null;
}

function offset() {
  if (this.length > 0) {
    var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();
    var document = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getDocument"])();
    var el = this[0];
    var box = el.getBoundingClientRect();
    var body = document.body;
    var clientTop = el.clientTop || body.clientTop || 0;
    var clientLeft = el.clientLeft || body.clientLeft || 0;
    var scrollTop = el === window ? window.scrollY : el.scrollTop;
    var scrollLeft = el === window ? window.scrollX : el.scrollLeft;
    return {
      top: box.top + scrollTop - clientTop,
      left: box.left + scrollLeft - clientLeft
    };
  }

  return null;
}

function hide() {
  for (var i = 0; i < this.length; i += 1) {
    this[i].style.display = 'none';
  }

  return this;
}

function show() {
  var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();

  for (var i = 0; i < this.length; i += 1) {
    var el = this[i];

    if (el.style.display === 'none') {
      el.style.display = '';
    }

    if (window.getComputedStyle(el, null).getPropertyValue('display') === 'none') {
      // Still not visible
      el.style.display = 'block';
    }
  }

  return this;
}

function styles() {
  var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();
  if (this[0]) return window.getComputedStyle(this[0], null);
  return {};
}

function css(props, value) {
  var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();
  var i;

  if (arguments.length === 1) {
    if (typeof props === 'string') {
      // .css('width')
      if (this[0]) return window.getComputedStyle(this[0], null).getPropertyValue(props);
    } else {
      // .css({ width: '100px' })
      for (i = 0; i < this.length; i += 1) {
        for (var _prop in props) {
          this[i].style[_prop] = props[_prop];
        }
      }

      return this;
    }
  }

  if (arguments.length === 2 && typeof props === 'string') {
    // .css('width', '100px')
    for (i = 0; i < this.length; i += 1) {
      this[i].style[props] = value;
    }

    return this;
  }

  return this;
}

function each(callback) {
  if (!callback) return this;
  this.forEach(function (el, index) {
    callback.apply(el, [el, index]);
  });
  return this;
}

function filter(callback) {
  var result = arrayFilter(this, callback);
  return $(result);
}

function html(html) {
  if (typeof html === 'undefined') {
    return this[0] ? this[0].innerHTML : null;
  }

  for (var i = 0; i < this.length; i += 1) {
    this[i].innerHTML = html;
  }

  return this;
}

function text(text) {
  if (typeof text === 'undefined') {
    return this[0] ? this[0].textContent.trim() : null;
  }

  for (var i = 0; i < this.length; i += 1) {
    this[i].textContent = text;
  }

  return this;
}

function is(selector) {
  var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();
  var document = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getDocument"])();
  var el = this[0];
  var compareWith;
  var i;
  if (!el || typeof selector === 'undefined') return false;

  if (typeof selector === 'string') {
    if (el.matches) return el.matches(selector);
    if (el.webkitMatchesSelector) return el.webkitMatchesSelector(selector);
    if (el.msMatchesSelector) return el.msMatchesSelector(selector);
    compareWith = $(selector);

    for (i = 0; i < compareWith.length; i += 1) {
      if (compareWith[i] === el) return true;
    }

    return false;
  }

  if (selector === document) {
    return el === document;
  }

  if (selector === window) {
    return el === window;
  }

  if (selector.nodeType || selector instanceof Dom7) {
    compareWith = selector.nodeType ? [selector] : selector;

    for (i = 0; i < compareWith.length; i += 1) {
      if (compareWith[i] === el) return true;
    }

    return false;
  }

  return false;
}

function index() {
  var child = this[0];
  var i;

  if (child) {
    i = 0; // eslint-disable-next-line

    while ((child = child.previousSibling) !== null) {
      if (child.nodeType === 1) i += 1;
    }

    return i;
  }

  return undefined;
}

function eq(index) {
  if (typeof index === 'undefined') return this;
  var length = this.length;

  if (index > length - 1) {
    return $([]);
  }

  if (index < 0) {
    var returnIndex = length + index;
    if (returnIndex < 0) return $([]);
    return $([this[returnIndex]]);
  }

  return $([this[index]]);
}

function append() {
  var newChild;
  var document = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getDocument"])();

  for (var k = 0; k < arguments.length; k += 1) {
    newChild = k < 0 || arguments.length <= k ? undefined : arguments[k];

    for (var i = 0; i < this.length; i += 1) {
      if (typeof newChild === 'string') {
        var tempDiv = document.createElement('div');
        tempDiv.innerHTML = newChild;

        while (tempDiv.firstChild) {
          this[i].appendChild(tempDiv.firstChild);
        }
      } else if (newChild instanceof Dom7) {
        for (var j = 0; j < newChild.length; j += 1) {
          this[i].appendChild(newChild[j]);
        }
      } else {
        this[i].appendChild(newChild);
      }
    }
  }

  return this;
}

function appendTo(parent) {
  $(parent).append(this);
  return this;
}

function prepend(newChild) {
  var document = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getDocument"])();
  var i;
  var j;

  for (i = 0; i < this.length; i += 1) {
    if (typeof newChild === 'string') {
      var tempDiv = document.createElement('div');
      tempDiv.innerHTML = newChild;

      for (j = tempDiv.childNodes.length - 1; j >= 0; j -= 1) {
        this[i].insertBefore(tempDiv.childNodes[j], this[i].childNodes[0]);
      }
    } else if (newChild instanceof Dom7) {
      for (j = 0; j < newChild.length; j += 1) {
        this[i].insertBefore(newChild[j], this[i].childNodes[0]);
      }
    } else {
      this[i].insertBefore(newChild, this[i].childNodes[0]);
    }
  }

  return this;
}

function prependTo(parent) {
  $(parent).prepend(this);
  return this;
}

function insertBefore(selector) {
  var before = $(selector);

  for (var i = 0; i < this.length; i += 1) {
    if (before.length === 1) {
      before[0].parentNode.insertBefore(this[i], before[0]);
    } else if (before.length > 1) {
      for (var j = 0; j < before.length; j += 1) {
        before[j].parentNode.insertBefore(this[i].cloneNode(true), before[j]);
      }
    }
  }
}

function insertAfter(selector) {
  var after = $(selector);

  for (var i = 0; i < this.length; i += 1) {
    if (after.length === 1) {
      after[0].parentNode.insertBefore(this[i], after[0].nextSibling);
    } else if (after.length > 1) {
      for (var j = 0; j < after.length; j += 1) {
        after[j].parentNode.insertBefore(this[i].cloneNode(true), after[j].nextSibling);
      }
    }
  }
}

function next(selector) {
  if (this.length > 0) {
    if (selector) {
      if (this[0].nextElementSibling && $(this[0].nextElementSibling).is(selector)) {
        return $([this[0].nextElementSibling]);
      }

      return $([]);
    }

    if (this[0].nextElementSibling) return $([this[0].nextElementSibling]);
    return $([]);
  }

  return $([]);
}

function nextAll(selector) {
  var nextEls = [];
  var el = this[0];
  if (!el) return $([]);

  while (el.nextElementSibling) {
    var _next = el.nextElementSibling; // eslint-disable-line

    if (selector) {
      if ($(_next).is(selector)) nextEls.push(_next);
    } else nextEls.push(_next);

    el = _next;
  }

  return $(nextEls);
}

function prev(selector) {
  if (this.length > 0) {
    var el = this[0];

    if (selector) {
      if (el.previousElementSibling && $(el.previousElementSibling).is(selector)) {
        return $([el.previousElementSibling]);
      }

      return $([]);
    }

    if (el.previousElementSibling) return $([el.previousElementSibling]);
    return $([]);
  }

  return $([]);
}

function prevAll(selector) {
  var prevEls = [];
  var el = this[0];
  if (!el) return $([]);

  while (el.previousElementSibling) {
    var _prev = el.previousElementSibling; // eslint-disable-line

    if (selector) {
      if ($(_prev).is(selector)) prevEls.push(_prev);
    } else prevEls.push(_prev);

    el = _prev;
  }

  return $(prevEls);
}

function siblings(selector) {
  return this.nextAll(selector).add(this.prevAll(selector));
}

function parent(selector) {
  var parents = []; // eslint-disable-line

  for (var i = 0; i < this.length; i += 1) {
    if (this[i].parentNode !== null) {
      if (selector) {
        if ($(this[i].parentNode).is(selector)) parents.push(this[i].parentNode);
      } else {
        parents.push(this[i].parentNode);
      }
    }
  }

  return $(parents);
}

function parents(selector) {
  var parents = []; // eslint-disable-line

  for (var i = 0; i < this.length; i += 1) {
    var _parent = this[i].parentNode; // eslint-disable-line

    while (_parent) {
      if (selector) {
        if ($(_parent).is(selector)) parents.push(_parent);
      } else {
        parents.push(_parent);
      }

      _parent = _parent.parentNode;
    }
  }

  return $(parents);
}

function closest(selector) {
  var closest = this; // eslint-disable-line

  if (typeof selector === 'undefined') {
    return $([]);
  }

  if (!closest.is(selector)) {
    closest = closest.parents(selector).eq(0);
  }

  return closest;
}

function find(selector) {
  var foundElements = [];

  for (var i = 0; i < this.length; i += 1) {
    var found = this[i].querySelectorAll(selector);

    for (var j = 0; j < found.length; j += 1) {
      foundElements.push(found[j]);
    }
  }

  return $(foundElements);
}

function children(selector) {
  var children = []; // eslint-disable-line

  for (var i = 0; i < this.length; i += 1) {
    var childNodes = this[i].children;

    for (var j = 0; j < childNodes.length; j += 1) {
      if (!selector || $(childNodes[j]).is(selector)) {
        children.push(childNodes[j]);
      }
    }
  }

  return $(children);
}

function remove() {
  for (var i = 0; i < this.length; i += 1) {
    if (this[i].parentNode) this[i].parentNode.removeChild(this[i]);
  }

  return this;
}

function detach() {
  return this.remove();
}

function add() {
  var dom = this;
  var i;
  var j;

  for (var _len10 = arguments.length, els = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
    els[_key10] = arguments[_key10];
  }

  for (i = 0; i < els.length; i += 1) {
    var toAdd = $(els[i]);

    for (j = 0; j < toAdd.length; j += 1) {
      dom.push(toAdd[j]);
    }
  }

  return dom;
}

function empty() {
  for (var i = 0; i < this.length; i += 1) {
    var el = this[i];

    if (el.nodeType === 1) {
      for (var j = 0; j < el.childNodes.length; j += 1) {
        if (el.childNodes[j].parentNode) {
          el.childNodes[j].parentNode.removeChild(el.childNodes[j]);
        }
      }

      el.textContent = '';
    }
  }

  return this;
}

function scrollTo() {
  var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();

  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var left = args[0],
      top = args[1],
      duration = args[2],
      easing = args[3],
      callback = args[4];

  if (args.length === 4 && typeof easing === 'function') {
    callback = easing;
    left = args[0];
    top = args[1];
    duration = args[2];
    callback = args[3];
    easing = args[4];
  }

  if (typeof easing === 'undefined') easing = 'swing';
  return this.each(function animate() {
    var el = this;
    var currentTop;
    var currentLeft;
    var maxTop;
    var maxLeft;
    var newTop;
    var newLeft;
    var scrollTop; // eslint-disable-line

    var scrollLeft; // eslint-disable-line

    var animateTop = top > 0 || top === 0;
    var animateLeft = left > 0 || left === 0;

    if (typeof easing === 'undefined') {
      easing = 'swing';
    }

    if (animateTop) {
      currentTop = el.scrollTop;

      if (!duration) {
        el.scrollTop = top;
      }
    }

    if (animateLeft) {
      currentLeft = el.scrollLeft;

      if (!duration) {
        el.scrollLeft = left;
      }
    }

    if (!duration) return;

    if (animateTop) {
      maxTop = el.scrollHeight - el.offsetHeight;
      newTop = Math.max(Math.min(top, maxTop), 0);
    }

    if (animateLeft) {
      maxLeft = el.scrollWidth - el.offsetWidth;
      newLeft = Math.max(Math.min(left, maxLeft), 0);
    }

    var startTime = null;
    if (animateTop && newTop === currentTop) animateTop = false;
    if (animateLeft && newLeft === currentLeft) animateLeft = false;

    function render(time) {
      if (time === void 0) {
        time = new Date().getTime();
      }

      if (startTime === null) {
        startTime = time;
      }

      var progress = Math.max(Math.min((time - startTime) / duration, 1), 0);
      var easeProgress = easing === 'linear' ? progress : 0.5 - Math.cos(progress * Math.PI) / 2;
      var done;
      if (animateTop) scrollTop = currentTop + easeProgress * (newTop - currentTop);
      if (animateLeft) scrollLeft = currentLeft + easeProgress * (newLeft - currentLeft);

      if (animateTop && newTop > currentTop && scrollTop >= newTop) {
        el.scrollTop = newTop;
        done = true;
      }

      if (animateTop && newTop < currentTop && scrollTop <= newTop) {
        el.scrollTop = newTop;
        done = true;
      }

      if (animateLeft && newLeft > currentLeft && scrollLeft >= newLeft) {
        el.scrollLeft = newLeft;
        done = true;
      }

      if (animateLeft && newLeft < currentLeft && scrollLeft <= newLeft) {
        el.scrollLeft = newLeft;
        done = true;
      }

      if (done) {
        if (callback) callback();
        return;
      }

      if (animateTop) el.scrollTop = scrollTop;
      if (animateLeft) el.scrollLeft = scrollLeft;
      window.requestAnimationFrame(render);
    }

    window.requestAnimationFrame(render);
  });
} // scrollTop(top, duration, easing, callback) {


function scrollTop() {
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  var top = args[0],
      duration = args[1],
      easing = args[2],
      callback = args[3];

  if (args.length === 3 && typeof easing === 'function') {
    top = args[0];
    duration = args[1];
    callback = args[2];
    easing = args[3];
  }

  var dom = this;

  if (typeof top === 'undefined') {
    if (dom.length > 0) return dom[0].scrollTop;
    return null;
  }

  return dom.scrollTo(undefined, top, duration, easing, callback);
}

function scrollLeft() {
  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    args[_key3] = arguments[_key3];
  }

  var left = args[0],
      duration = args[1],
      easing = args[2],
      callback = args[3];

  if (args.length === 3 && typeof easing === 'function') {
    left = args[0];
    duration = args[1];
    callback = args[2];
    easing = args[3];
  }

  var dom = this;

  if (typeof left === 'undefined') {
    if (dom.length > 0) return dom[0].scrollLeft;
    return null;
  }

  return dom.scrollTo(left, undefined, duration, easing, callback);
}

function animate(initialProps, initialParams) {
  var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();
  var els = this;
  var a = {
    props: Object.assign({}, initialProps),
    params: Object.assign({
      duration: 300,
      easing: 'swing' // or 'linear'

      /* Callbacks
      begin(elements)
      complete(elements)
      progress(elements, complete, remaining, start, tweenValue)
      */

    }, initialParams),
    elements: els,
    animating: false,
    que: [],
    easingProgress: function easingProgress(easing, progress) {
      if (easing === 'swing') {
        return 0.5 - Math.cos(progress * Math.PI) / 2;
      }

      if (typeof easing === 'function') {
        return easing(progress);
      }

      return progress;
    },
    stop: function stop() {
      if (a.frameId) {
        window.cancelAnimationFrame(a.frameId);
      }

      a.animating = false;
      a.elements.each(function (el) {
        var element = el;
        delete element.dom7AnimateInstance;
      });
      a.que = [];
    },
    done: function done(complete) {
      a.animating = false;
      a.elements.each(function (el) {
        var element = el;
        delete element.dom7AnimateInstance;
      });
      if (complete) complete(els);

      if (a.que.length > 0) {
        var que = a.que.shift();
        a.animate(que[0], que[1]);
      }
    },
    animate: function animate(props, params) {
      if (a.animating) {
        a.que.push([props, params]);
        return a;
      }

      var elements = []; // Define & Cache Initials & Units

      a.elements.each(function (el, index) {
        var initialFullValue;
        var initialValue;
        var unit;
        var finalValue;
        var finalFullValue;
        if (!el.dom7AnimateInstance) a.elements[index].dom7AnimateInstance = a;
        elements[index] = {
          container: el
        };
        Object.keys(props).forEach(function (prop) {
          initialFullValue = window.getComputedStyle(el, null).getPropertyValue(prop).replace(',', '.');
          initialValue = parseFloat(initialFullValue);
          unit = initialFullValue.replace(initialValue, '');
          finalValue = parseFloat(props[prop]);
          finalFullValue = props[prop] + unit;
          elements[index][prop] = {
            initialFullValue: initialFullValue,
            initialValue: initialValue,
            unit: unit,
            finalValue: finalValue,
            finalFullValue: finalFullValue,
            currentValue: initialValue
          };
        });
      });
      var startTime = null;
      var time;
      var elementsDone = 0;
      var propsDone = 0;
      var done;
      var began = false;
      a.animating = true;

      function render() {
        time = new Date().getTime();
        var progress;
        var easeProgress; // let el;

        if (!began) {
          began = true;
          if (params.begin) params.begin(els);
        }

        if (startTime === null) {
          startTime = time;
        }

        if (params.progress) {
          // eslint-disable-next-line
          params.progress(els, Math.max(Math.min((time - startTime) / params.duration, 1), 0), startTime + params.duration - time < 0 ? 0 : startTime + params.duration - time, startTime);
        }

        elements.forEach(function (element) {
          var el = element;
          if (done || el.done) return;
          Object.keys(props).forEach(function (prop) {
            if (done || el.done) return;
            progress = Math.max(Math.min((time - startTime) / params.duration, 1), 0);
            easeProgress = a.easingProgress(params.easing, progress);
            var _el$prop = el[prop],
                initialValue = _el$prop.initialValue,
                finalValue = _el$prop.finalValue,
                unit = _el$prop.unit;
            el[prop].currentValue = initialValue + easeProgress * (finalValue - initialValue);
            var currentValue = el[prop].currentValue;

            if (finalValue > initialValue && currentValue >= finalValue || finalValue < initialValue && currentValue <= finalValue) {
              el.container.style[prop] = finalValue + unit;
              propsDone += 1;

              if (propsDone === Object.keys(props).length) {
                el.done = true;
                elementsDone += 1;
              }

              if (elementsDone === elements.length) {
                done = true;
              }
            }

            if (done) {
              a.done(params.complete);
              return;
            }

            el.container.style[prop] = currentValue + unit;
          });
        });
        if (done) return; // Then call

        a.frameId = window.requestAnimationFrame(render);
      }

      a.frameId = window.requestAnimationFrame(render);
      return a;
    }
  };

  if (a.elements.length === 0) {
    return els;
  }

  var animateInstance;

  for (var i = 0; i < a.elements.length; i += 1) {
    if (a.elements[i].dom7AnimateInstance) {
      animateInstance = a.elements[i].dom7AnimateInstance;
    } else a.elements[i].dom7AnimateInstance = a;
  }

  if (!animateInstance) {
    animateInstance = a;
  }

  if (initialProps === 'stop') {
    animateInstance.stop();
  } else {
    animateInstance.animate(a.props, a.params);
  }

  return els;
}

function stop() {
  var els = this;

  for (var i = 0; i < els.length; i += 1) {
    if (els[i].dom7AnimateInstance) {
      els[i].dom7AnimateInstance.stop();
    }
  }
}

var noTrigger = 'resize scroll'.split(' ');

function shortcut(name) {
  function eventHandler() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (typeof args[0] === 'undefined') {
      for (var i = 0; i < this.length; i += 1) {
        if (noTrigger.indexOf(name) < 0) {
          if (name in this[i]) this[i][name]();else {
            $(this[i]).trigger(name);
          }
        }
      }

      return this;
    }

    return this.on.apply(this, [name].concat(args));
  }

  return eventHandler;
}

var click = shortcut('click');
var blur = shortcut('blur');
var focus = shortcut('focus');
var focusin = shortcut('focusin');
var focusout = shortcut('focusout');
var keyup = shortcut('keyup');
var keydown = shortcut('keydown');
var keypress = shortcut('keypress');
var submit = shortcut('submit');
var change = shortcut('change');
var mousedown = shortcut('mousedown');
var mousemove = shortcut('mousemove');
var mouseup = shortcut('mouseup');
var mouseenter = shortcut('mouseenter');
var mouseleave = shortcut('mouseleave');
var mouseout = shortcut('mouseout');
var mouseover = shortcut('mouseover');
var touchstart = shortcut('touchstart');
var touchend = shortcut('touchend');
var touchmove = shortcut('touchmove');
var resize = shortcut('resize');
var scroll = shortcut('scroll');
/* harmony default export */ __webpack_exports__["default"] = ($);


/***/ }),

/***/ "./node_modules/ssr-window/ssr-window.esm.js":
/*!***************************************************!*\
  !*** ./node_modules/ssr-window/ssr-window.esm.js ***!
  \***************************************************/
/*! exports provided: extend, getDocument, getWindow, ssrDocument, ssrWindow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extend", function() { return extend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDocument", function() { return getDocument; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getWindow", function() { return getWindow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ssrDocument", function() { return ssrDocument; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ssrWindow", function() { return ssrWindow; });
/**
 * SSR Window 3.0.0-alpha.4
 * Better handling for window object in SSR environment
 * https://github.com/nolimits4web/ssr-window
 *
 * Copyright 2020, Vladimir Kharlampidi
 *
 * Licensed under MIT
 *
 * Released on: May 20, 2020
 */

/* eslint-disable no-param-reassign */
function isObject(obj) {
  return obj !== null && typeof obj === 'object' && 'constructor' in obj && obj.constructor === Object;
}

function extend(target, src) {
  if (target === void 0) {
    target = {};
  }

  if (src === void 0) {
    src = {};
  }

  Object.keys(src).forEach(function (key) {
    if (typeof target[key] === 'undefined') target[key] = src[key];else if (isObject(src[key]) && isObject(target[key]) && Object.keys(src[key]).length > 0) {
      extend(target[key], src[key]);
    }
  });
}

var ssrDocument = {
  body: {},
  addEventListener: function () {},
  removeEventListener: function () {},
  activeElement: {
    blur: function () {},
    nodeName: ''
  },
  querySelector: function () {
    return null;
  },
  querySelectorAll: function () {
    return [];
  },
  getElementById: function () {
    return null;
  },
  createEvent: function () {
    return {
      initEvent: function () {}
    };
  },
  createElement: function () {
    return {
      children: [],
      childNodes: [],
      style: {},
      setAttribute: function () {},
      getElementsByTagName: function () {
        return [];
      }
    };
  },
  createElementNS: function () {
    return {};
  },
  importNode: function () {
    return null;
  },
  location: {
    hash: '',
    host: '',
    hostname: '',
    href: '',
    origin: '',
    pathname: '',
    protocol: '',
    search: ''
  }
};

function getDocument() {
  var doc = typeof document !== 'undefined' ? document : {};
  extend(doc, ssrDocument);
  return doc;
}

var ssrWindow = {
  document: ssrDocument,
  navigator: {
    userAgent: ''
  },
  location: {
    hash: '',
    host: '',
    hostname: '',
    href: '',
    origin: '',
    pathname: '',
    protocol: '',
    search: ''
  },
  history: {
    replaceState: function () {},
    pushState: function () {},
    go: function () {},
    back: function () {}
  },
  CustomEvent: function CustomEvent() {
    return this;
  },
  addEventListener: function () {},
  removeEventListener: function () {},
  getComputedStyle: function () {
    return {
      getPropertyValue: function () {
        return '';
      }
    };
  },
  Image: function () {},
  Date: function () {},
  screen: {},
  setTimeout: function () {},
  clearTimeout: function () {},
  matchMedia: function () {
    return {};
  },
  requestAnimationFrame: function (callback) {
    if (typeof setTimeout === 'undefined') {
      callback();
      return null;
    }

    return setTimeout(callback, 0);
  },
  cancelAnimationFrame: function (id) {
    if (typeof setTimeout === 'undefined') {
      return;
    }

    clearTimeout(id);
  }
};

function getWindow() {
  var win = typeof window !== 'undefined' ? window : {};
  extend(win, ssrWindow);
  return win;
}



/***/ }),

/***/ "./node_modules/swiper/esm/components/a11y/a11y.js":
/*!*********************************************************!*\
  !*** ./node_modules/swiper/esm/components/a11y/a11y.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/dom */ "./node_modules/swiper/esm/utils/dom.js");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/utils */ "./node_modules/swiper/esm/utils/utils.js");
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}



var A11y = {
  makeElFocusable: function makeElFocusable($el) {
    $el.attr('tabIndex', '0');
    return $el;
  },
  makeElNotFocusable: function makeElNotFocusable($el) {
    $el.attr('tabIndex', '-1');
    return $el;
  },
  addElRole: function addElRole($el, role) {
    $el.attr('role', role);
    return $el;
  },
  addElLabel: function addElLabel($el, label) {
    $el.attr('aria-label', label);
    return $el;
  },
  disableEl: function disableEl($el) {
    $el.attr('aria-disabled', true);
    return $el;
  },
  enableEl: function enableEl($el) {
    $el.attr('aria-disabled', false);
    return $el;
  },
  onEnterKey: function onEnterKey(e) {
    var swiper = this;
    var params = swiper.params.a11y;
    if (e.keyCode !== 13) return;
    var $targetEl = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])(e.target);

    if (swiper.navigation && swiper.navigation.$nextEl && $targetEl.is(swiper.navigation.$nextEl)) {
      if (!(swiper.isEnd && !swiper.params.loop)) {
        swiper.slideNext();
      }

      if (swiper.isEnd) {
        swiper.a11y.notify(params.lastSlideMessage);
      } else {
        swiper.a11y.notify(params.nextSlideMessage);
      }
    }

    if (swiper.navigation && swiper.navigation.$prevEl && $targetEl.is(swiper.navigation.$prevEl)) {
      if (!(swiper.isBeginning && !swiper.params.loop)) {
        swiper.slidePrev();
      }

      if (swiper.isBeginning) {
        swiper.a11y.notify(params.firstSlideMessage);
      } else {
        swiper.a11y.notify(params.prevSlideMessage);
      }
    }

    if (swiper.pagination && $targetEl.is("." + swiper.params.pagination.bulletClass)) {
      $targetEl[0].click();
    }
  },
  notify: function notify(message) {
    var swiper = this;
    var notification = swiper.a11y.liveRegion;
    if (notification.length === 0) return;
    notification.html('');
    notification.html(message);
  },
  updateNavigation: function updateNavigation() {
    var swiper = this;
    if (swiper.params.loop || !swiper.navigation) return;
    var _swiper$navigation = swiper.navigation,
        $nextEl = _swiper$navigation.$nextEl,
        $prevEl = _swiper$navigation.$prevEl;

    if ($prevEl && $prevEl.length > 0) {
      if (swiper.isBeginning) {
        swiper.a11y.disableEl($prevEl);
        swiper.a11y.makeElNotFocusable($prevEl);
      } else {
        swiper.a11y.enableEl($prevEl);
        swiper.a11y.makeElFocusable($prevEl);
      }
    }

    if ($nextEl && $nextEl.length > 0) {
      if (swiper.isEnd) {
        swiper.a11y.disableEl($nextEl);
        swiper.a11y.makeElNotFocusable($nextEl);
      } else {
        swiper.a11y.enableEl($nextEl);
        swiper.a11y.makeElFocusable($nextEl);
      }
    }
  },
  updatePagination: function updatePagination() {
    var swiper = this;
    var params = swiper.params.a11y;

    if (swiper.pagination && swiper.params.pagination.clickable && swiper.pagination.bullets && swiper.pagination.bullets.length) {
      swiper.pagination.bullets.each(function (bulletEl) {
        var $bulletEl = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])(bulletEl);
        swiper.a11y.makeElFocusable($bulletEl);
        swiper.a11y.addElRole($bulletEl, 'button');
        swiper.a11y.addElLabel($bulletEl, params.paginationBulletMessage.replace(/\{\{index\}\}/, $bulletEl.index() + 1));
      });
    }
  },
  init: function init() {
    var swiper = this;
    swiper.$el.append(swiper.a11y.liveRegion); // Navigation

    var params = swiper.params.a11y;
    var $nextEl;
    var $prevEl;

    if (swiper.navigation && swiper.navigation.$nextEl) {
      $nextEl = swiper.navigation.$nextEl;
    }

    if (swiper.navigation && swiper.navigation.$prevEl) {
      $prevEl = swiper.navigation.$prevEl;
    }

    if ($nextEl) {
      swiper.a11y.makeElFocusable($nextEl);
      swiper.a11y.addElRole($nextEl, 'button');
      swiper.a11y.addElLabel($nextEl, params.nextSlideMessage);
      $nextEl.on('keydown', swiper.a11y.onEnterKey);
    }

    if ($prevEl) {
      swiper.a11y.makeElFocusable($prevEl);
      swiper.a11y.addElRole($prevEl, 'button');
      swiper.a11y.addElLabel($prevEl, params.prevSlideMessage);
      $prevEl.on('keydown', swiper.a11y.onEnterKey);
    } // Pagination


    if (swiper.pagination && swiper.params.pagination.clickable && swiper.pagination.bullets && swiper.pagination.bullets.length) {
      swiper.pagination.$el.on('keydown', "." + swiper.params.pagination.bulletClass, swiper.a11y.onEnterKey);
    }
  },
  destroy: function destroy() {
    var swiper = this;
    if (swiper.a11y.liveRegion && swiper.a11y.liveRegion.length > 0) swiper.a11y.liveRegion.remove();
    var $nextEl;
    var $prevEl;

    if (swiper.navigation && swiper.navigation.$nextEl) {
      $nextEl = swiper.navigation.$nextEl;
    }

    if (swiper.navigation && swiper.navigation.$prevEl) {
      $prevEl = swiper.navigation.$prevEl;
    }

    if ($nextEl) {
      $nextEl.off('keydown', swiper.a11y.onEnterKey);
    }

    if ($prevEl) {
      $prevEl.off('keydown', swiper.a11y.onEnterKey);
    } // Pagination


    if (swiper.pagination && swiper.params.pagination.clickable && swiper.pagination.bullets && swiper.pagination.bullets.length) {
      swiper.pagination.$el.off('keydown', "." + swiper.params.pagination.bulletClass, swiper.a11y.onEnterKey);
    }
  }
};
/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'a11y',
  params: {
    a11y: {
      enabled: true,
      notificationClass: 'swiper-notification',
      prevSlideMessage: 'Previous slide',
      nextSlideMessage: 'Next slide',
      firstSlideMessage: 'This is the first slide',
      lastSlideMessage: 'This is the last slide',
      paginationBulletMessage: 'Go to slide {{index}}'
    }
  },
  create: function create() {
    var swiper = this;
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["bindModuleMethods"])(swiper, {
      a11y: _extends(_extends({}, A11y), {}, {
        liveRegion: Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])("<span class=\"" + swiper.params.a11y.notificationClass + "\" aria-live=\"assertive\" aria-atomic=\"true\"></span>")
      })
    });
  },
  on: {
    init: function init(swiper) {
      if (!swiper.params.a11y.enabled) return;
      swiper.a11y.init();
      swiper.a11y.updateNavigation();
    },
    toEdge: function toEdge(swiper) {
      if (!swiper.params.a11y.enabled) return;
      swiper.a11y.updateNavigation();
    },
    fromEdge: function fromEdge(swiper) {
      if (!swiper.params.a11y.enabled) return;
      swiper.a11y.updateNavigation();
    },
    paginationUpdate: function paginationUpdate(swiper) {
      if (!swiper.params.a11y.enabled) return;
      swiper.a11y.updatePagination();
    },
    destroy: function destroy(swiper) {
      if (!swiper.params.a11y.enabled) return;
      swiper.a11y.destroy();
    }
  }
});

/***/ }),

/***/ "./node_modules/swiper/esm/components/autoplay/autoplay.js":
/*!*****************************************************************!*\
  !*** ./node_modules/swiper/esm/components/autoplay/autoplay.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/utils */ "./node_modules/swiper/esm/utils/utils.js");
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}
/* eslint no-underscore-dangle: "off" */




var Autoplay = {
  run: function run() {
    var swiper = this;
    var $activeSlideEl = swiper.slides.eq(swiper.activeIndex);
    var delay = swiper.params.autoplay.delay;

    if ($activeSlideEl.attr('data-swiper-autoplay')) {
      delay = $activeSlideEl.attr('data-swiper-autoplay') || swiper.params.autoplay.delay;
    }

    clearTimeout(swiper.autoplay.timeout);
    swiper.autoplay.timeout = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["nextTick"])(function () {
      if (swiper.params.autoplay.reverseDirection) {
        if (swiper.params.loop) {
          swiper.loopFix();
          swiper.slidePrev(swiper.params.speed, true, true);
          swiper.emit('autoplay');
        } else if (!swiper.isBeginning) {
          swiper.slidePrev(swiper.params.speed, true, true);
          swiper.emit('autoplay');
        } else if (!swiper.params.autoplay.stopOnLastSlide) {
          swiper.slideTo(swiper.slides.length - 1, swiper.params.speed, true, true);
          swiper.emit('autoplay');
        } else {
          swiper.autoplay.stop();
        }
      } else if (swiper.params.loop) {
        swiper.loopFix();
        swiper.slideNext(swiper.params.speed, true, true);
        swiper.emit('autoplay');
      } else if (!swiper.isEnd) {
        swiper.slideNext(swiper.params.speed, true, true);
        swiper.emit('autoplay');
      } else if (!swiper.params.autoplay.stopOnLastSlide) {
        swiper.slideTo(0, swiper.params.speed, true, true);
        swiper.emit('autoplay');
      } else {
        swiper.autoplay.stop();
      }

      if (swiper.params.cssMode && swiper.autoplay.running) swiper.autoplay.run();
    }, delay);
  },
  start: function start() {
    var swiper = this;
    if (typeof swiper.autoplay.timeout !== 'undefined') return false;
    if (swiper.autoplay.running) return false;
    swiper.autoplay.running = true;
    swiper.emit('autoplayStart');
    swiper.autoplay.run();
    return true;
  },
  stop: function stop() {
    var swiper = this;
    if (!swiper.autoplay.running) return false;
    if (typeof swiper.autoplay.timeout === 'undefined') return false;

    if (swiper.autoplay.timeout) {
      clearTimeout(swiper.autoplay.timeout);
      swiper.autoplay.timeout = undefined;
    }

    swiper.autoplay.running = false;
    swiper.emit('autoplayStop');
    return true;
  },
  pause: function pause(speed) {
    var swiper = this;
    if (!swiper.autoplay.running) return;
    if (swiper.autoplay.paused) return;
    if (swiper.autoplay.timeout) clearTimeout(swiper.autoplay.timeout);
    swiper.autoplay.paused = true;

    if (speed === 0 || !swiper.params.autoplay.waitForTransition) {
      swiper.autoplay.paused = false;
      swiper.autoplay.run();
    } else {
      swiper.$wrapperEl[0].addEventListener('transitionend', swiper.autoplay.onTransitionEnd);
      swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.autoplay.onTransitionEnd);
    }
  },
  onVisibilityChange: function onVisibilityChange() {
    var swiper = this;
    var document = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getDocument"])();

    if (document.visibilityState === 'hidden' && swiper.autoplay.running) {
      swiper.autoplay.pause();
    }

    if (document.visibilityState === 'visible' && swiper.autoplay.paused) {
      swiper.autoplay.run();
      swiper.autoplay.paused = false;
    }
  },
  onTransitionEnd: function onTransitionEnd(e) {
    var swiper = this;
    if (!swiper || swiper.destroyed || !swiper.$wrapperEl) return;
    if (e.target !== swiper.$wrapperEl[0]) return;
    swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.autoplay.onTransitionEnd);
    swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.autoplay.onTransitionEnd);
    swiper.autoplay.paused = false;

    if (!swiper.autoplay.running) {
      swiper.autoplay.stop();
    } else {
      swiper.autoplay.run();
    }
  }
};
/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'autoplay',
  params: {
    autoplay: {
      enabled: false,
      delay: 3000,
      waitForTransition: true,
      disableOnInteraction: true,
      stopOnLastSlide: false,
      reverseDirection: false
    }
  },
  create: function create() {
    var swiper = this;
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["bindModuleMethods"])(swiper, {
      autoplay: _extends(_extends({}, Autoplay), {}, {
        running: false,
        paused: false
      })
    });
  },
  on: {
    init: function init(swiper) {
      if (swiper.params.autoplay.enabled) {
        swiper.autoplay.start();
        var document = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getDocument"])();
        document.addEventListener('visibilitychange', swiper.autoplay.onVisibilityChange);
      }
    },
    beforeTransitionStart: function beforeTransitionStart(swiper, speed, internal) {
      if (swiper.autoplay.running) {
        if (internal || !swiper.params.autoplay.disableOnInteraction) {
          swiper.autoplay.pause(speed);
        } else {
          swiper.autoplay.stop();
        }
      }
    },
    sliderFirstMove: function sliderFirstMove(swiper) {
      if (swiper.autoplay.running) {
        if (swiper.params.autoplay.disableOnInteraction) {
          swiper.autoplay.stop();
        } else {
          swiper.autoplay.pause();
        }
      }
    },
    touchEnd: function touchEnd(swiper) {
      if (swiper.params.cssMode && swiper.autoplay.paused && !swiper.params.autoplay.disableOnInteraction) {
        swiper.autoplay.run();
      }
    },
    destroy: function destroy(swiper) {
      if (swiper.autoplay.running) {
        swiper.autoplay.stop();
      }

      var document = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getDocument"])();
      document.removeEventListener('visibilitychange', swiper.autoplay.onVisibilityChange);
    }
  }
});

/***/ }),

/***/ "./node_modules/swiper/esm/components/controller/controller.js":
/*!*********************************************************************!*\
  !*** ./node_modules/swiper/esm/components/controller/controller.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/utils */ "./node_modules/swiper/esm/utils/utils.js");
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}
/* eslint no-bitwise: ["error", { "allow": [">>"] }] */



var Controller = {
  LinearSpline: function LinearSpline(x, y) {
    var binarySearch = function search() {
      var maxIndex;
      var minIndex;
      var guess;
      return function (array, val) {
        minIndex = -1;
        maxIndex = array.length;

        while (maxIndex - minIndex > 1) {
          guess = maxIndex + minIndex >> 1;

          if (array[guess] <= val) {
            minIndex = guess;
          } else {
            maxIndex = guess;
          }
        }

        return maxIndex;
      };
    }();

    this.x = x;
    this.y = y;
    this.lastIndex = x.length - 1; // Given an x value (x2), return the expected y2 value:
    // (x1,y1) is the known point before given value,
    // (x3,y3) is the known point after given value.

    var i1;
    var i3;

    this.interpolate = function interpolate(x2) {
      if (!x2) return 0; // Get the indexes of x1 and x3 (the array indexes before and after given x2):

      i3 = binarySearch(this.x, x2);
      i1 = i3 - 1; // We have our indexes i1 & i3, so we can calculate already:
      // y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1

      return (x2 - this.x[i1]) * (this.y[i3] - this.y[i1]) / (this.x[i3] - this.x[i1]) + this.y[i1];
    };

    return this;
  },
  // xxx: for now i will just save one spline function to to
  getInterpolateFunction: function getInterpolateFunction(c) {
    var swiper = this;

    if (!swiper.controller.spline) {
      swiper.controller.spline = swiper.params.loop ? new Controller.LinearSpline(swiper.slidesGrid, c.slidesGrid) : new Controller.LinearSpline(swiper.snapGrid, c.snapGrid);
    }
  },
  setTranslate: function setTranslate(_setTranslate, byController) {
    var swiper = this;
    var controlled = swiper.controller.control;
    var multiplier;
    var controlledTranslate;
    var Swiper = swiper.constructor;

    function setControlledTranslate(c) {
      // this will create an Interpolate function based on the snapGrids
      // x is the Grid of the scrolled scroller and y will be the controlled scroller
      // it makes sense to create this only once and recall it for the interpolation
      // the function does a lot of value caching for performance
      var translate = swiper.rtlTranslate ? -swiper.translate : swiper.translate;

      if (swiper.params.controller.by === 'slide') {
        swiper.controller.getInterpolateFunction(c); // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid
        // but it did not work out

        controlledTranslate = -swiper.controller.spline.interpolate(-translate);
      }

      if (!controlledTranslate || swiper.params.controller.by === 'container') {
        multiplier = (c.maxTranslate() - c.minTranslate()) / (swiper.maxTranslate() - swiper.minTranslate());
        controlledTranslate = (translate - swiper.minTranslate()) * multiplier + c.minTranslate();
      }

      if (swiper.params.controller.inverse) {
        controlledTranslate = c.maxTranslate() - controlledTranslate;
      }

      c.updateProgress(controlledTranslate);
      c.setTranslate(controlledTranslate, swiper);
      c.updateActiveIndex();
      c.updateSlidesClasses();
    }

    if (Array.isArray(controlled)) {
      for (var i = 0; i < controlled.length; i += 1) {
        if (controlled[i] !== byController && controlled[i] instanceof Swiper) {
          setControlledTranslate(controlled[i]);
        }
      }
    } else if (controlled instanceof Swiper && byController !== controlled) {
      setControlledTranslate(controlled);
    }
  },
  setTransition: function setTransition(duration, byController) {
    var swiper = this;
    var Swiper = swiper.constructor;
    var controlled = swiper.controller.control;
    var i;

    function setControlledTransition(c) {
      c.setTransition(duration, swiper);

      if (duration !== 0) {
        c.transitionStart();

        if (c.params.autoHeight) {
          Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["nextTick"])(function () {
            c.updateAutoHeight();
          });
        }

        c.$wrapperEl.transitionEnd(function () {
          if (!controlled) return;

          if (c.params.loop && swiper.params.controller.by === 'slide') {
            c.loopFix();
          }

          c.transitionEnd();
        });
      }
    }

    if (Array.isArray(controlled)) {
      for (i = 0; i < controlled.length; i += 1) {
        if (controlled[i] !== byController && controlled[i] instanceof Swiper) {
          setControlledTransition(controlled[i]);
        }
      }
    } else if (controlled instanceof Swiper && byController !== controlled) {
      setControlledTransition(controlled);
    }
  }
};
/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'controller',
  params: {
    controller: {
      control: undefined,
      inverse: false,
      by: 'slide' // or 'container'

    }
  },
  create: function create() {
    var swiper = this;
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["bindModuleMethods"])(swiper, {
      controller: _extends({
        control: swiper.params.controller.control
      }, Controller)
    });
  },
  on: {
    update: function update(swiper) {
      if (!swiper.controller.control) return;

      if (swiper.controller.spline) {
        swiper.controller.spline = undefined;
        delete swiper.controller.spline;
      }
    },
    resize: function resize(swiper) {
      if (!swiper.controller.control) return;

      if (swiper.controller.spline) {
        swiper.controller.spline = undefined;
        delete swiper.controller.spline;
      }
    },
    observerUpdate: function observerUpdate(swiper) {
      if (!swiper.controller.control) return;

      if (swiper.controller.spline) {
        swiper.controller.spline = undefined;
        delete swiper.controller.spline;
      }
    },
    setTranslate: function setTranslate(swiper, translate, byController) {
      if (!swiper.controller.control) return;
      swiper.controller.setTranslate(translate, byController);
    },
    setTransition: function setTransition(swiper, duration, byController) {
      if (!swiper.controller.control) return;
      swiper.controller.setTransition(duration, byController);
    }
  }
});

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/breakpoints/getBreakpoint.js":
/*!******************************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/breakpoints/getBreakpoint.js ***!
  \******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getBreakpoints; });
/* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");

function getBreakpoints(breakpoints) {
  var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])(); // Get breakpoint for window width

  if (!breakpoints) return undefined;
  var breakpoint = false;
  var points = Object.keys(breakpoints).map(function (point) {
    if (typeof point === 'string' && point.indexOf('@') === 0) {
      var minRatio = parseFloat(point.substr(1));
      var value = window.innerHeight * minRatio;
      return {
        value: value,
        point: point
      };
    }

    return {
      value: point,
      point: point
    };
  });
  points.sort(function (a, b) {
    return parseInt(a.value, 10) - parseInt(b.value, 10);
  });

  for (var i = 0; i < points.length; i += 1) {
    var _points$i = points[i],
        point = _points$i.point,
        value = _points$i.value;

    if (value <= window.innerWidth) {
      breakpoint = point;
    }
  }

  return breakpoint || 'max';
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/breakpoints/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/breakpoints/index.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _setBreakpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setBreakpoint */ "./node_modules/swiper/esm/components/core/breakpoints/setBreakpoint.js");
/* harmony import */ var _getBreakpoint__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getBreakpoint */ "./node_modules/swiper/esm/components/core/breakpoints/getBreakpoint.js");


/* harmony default export */ __webpack_exports__["default"] = ({
  setBreakpoint: _setBreakpoint__WEBPACK_IMPORTED_MODULE_0__["default"],
  getBreakpoint: _getBreakpoint__WEBPACK_IMPORTED_MODULE_1__["default"]
});

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/breakpoints/setBreakpoint.js":
/*!******************************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/breakpoints/setBreakpoint.js ***!
  \******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return setBreakpoint; });
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/utils */ "./node_modules/swiper/esm/utils/utils.js");

function setBreakpoint() {
  var swiper = this;
  var activeIndex = swiper.activeIndex,
      initialized = swiper.initialized,
      _swiper$loopedSlides = swiper.loopedSlides,
      loopedSlides = _swiper$loopedSlides === void 0 ? 0 : _swiper$loopedSlides,
      params = swiper.params,
      $el = swiper.$el;
  var breakpoints = params.breakpoints;
  if (!breakpoints || breakpoints && Object.keys(breakpoints).length === 0) return; // Get breakpoint for window width and update parameters

  var breakpoint = swiper.getBreakpoint(breakpoints);

  if (breakpoint && swiper.currentBreakpoint !== breakpoint) {
    var breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;

    if (breakpointOnlyParams) {
      ['slidesPerView', 'spaceBetween', 'slidesPerGroup', 'slidesPerGroupSkip', 'slidesPerColumn'].forEach(function (param) {
        var paramValue = breakpointOnlyParams[param];
        if (typeof paramValue === 'undefined') return;

        if (param === 'slidesPerView' && (paramValue === 'AUTO' || paramValue === 'auto')) {
          breakpointOnlyParams[param] = 'auto';
        } else if (param === 'slidesPerView') {
          breakpointOnlyParams[param] = parseFloat(paramValue);
        } else {
          breakpointOnlyParams[param] = parseInt(paramValue, 10);
        }
      });
    }

    var breakpointParams = breakpointOnlyParams || swiper.originalParams;
    var wasMultiRow = params.slidesPerColumn > 1;
    var isMultiRow = breakpointParams.slidesPerColumn > 1;

    if (wasMultiRow && !isMultiRow) {
      $el.removeClass(params.containerModifierClass + "multirow " + params.containerModifierClass + "multirow-column");
      swiper.emitContainerClasses();
    } else if (!wasMultiRow && isMultiRow) {
      $el.addClass(params.containerModifierClass + "multirow");

      if (breakpointParams.slidesPerColumnFill === 'column') {
        $el.addClass(params.containerModifierClass + "multirow-column");
      }

      swiper.emitContainerClasses();
    }

    var directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;
    var needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);

    if (directionChanged && initialized) {
      swiper.changeDirection();
    }

    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["extend"])(swiper.params, breakpointParams);
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["extend"])(swiper, {
      allowTouchMove: swiper.params.allowTouchMove,
      allowSlideNext: swiper.params.allowSlideNext,
      allowSlidePrev: swiper.params.allowSlidePrev
    });
    swiper.currentBreakpoint = breakpoint;

    if (needsReLoop && initialized) {
      swiper.loopDestroy();
      swiper.loopCreate();
      swiper.updateSlides();
      swiper.slideTo(activeIndex - loopedSlides + swiper.loopedSlides, 0, false);
    }

    swiper.emit('breakpoint', breakpointParams);
  }
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/check-overflow/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/check-overflow/index.js ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function checkOverflow() {
  var swiper = this;
  var params = swiper.params;
  var wasLocked = swiper.isLocked;
  var lastSlidePosition = swiper.slides.length > 0 && params.slidesOffsetBefore + params.spaceBetween * (swiper.slides.length - 1) + swiper.slides[0].offsetWidth * swiper.slides.length;

  if (params.slidesOffsetBefore && params.slidesOffsetAfter && lastSlidePosition) {
    swiper.isLocked = lastSlidePosition <= swiper.size;
  } else {
    swiper.isLocked = swiper.snapGrid.length === 1;
  }

  swiper.allowSlideNext = !swiper.isLocked;
  swiper.allowSlidePrev = !swiper.isLocked; // events

  if (wasLocked !== swiper.isLocked) swiper.emit(swiper.isLocked ? 'lock' : 'unlock');

  if (wasLocked && wasLocked !== swiper.isLocked) {
    swiper.isEnd = false;
    if (swiper.navigation) swiper.navigation.update();
  }
}

/* harmony default export */ __webpack_exports__["default"] = ({
  checkOverflow: checkOverflow
});

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/classes/addClasses.js":
/*!***********************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/classes/addClasses.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return addClasses; });
function addClasses() {
  var swiper = this;
  var classNames = swiper.classNames,
      params = swiper.params,
      rtl = swiper.rtl,
      $el = swiper.$el,
      device = swiper.device;
  var suffixes = [];
  suffixes.push('initialized');
  suffixes.push(params.direction);

  if (params.freeMode) {
    suffixes.push('free-mode');
  }

  if (params.autoHeight) {
    suffixes.push('autoheight');
  }

  if (rtl) {
    suffixes.push('rtl');
  }

  if (params.slidesPerColumn > 1) {
    suffixes.push('multirow');

    if (params.slidesPerColumnFill === 'column') {
      suffixes.push('multirow-column');
    }
  }

  if (device.android) {
    suffixes.push('android');
  }

  if (device.ios) {
    suffixes.push('ios');
  }

  if (params.cssMode) {
    suffixes.push('css-mode');
  }

  suffixes.forEach(function (suffix) {
    classNames.push(params.containerModifierClass + suffix);
  });
  $el.addClass(classNames.join(' '));
  swiper.emitContainerClasses();
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/classes/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/classes/index.js ***!
  \******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _addClasses__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./addClasses */ "./node_modules/swiper/esm/components/core/classes/addClasses.js");
/* harmony import */ var _removeClasses__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./removeClasses */ "./node_modules/swiper/esm/components/core/classes/removeClasses.js");


/* harmony default export */ __webpack_exports__["default"] = ({
  addClasses: _addClasses__WEBPACK_IMPORTED_MODULE_0__["default"],
  removeClasses: _removeClasses__WEBPACK_IMPORTED_MODULE_1__["default"]
});

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/classes/removeClasses.js":
/*!**************************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/classes/removeClasses.js ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return removeClasses; });
function removeClasses() {
  var swiper = this;
  var $el = swiper.$el,
      classNames = swiper.classNames;
  $el.removeClass(classNames.join(' '));
  swiper.emitContainerClasses();
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/core-class.js":
/*!***************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/core-class.js ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/dom */ "./node_modules/swiper/esm/utils/dom.js");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/utils */ "./node_modules/swiper/esm/utils/utils.js");
/* harmony import */ var _utils_get_support__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/get-support */ "./node_modules/swiper/esm/utils/get-support.js");
/* harmony import */ var _utils_get_device__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/get-device */ "./node_modules/swiper/esm/utils/get-device.js");
/* harmony import */ var _utils_get_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/get-browser */ "./node_modules/swiper/esm/utils/get-browser.js");
/* harmony import */ var _modules_resize_resize__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../modules/resize/resize */ "./node_modules/swiper/esm/modules/resize/resize.js");
/* harmony import */ var _modules_observer_observer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../modules/observer/observer */ "./node_modules/swiper/esm/modules/observer/observer.js");
/* harmony import */ var _modular__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./modular */ "./node_modules/swiper/esm/components/core/modular.js");
/* harmony import */ var _events_emitter__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./events-emitter */ "./node_modules/swiper/esm/components/core/events-emitter.js");
/* harmony import */ var _update_index__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./update/index */ "./node_modules/swiper/esm/components/core/update/index.js");
/* harmony import */ var _translate_index__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./translate/index */ "./node_modules/swiper/esm/components/core/translate/index.js");
/* harmony import */ var _transition_index__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./transition/index */ "./node_modules/swiper/esm/components/core/transition/index.js");
/* harmony import */ var _slide_index__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./slide/index */ "./node_modules/swiper/esm/components/core/slide/index.js");
/* harmony import */ var _loop_index__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./loop/index */ "./node_modules/swiper/esm/components/core/loop/index.js");
/* harmony import */ var _grab_cursor_index__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./grab-cursor/index */ "./node_modules/swiper/esm/components/core/grab-cursor/index.js");
/* harmony import */ var _manipulation_index__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./manipulation/index */ "./node_modules/swiper/esm/components/core/manipulation/index.js");
/* harmony import */ var _events_index__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./events/index */ "./node_modules/swiper/esm/components/core/events/index.js");
/* harmony import */ var _breakpoints_index__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./breakpoints/index */ "./node_modules/swiper/esm/components/core/breakpoints/index.js");
/* harmony import */ var _classes_index__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./classes/index */ "./node_modules/swiper/esm/components/core/classes/index.js");
/* harmony import */ var _images_index__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./images/index */ "./node_modules/swiper/esm/components/core/images/index.js");
/* harmony import */ var _check_overflow_index__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./check-overflow/index */ "./node_modules/swiper/esm/components/core/check-overflow/index.js");
/* harmony import */ var _defaults__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./defaults */ "./node_modules/swiper/esm/components/core/defaults.js");
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
/* eslint no-param-reassign: "off" */
























var prototypes = {
  modular: _modular__WEBPACK_IMPORTED_MODULE_7__["default"],
  eventsEmitter: _events_emitter__WEBPACK_IMPORTED_MODULE_8__["default"],
  update: _update_index__WEBPACK_IMPORTED_MODULE_9__["default"],
  translate: _translate_index__WEBPACK_IMPORTED_MODULE_10__["default"],
  transition: _transition_index__WEBPACK_IMPORTED_MODULE_11__["default"],
  slide: _slide_index__WEBPACK_IMPORTED_MODULE_12__["default"],
  loop: _loop_index__WEBPACK_IMPORTED_MODULE_13__["default"],
  grabCursor: _grab_cursor_index__WEBPACK_IMPORTED_MODULE_14__["default"],
  manipulation: _manipulation_index__WEBPACK_IMPORTED_MODULE_15__["default"],
  events: _events_index__WEBPACK_IMPORTED_MODULE_16__["default"],
  breakpoints: _breakpoints_index__WEBPACK_IMPORTED_MODULE_17__["default"],
  checkOverflow: _check_overflow_index__WEBPACK_IMPORTED_MODULE_20__["default"],
  classes: _classes_index__WEBPACK_IMPORTED_MODULE_18__["default"],
  images: _images_index__WEBPACK_IMPORTED_MODULE_19__["default"]
};
var extendedDefaults = {};

var Swiper = /*#__PURE__*/function () {
  function Swiper() {
    var el;
    var params;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (args.length === 1 && args[0].constructor && args[0].constructor === Object) {
      params = args[0];
    } else {
      el = args[0];
      params = args[1];
    }

    if (!params) params = {};
    params = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["extend"])({}, params);
    if (el && !params.el) params.el = el; // Swiper Instance

    var swiper = this;
    swiper.support = Object(_utils_get_support__WEBPACK_IMPORTED_MODULE_2__["getSupport"])();
    swiper.device = Object(_utils_get_device__WEBPACK_IMPORTED_MODULE_3__["getDevice"])({
      userAgent: params.userAgent
    });
    swiper.browser = Object(_utils_get_browser__WEBPACK_IMPORTED_MODULE_4__["getBrowser"])();
    swiper.eventsListeners = {};
    swiper.eventsAnyListeners = [];
    Object.keys(prototypes).forEach(function (prototypeGroup) {
      Object.keys(prototypes[prototypeGroup]).forEach(function (protoMethod) {
        if (!Swiper.prototype[protoMethod]) {
          Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];
        }
      });
    });

    if (typeof swiper.modules === 'undefined') {
      swiper.modules = {};
    }

    Object.keys(swiper.modules).forEach(function (moduleName) {
      var module = swiper.modules[moduleName];

      if (module.params) {
        var moduleParamName = Object.keys(module.params)[0];
        var moduleParams = module.params[moduleParamName];
        if (typeof moduleParams !== 'object' || moduleParams === null) return;
        if (!(moduleParamName in params && 'enabled' in moduleParams)) return;

        if (params[moduleParamName] === true) {
          params[moduleParamName] = {
            enabled: true
          };
        }

        if (typeof params[moduleParamName] === 'object' && !('enabled' in params[moduleParamName])) {
          params[moduleParamName].enabled = true;
        }

        if (!params[moduleParamName]) params[moduleParamName] = {
          enabled: false
        };
      }
    }); // Extend defaults with modules params

    var swiperParams = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["extend"])({}, _defaults__WEBPACK_IMPORTED_MODULE_21__["default"]);
    swiper.useParams(swiperParams); // Extend defaults with passed params

    swiper.params = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["extend"])({}, swiperParams, extendedDefaults, params);
    swiper.originalParams = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["extend"])({}, swiper.params);
    swiper.passedParams = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["extend"])({}, params); // add event listeners

    if (swiper.params && swiper.params.on) {
      Object.keys(swiper.params.on).forEach(function (eventName) {
        swiper.on(eventName, swiper.params.on[eventName]);
      });
    } // Save Dom lib


    swiper.$ = _utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"]; // Find el

    var $el = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])(swiper.params.el);
    el = $el[0];

    if (!el) {
      return undefined;
    }

    if ($el.length > 1) {
      var swipers = [];
      $el.each(function (containerEl) {
        var newParams = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["extend"])({}, params, {
          el: containerEl
        });
        swipers.push(new Swiper(newParams));
      });
      return swipers;
    }

    el.swiper = swiper; // Find Wrapper

    var $wrapperEl;

    if (el && el.shadowRoot && el.shadowRoot.querySelector) {
      $wrapperEl = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])(el.shadowRoot.querySelector("." + swiper.params.wrapperClass)); // Children needs to return slot items

      $wrapperEl.children = function (options) {
        return $el.children(options);
      };
    } else {
      $wrapperEl = $el.children("." + swiper.params.wrapperClass);
    } // Extend Swiper


    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["extend"])(swiper, {
      $el: $el,
      el: el,
      $wrapperEl: $wrapperEl,
      wrapperEl: $wrapperEl[0],
      // Classes
      classNames: [],
      // Slides
      slides: Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])(),
      slidesGrid: [],
      snapGrid: [],
      slidesSizesGrid: [],
      // isDirection
      isHorizontal: function isHorizontal() {
        return swiper.params.direction === 'horizontal';
      },
      isVertical: function isVertical() {
        return swiper.params.direction === 'vertical';
      },
      // RTL
      rtl: el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl',
      rtlTranslate: swiper.params.direction === 'horizontal' && (el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl'),
      wrongRTL: $wrapperEl.css('display') === '-webkit-box',
      // Indexes
      activeIndex: 0,
      realIndex: 0,
      //
      isBeginning: true,
      isEnd: false,
      // Props
      translate: 0,
      previousTranslate: 0,
      progress: 0,
      velocity: 0,
      animating: false,
      // Locks
      allowSlideNext: swiper.params.allowSlideNext,
      allowSlidePrev: swiper.params.allowSlidePrev,
      // Touch Events
      touchEvents: function touchEvents() {
        var touch = ['touchstart', 'touchmove', 'touchend', 'touchcancel'];
        var desktop = ['mousedown', 'mousemove', 'mouseup'];

        if (swiper.support.pointerEvents) {
          desktop = ['pointerdown', 'pointermove', 'pointerup'];
        }

        swiper.touchEventsTouch = {
          start: touch[0],
          move: touch[1],
          end: touch[2],
          cancel: touch[3]
        };
        swiper.touchEventsDesktop = {
          start: desktop[0],
          move: desktop[1],
          end: desktop[2]
        };
        return swiper.support.touch || !swiper.params.simulateTouch ? swiper.touchEventsTouch : swiper.touchEventsDesktop;
      }(),
      touchEventsData: {
        isTouched: undefined,
        isMoved: undefined,
        allowTouchCallbacks: undefined,
        touchStartTime: undefined,
        isScrolling: undefined,
        currentTranslate: undefined,
        startTranslate: undefined,
        allowThresholdMove: undefined,
        // Form elements to match
        formElements: 'input, select, option, textarea, button, video, label',
        // Last click time
        lastClickTime: Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["now"])(),
        clickTimeout: undefined,
        // Velocities
        velocities: [],
        allowMomentumBounce: undefined,
        isTouchEvent: undefined,
        startMoving: undefined
      },
      // Clicks
      allowClick: true,
      // Touches
      allowTouchMove: swiper.params.allowTouchMove,
      touches: {
        startX: 0,
        startY: 0,
        currentX: 0,
        currentY: 0,
        diff: 0
      },
      // Images
      imagesToLoad: [],
      imagesLoaded: 0
    }); // Install Modules

    swiper.useModules();
    swiper.emit('_swiper'); // Init

    if (swiper.params.init) {
      swiper.init();
    } // Return app instance


    return swiper;
  }

  var _proto = Swiper.prototype;

  _proto.emitContainerClasses = function emitContainerClasses() {
    var swiper = this;
    if (!swiper.params._emitClasses || !swiper.el) return;
    var classes = swiper.el.className.split(' ').filter(function (className) {
      return className.indexOf('swiper-container') === 0 || className.indexOf(swiper.params.containerModifierClass) === 0;
    });
    swiper.emit('_containerClasses', classes.join(' '));
  };

  _proto.emitSlidesClasses = function emitSlidesClasses() {
    var swiper = this;
    if (!swiper.params._emitClasses || !swiper.el) return;
    swiper.slides.each(function (slideEl) {
      var classes = slideEl.className.split(' ').filter(function (className) {
        return className.indexOf('swiper-slide') === 0 || className.indexOf(swiper.params.slideClass) === 0;
      });
      swiper.emit('_slideClass', slideEl, classes.join(' '));
    });
  };

  _proto.slidesPerViewDynamic = function slidesPerViewDynamic() {
    var swiper = this;
    var params = swiper.params,
        slides = swiper.slides,
        slidesGrid = swiper.slidesGrid,
        swiperSize = swiper.size,
        activeIndex = swiper.activeIndex;
    var spv = 1;

    if (params.centeredSlides) {
      var slideSize = slides[activeIndex].swiperSlideSize;
      var breakLoop;

      for (var i = activeIndex + 1; i < slides.length; i += 1) {
        if (slides[i] && !breakLoop) {
          slideSize += slides[i].swiperSlideSize;
          spv += 1;
          if (slideSize > swiperSize) breakLoop = true;
        }
      }

      for (var _i = activeIndex - 1; _i >= 0; _i -= 1) {
        if (slides[_i] && !breakLoop) {
          slideSize += slides[_i].swiperSlideSize;
          spv += 1;
          if (slideSize > swiperSize) breakLoop = true;
        }
      }
    } else {
      for (var _i2 = activeIndex + 1; _i2 < slides.length; _i2 += 1) {
        if (slidesGrid[_i2] - slidesGrid[activeIndex] < swiperSize) {
          spv += 1;
        }
      }
    }

    return spv;
  };

  _proto.update = function update() {
    var swiper = this;
    if (!swiper || swiper.destroyed) return;
    var snapGrid = swiper.snapGrid,
        params = swiper.params; // Breakpoints

    if (params.breakpoints) {
      swiper.setBreakpoint();
    }

    swiper.updateSize();
    swiper.updateSlides();
    swiper.updateProgress();
    swiper.updateSlidesClasses();

    function setTranslate() {
      var translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;
      var newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());
      swiper.setTranslate(newTranslate);
      swiper.updateActiveIndex();
      swiper.updateSlidesClasses();
    }

    var translated;

    if (swiper.params.freeMode) {
      setTranslate();

      if (swiper.params.autoHeight) {
        swiper.updateAutoHeight();
      }
    } else {
      if ((swiper.params.slidesPerView === 'auto' || swiper.params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {
        translated = swiper.slideTo(swiper.slides.length - 1, 0, false, true);
      } else {
        translated = swiper.slideTo(swiper.activeIndex, 0, false, true);
      }

      if (!translated) {
        setTranslate();
      }
    }

    if (params.watchOverflow && snapGrid !== swiper.snapGrid) {
      swiper.checkOverflow();
    }

    swiper.emit('update');
  };

  _proto.changeDirection = function changeDirection(newDirection, needUpdate) {
    if (needUpdate === void 0) {
      needUpdate = true;
    }

    var swiper = this;
    var currentDirection = swiper.params.direction;

    if (!newDirection) {
      // eslint-disable-next-line
      newDirection = currentDirection === 'horizontal' ? 'vertical' : 'horizontal';
    }

    if (newDirection === currentDirection || newDirection !== 'horizontal' && newDirection !== 'vertical') {
      return swiper;
    }

    swiper.$el.removeClass("" + swiper.params.containerModifierClass + currentDirection).addClass("" + swiper.params.containerModifierClass + newDirection);
    swiper.emitContainerClasses();
    swiper.params.direction = newDirection;
    swiper.slides.each(function (slideEl) {
      if (newDirection === 'vertical') {
        slideEl.style.width = '';
      } else {
        slideEl.style.height = '';
      }
    });
    swiper.emit('changeDirection');
    if (needUpdate) swiper.update();
    return swiper;
  };

  _proto.init = function init() {
    var swiper = this;
    if (swiper.initialized) return;
    swiper.emit('beforeInit'); // Set breakpoint

    if (swiper.params.breakpoints) {
      swiper.setBreakpoint();
    } // Add Classes


    swiper.addClasses(); // Create loop

    if (swiper.params.loop) {
      swiper.loopCreate();
    } // Update size


    swiper.updateSize(); // Update slides

    swiper.updateSlides();

    if (swiper.params.watchOverflow) {
      swiper.checkOverflow();
    } // Set Grab Cursor


    if (swiper.params.grabCursor) {
      swiper.setGrabCursor();
    }

    if (swiper.params.preloadImages) {
      swiper.preloadImages();
    } // Slide To Initial Slide


    if (swiper.params.loop) {
      swiper.slideTo(swiper.params.initialSlide + swiper.loopedSlides, 0, swiper.params.runCallbacksOnInit);
    } else {
      swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit);
    } // Attach events


    swiper.attachEvents(); // Init Flag

    swiper.initialized = true; // Emit

    swiper.emit('init');
  };

  _proto.destroy = function destroy(deleteInstance, cleanStyles) {
    if (deleteInstance === void 0) {
      deleteInstance = true;
    }

    if (cleanStyles === void 0) {
      cleanStyles = true;
    }

    var swiper = this;
    var params = swiper.params,
        $el = swiper.$el,
        $wrapperEl = swiper.$wrapperEl,
        slides = swiper.slides;

    if (typeof swiper.params === 'undefined' || swiper.destroyed) {
      return null;
    }

    swiper.emit('beforeDestroy'); // Init Flag

    swiper.initialized = false; // Detach events

    swiper.detachEvents(); // Destroy loop

    if (params.loop) {
      swiper.loopDestroy();
    } // Cleanup styles


    if (cleanStyles) {
      swiper.removeClasses();
      $el.removeAttr('style');
      $wrapperEl.removeAttr('style');

      if (slides && slides.length) {
        slides.removeClass([params.slideVisibleClass, params.slideActiveClass, params.slideNextClass, params.slidePrevClass].join(' ')).removeAttr('style').removeAttr('data-swiper-slide-index');
      }
    }

    swiper.emit('destroy'); // Detach emitter events

    Object.keys(swiper.eventsListeners).forEach(function (eventName) {
      swiper.off(eventName);
    });

    if (deleteInstance !== false) {
      swiper.$el[0].swiper = null;
      Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["deleteProps"])(swiper);
    }

    swiper.destroyed = true;
    return null;
  };

  Swiper.extendDefaults = function extendDefaults(newDefaults) {
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["extend"])(extendedDefaults, newDefaults);
  };

  Swiper.installModule = function installModule(module) {
    if (!Swiper.prototype.modules) Swiper.prototype.modules = {};
    var name = module.name || Object.keys(Swiper.prototype.modules).length + "_" + Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["now"])();
    Swiper.prototype.modules[name] = module;
  };

  Swiper.use = function use(module) {
    if (Array.isArray(module)) {
      module.forEach(function (m) {
        return Swiper.installModule(m);
      });
      return Swiper;
    }

    Swiper.installModule(module);
    return Swiper;
  };

  _createClass(Swiper, null, [{
    key: "extendedDefaults",
    get: function get() {
      return extendedDefaults;
    }
  }, {
    key: "defaults",
    get: function get() {
      return _defaults__WEBPACK_IMPORTED_MODULE_21__["default"];
    }
  }]);

  return Swiper;
}();

Swiper.use([_modules_resize_resize__WEBPACK_IMPORTED_MODULE_5__["default"], _modules_observer_observer__WEBPACK_IMPORTED_MODULE_6__["default"]]);
/* harmony default export */ __webpack_exports__["default"] = (Swiper);

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/defaults.js":
/*!*************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/defaults.js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  init: true,
  direction: 'horizontal',
  touchEventsTarget: 'container',
  initialSlide: 0,
  speed: 300,
  cssMode: false,
  updateOnWindowResize: true,
  // Overrides
  width: null,
  height: null,
  //
  preventInteractionOnTransition: false,
  // ssr
  userAgent: null,
  url: null,
  // To support iOS's swipe-to-go-back gesture (when being used in-app).
  edgeSwipeDetection: false,
  edgeSwipeThreshold: 20,
  // Free mode
  freeMode: false,
  freeModeMomentum: true,
  freeModeMomentumRatio: 1,
  freeModeMomentumBounce: true,
  freeModeMomentumBounceRatio: 1,
  freeModeMomentumVelocityRatio: 1,
  freeModeSticky: false,
  freeModeMinimumVelocity: 0.02,
  // Autoheight
  autoHeight: false,
  // Set wrapper width
  setWrapperSize: false,
  // Virtual Translate
  virtualTranslate: false,
  // Effects
  effect: 'slide',
  // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'
  // Breakpoints
  breakpoints: undefined,
  // Slides grid
  spaceBetween: 0,
  slidesPerView: 1,
  slidesPerColumn: 1,
  slidesPerColumnFill: 'column',
  slidesPerGroup: 1,
  slidesPerGroupSkip: 0,
  centeredSlides: false,
  centeredSlidesBounds: false,
  slidesOffsetBefore: 0,
  // in px
  slidesOffsetAfter: 0,
  // in px
  normalizeSlideIndex: true,
  centerInsufficientSlides: false,
  // Disable swiper and hide navigation when container not overflow
  watchOverflow: false,
  // Round length
  roundLengths: false,
  // Touches
  touchRatio: 1,
  touchAngle: 45,
  simulateTouch: true,
  shortSwipes: true,
  longSwipes: true,
  longSwipesRatio: 0.5,
  longSwipesMs: 300,
  followFinger: true,
  allowTouchMove: true,
  threshold: 0,
  touchMoveStopPropagation: false,
  touchStartPreventDefault: true,
  touchStartForcePreventDefault: false,
  touchReleaseOnEdges: false,
  // Unique Navigation Elements
  uniqueNavElements: true,
  // Resistance
  resistance: true,
  resistanceRatio: 0.85,
  // Progress
  watchSlidesProgress: false,
  watchSlidesVisibility: false,
  // Cursor
  grabCursor: false,
  // Clicks
  preventClicks: true,
  preventClicksPropagation: true,
  slideToClickedSlide: false,
  // Images
  preloadImages: true,
  updateOnImagesReady: true,
  // loop
  loop: false,
  loopAdditionalSlides: 0,
  loopedSlides: null,
  loopFillGroupWithBlank: false,
  loopPreventsSlide: true,
  // Swiping/no swiping
  allowSlidePrev: true,
  allowSlideNext: true,
  swipeHandler: null,
  // '.swipe-handler',
  noSwiping: true,
  noSwipingClass: 'swiper-no-swiping',
  noSwipingSelector: null,
  // Passive Listeners
  passiveListeners: true,
  // NS
  containerModifierClass: 'swiper-container-',
  // NEW
  slideClass: 'swiper-slide',
  slideBlankClass: 'swiper-slide-invisible-blank',
  slideActiveClass: 'swiper-slide-active',
  slideDuplicateActiveClass: 'swiper-slide-duplicate-active',
  slideVisibleClass: 'swiper-slide-visible',
  slideDuplicateClass: 'swiper-slide-duplicate',
  slideNextClass: 'swiper-slide-next',
  slideDuplicateNextClass: 'swiper-slide-duplicate-next',
  slidePrevClass: 'swiper-slide-prev',
  slideDuplicatePrevClass: 'swiper-slide-duplicate-prev',
  wrapperClass: 'swiper-wrapper',
  // Callbacks
  runCallbacksOnInit: true,
  // Internals
  _emitClasses: false
});

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/events-emitter.js":
/*!*******************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/events-emitter.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* eslint-disable no-underscore-dangle */
/* harmony default export */ __webpack_exports__["default"] = ({
  on: function on(events, handler, priority) {
    var self = this;
    if (typeof handler !== 'function') return self;
    var method = priority ? 'unshift' : 'push';
    events.split(' ').forEach(function (event) {
      if (!self.eventsListeners[event]) self.eventsListeners[event] = [];
      self.eventsListeners[event][method](handler);
    });
    return self;
  },
  once: function once(events, handler, priority) {
    var self = this;
    if (typeof handler !== 'function') return self;

    function onceHandler() {
      self.off(events, onceHandler);

      if (onceHandler.__emitterProxy) {
        delete onceHandler.__emitterProxy;
      }

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      handler.apply(self, args);
    }

    onceHandler.__emitterProxy = handler;
    return self.on(events, onceHandler, priority);
  },
  onAny: function onAny(handler, priority) {
    var self = this;
    if (typeof handler !== 'function') return self;
    var method = priority ? 'unshift' : 'push';

    if (self.eventsAnyListeners.indexOf(handler) < 0) {
      self.eventsAnyListeners[method](handler);
    }

    return self;
  },
  offAny: function offAny(handler) {
    var self = this;
    if (!self.eventsAnyListeners) return self;
    var index = self.eventsAnyListeners.indexOf(handler);

    if (index >= 0) {
      self.eventsAnyListeners.splice(index, 1);
    }

    return self;
  },
  off: function off(events, handler) {
    var self = this;
    if (!self.eventsListeners) return self;
    events.split(' ').forEach(function (event) {
      if (typeof handler === 'undefined') {
        self.eventsListeners[event] = [];
      } else if (self.eventsListeners[event]) {
        self.eventsListeners[event].forEach(function (eventHandler, index) {
          if (eventHandler === handler || eventHandler.__emitterProxy && eventHandler.__emitterProxy === handler) {
            self.eventsListeners[event].splice(index, 1);
          }
        });
      }
    });
    return self;
  },
  emit: function emit() {
    var self = this;
    if (!self.eventsListeners) return self;
    var events;
    var data;
    var context;

    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    if (typeof args[0] === 'string' || Array.isArray(args[0])) {
      events = args[0];
      data = args.slice(1, args.length);
      context = self;
    } else {
      events = args[0].events;
      data = args[0].data;
      context = args[0].context || self;
    }

    data.unshift(context);
    var eventsArray = Array.isArray(events) ? events : events.split(' ');
    eventsArray.forEach(function (event) {
      if (self.eventsListeners && self.eventsListeners[event]) {
        var handlers = [];
        self.eventsListeners[event].forEach(function (eventHandler) {
          handlers.push(eventHandler);
        });
        handlers.forEach(function (eventHandler) {
          eventHandler.apply(context, data);
        });
      }
    });
    return self;
  }
});

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/events/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/events/index.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");
/* harmony import */ var _onTouchStart__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./onTouchStart */ "./node_modules/swiper/esm/components/core/events/onTouchStart.js");
/* harmony import */ var _onTouchMove__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./onTouchMove */ "./node_modules/swiper/esm/components/core/events/onTouchMove.js");
/* harmony import */ var _onTouchEnd__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./onTouchEnd */ "./node_modules/swiper/esm/components/core/events/onTouchEnd.js");
/* harmony import */ var _onResize__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./onResize */ "./node_modules/swiper/esm/components/core/events/onResize.js");
/* harmony import */ var _onClick__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./onClick */ "./node_modules/swiper/esm/components/core/events/onClick.js");
/* harmony import */ var _onScroll__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./onScroll */ "./node_modules/swiper/esm/components/core/events/onScroll.js");







var dummyEventAttached = false;

function dummyEventListener() {}

function attachEvents() {
  var swiper = this;
  var document = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getDocument"])();
  var params = swiper.params,
      touchEvents = swiper.touchEvents,
      el = swiper.el,
      wrapperEl = swiper.wrapperEl,
      device = swiper.device,
      support = swiper.support;
  swiper.onTouchStart = _onTouchStart__WEBPACK_IMPORTED_MODULE_1__["default"].bind(swiper);
  swiper.onTouchMove = _onTouchMove__WEBPACK_IMPORTED_MODULE_2__["default"].bind(swiper);
  swiper.onTouchEnd = _onTouchEnd__WEBPACK_IMPORTED_MODULE_3__["default"].bind(swiper);

  if (params.cssMode) {
    swiper.onScroll = _onScroll__WEBPACK_IMPORTED_MODULE_6__["default"].bind(swiper);
  }

  swiper.onClick = _onClick__WEBPACK_IMPORTED_MODULE_5__["default"].bind(swiper);
  var capture = !!params.nested; // Touch Events

  if (!support.touch && support.pointerEvents) {
    el.addEventListener(touchEvents.start, swiper.onTouchStart, false);
    document.addEventListener(touchEvents.move, swiper.onTouchMove, capture);
    document.addEventListener(touchEvents.end, swiper.onTouchEnd, false);
  } else {
    if (support.touch) {
      var passiveListener = touchEvents.start === 'touchstart' && support.passiveListener && params.passiveListeners ? {
        passive: true,
        capture: false
      } : false;
      el.addEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);
      el.addEventListener(touchEvents.move, swiper.onTouchMove, support.passiveListener ? {
        passive: false,
        capture: capture
      } : capture);
      el.addEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);

      if (touchEvents.cancel) {
        el.addEventListener(touchEvents.cancel, swiper.onTouchEnd, passiveListener);
      }

      if (!dummyEventAttached) {
        document.addEventListener('touchstart', dummyEventListener);
        dummyEventAttached = true;
      }
    }

    if (params.simulateTouch && !device.ios && !device.android || params.simulateTouch && !support.touch && device.ios) {
      el.addEventListener('mousedown', swiper.onTouchStart, false);
      document.addEventListener('mousemove', swiper.onTouchMove, capture);
      document.addEventListener('mouseup', swiper.onTouchEnd, false);
    }
  } // Prevent Links Clicks


  if (params.preventClicks || params.preventClicksPropagation) {
    el.addEventListener('click', swiper.onClick, true);
  }

  if (params.cssMode) {
    wrapperEl.addEventListener('scroll', swiper.onScroll);
  } // Resize handler


  if (params.updateOnWindowResize) {
    swiper.on(device.ios || device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate', _onResize__WEBPACK_IMPORTED_MODULE_4__["default"], true);
  } else {
    swiper.on('observerUpdate', _onResize__WEBPACK_IMPORTED_MODULE_4__["default"], true);
  }
}

function detachEvents() {
  var swiper = this;
  var document = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getDocument"])();
  var params = swiper.params,
      touchEvents = swiper.touchEvents,
      el = swiper.el,
      wrapperEl = swiper.wrapperEl,
      device = swiper.device,
      support = swiper.support;
  var capture = !!params.nested; // Touch Events

  if (!support.touch && support.pointerEvents) {
    el.removeEventListener(touchEvents.start, swiper.onTouchStart, false);
    document.removeEventListener(touchEvents.move, swiper.onTouchMove, capture);
    document.removeEventListener(touchEvents.end, swiper.onTouchEnd, false);
  } else {
    if (support.touch) {
      var passiveListener = touchEvents.start === 'onTouchStart' && support.passiveListener && params.passiveListeners ? {
        passive: true,
        capture: false
      } : false;
      el.removeEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);
      el.removeEventListener(touchEvents.move, swiper.onTouchMove, capture);
      el.removeEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);

      if (touchEvents.cancel) {
        el.removeEventListener(touchEvents.cancel, swiper.onTouchEnd, passiveListener);
      }
    }

    if (params.simulateTouch && !device.ios && !device.android || params.simulateTouch && !support.touch && device.ios) {
      el.removeEventListener('mousedown', swiper.onTouchStart, false);
      document.removeEventListener('mousemove', swiper.onTouchMove, capture);
      document.removeEventListener('mouseup', swiper.onTouchEnd, false);
    }
  } // Prevent Links Clicks


  if (params.preventClicks || params.preventClicksPropagation) {
    el.removeEventListener('click', swiper.onClick, true);
  }

  if (params.cssMode) {
    wrapperEl.removeEventListener('scroll', swiper.onScroll);
  } // Resize handler


  swiper.off(device.ios || device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate', _onResize__WEBPACK_IMPORTED_MODULE_4__["default"]);
}

/* harmony default export */ __webpack_exports__["default"] = ({
  attachEvents: attachEvents,
  detachEvents: detachEvents
});

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/events/onClick.js":
/*!*******************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/events/onClick.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return onClick; });
function onClick(e) {
  var swiper = this;

  if (!swiper.allowClick) {
    if (swiper.params.preventClicks) e.preventDefault();

    if (swiper.params.preventClicksPropagation && swiper.animating) {
      e.stopPropagation();
      e.stopImmediatePropagation();
    }
  }
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/events/onResize.js":
/*!********************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/events/onResize.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return onResize; });
function onResize() {
  var swiper = this;
  var params = swiper.params,
      el = swiper.el;
  if (el && el.offsetWidth === 0) return; // Breakpoints

  if (params.breakpoints) {
    swiper.setBreakpoint();
  } // Save locks


  var allowSlideNext = swiper.allowSlideNext,
      allowSlidePrev = swiper.allowSlidePrev,
      snapGrid = swiper.snapGrid; // Disable locks on resize

  swiper.allowSlideNext = true;
  swiper.allowSlidePrev = true;
  swiper.updateSize();
  swiper.updateSlides();
  swiper.updateSlidesClasses();

  if ((params.slidesPerView === 'auto' || params.slidesPerView > 1) && swiper.isEnd && !swiper.isBeginning && !swiper.params.centeredSlides) {
    swiper.slideTo(swiper.slides.length - 1, 0, false, true);
  } else {
    swiper.slideTo(swiper.activeIndex, 0, false, true);
  }

  if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {
    swiper.autoplay.run();
  } // Return locks after resize


  swiper.allowSlidePrev = allowSlidePrev;
  swiper.allowSlideNext = allowSlideNext;

  if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {
    swiper.checkOverflow();
  }
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/events/onScroll.js":
/*!********************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/events/onScroll.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return onScroll; });
function onScroll() {
  var swiper = this;
  var wrapperEl = swiper.wrapperEl,
      rtlTranslate = swiper.rtlTranslate;
  swiper.previousTranslate = swiper.translate;

  if (swiper.isHorizontal()) {
    if (rtlTranslate) {
      swiper.translate = wrapperEl.scrollWidth - wrapperEl.offsetWidth - wrapperEl.scrollLeft;
    } else {
      swiper.translate = -wrapperEl.scrollLeft;
    }
  } else {
    swiper.translate = -wrapperEl.scrollTop;
  } // eslint-disable-next-line


  if (swiper.translate === -0) swiper.translate = 0;
  swiper.updateActiveIndex();
  swiper.updateSlidesClasses();
  var newProgress;
  var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();

  if (translatesDiff === 0) {
    newProgress = 0;
  } else {
    newProgress = (swiper.translate - swiper.minTranslate()) / translatesDiff;
  }

  if (newProgress !== swiper.progress) {
    swiper.updateProgress(rtlTranslate ? -swiper.translate : swiper.translate);
  }

  swiper.emit('setTranslate', swiper.translate, false);
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/events/onTouchEnd.js":
/*!**********************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/events/onTouchEnd.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return onTouchEnd; });
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/utils */ "./node_modules/swiper/esm/utils/utils.js");

function onTouchEnd(event) {
  var swiper = this;
  var data = swiper.touchEventsData;
  var params = swiper.params,
      touches = swiper.touches,
      rtl = swiper.rtlTranslate,
      $wrapperEl = swiper.$wrapperEl,
      slidesGrid = swiper.slidesGrid,
      snapGrid = swiper.snapGrid;
  var e = event;
  if (e.originalEvent) e = e.originalEvent;

  if (data.allowTouchCallbacks) {
    swiper.emit('touchEnd', e);
  }

  data.allowTouchCallbacks = false;

  if (!data.isTouched) {
    if (data.isMoved && params.grabCursor) {
      swiper.setGrabCursor(false);
    }

    data.isMoved = false;
    data.startMoving = false;
    return;
  } // Return Grab Cursor


  if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
    swiper.setGrabCursor(false);
  } // Time diff


  var touchEndTime = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["now"])();
  var timeDiff = touchEndTime - data.touchStartTime; // Tap, doubleTap, Click

  if (swiper.allowClick) {
    swiper.updateClickedSlide(e);
    swiper.emit('tap click', e);

    if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {
      swiper.emit('doubleTap doubleClick', e);
    }
  }

  data.lastClickTime = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["now"])();
  Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["nextTick"])(function () {
    if (!swiper.destroyed) swiper.allowClick = true;
  });

  if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 || data.currentTranslate === data.startTranslate) {
    data.isTouched = false;
    data.isMoved = false;
    data.startMoving = false;
    return;
  }

  data.isTouched = false;
  data.isMoved = false;
  data.startMoving = false;
  var currentPos;

  if (params.followFinger) {
    currentPos = rtl ? swiper.translate : -swiper.translate;
  } else {
    currentPos = -data.currentTranslate;
  }

  if (params.cssMode) {
    return;
  }

  if (params.freeMode) {
    if (currentPos < -swiper.minTranslate()) {
      swiper.slideTo(swiper.activeIndex);
      return;
    }

    if (currentPos > -swiper.maxTranslate()) {
      if (swiper.slides.length < snapGrid.length) {
        swiper.slideTo(snapGrid.length - 1);
      } else {
        swiper.slideTo(swiper.slides.length - 1);
      }

      return;
    }

    if (params.freeModeMomentum) {
      if (data.velocities.length > 1) {
        var lastMoveEvent = data.velocities.pop();
        var velocityEvent = data.velocities.pop();
        var distance = lastMoveEvent.position - velocityEvent.position;
        var time = lastMoveEvent.time - velocityEvent.time;
        swiper.velocity = distance / time;
        swiper.velocity /= 2;

        if (Math.abs(swiper.velocity) < params.freeModeMinimumVelocity) {
          swiper.velocity = 0;
        } // this implies that the user stopped moving a finger then released.
        // There would be no events with distance zero, so the last event is stale.


        if (time > 150 || Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["now"])() - lastMoveEvent.time > 300) {
          swiper.velocity = 0;
        }
      } else {
        swiper.velocity = 0;
      }

      swiper.velocity *= params.freeModeMomentumVelocityRatio;
      data.velocities.length = 0;
      var momentumDuration = 1000 * params.freeModeMomentumRatio;
      var momentumDistance = swiper.velocity * momentumDuration;
      var newPosition = swiper.translate + momentumDistance;
      if (rtl) newPosition = -newPosition;
      var doBounce = false;
      var afterBouncePosition;
      var bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeModeMomentumBounceRatio;
      var needsLoopFix;

      if (newPosition < swiper.maxTranslate()) {
        if (params.freeModeMomentumBounce) {
          if (newPosition + swiper.maxTranslate() < -bounceAmount) {
            newPosition = swiper.maxTranslate() - bounceAmount;
          }

          afterBouncePosition = swiper.maxTranslate();
          doBounce = true;
          data.allowMomentumBounce = true;
        } else {
          newPosition = swiper.maxTranslate();
        }

        if (params.loop && params.centeredSlides) needsLoopFix = true;
      } else if (newPosition > swiper.minTranslate()) {
        if (params.freeModeMomentumBounce) {
          if (newPosition - swiper.minTranslate() > bounceAmount) {
            newPosition = swiper.minTranslate() + bounceAmount;
          }

          afterBouncePosition = swiper.minTranslate();
          doBounce = true;
          data.allowMomentumBounce = true;
        } else {
          newPosition = swiper.minTranslate();
        }

        if (params.loop && params.centeredSlides) needsLoopFix = true;
      } else if (params.freeModeSticky) {
        var nextSlide;

        for (var j = 0; j < snapGrid.length; j += 1) {
          if (snapGrid[j] > -newPosition) {
            nextSlide = j;
            break;
          }
        }

        if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {
          newPosition = snapGrid[nextSlide];
        } else {
          newPosition = snapGrid[nextSlide - 1];
        }

        newPosition = -newPosition;
      }

      if (needsLoopFix) {
        swiper.once('transitionEnd', function () {
          swiper.loopFix();
        });
      } // Fix duration


      if (swiper.velocity !== 0) {
        if (rtl) {
          momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);
        } else {
          momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);
        }

        if (params.freeModeSticky) {
          // If freeModeSticky is active and the user ends a swipe with a slow-velocity
          // event, then durations can be 20+ seconds to slide one (or zero!) slides.
          // It's easy to see this when simulating touch with mouse events. To fix this,
          // limit single-slide swipes to the default slide duration. This also has the
          // nice side effect of matching slide speed if the user stopped moving before
          // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.
          // For faster swipes, also apply limits (albeit higher ones).
          var moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);
          var currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];

          if (moveDistance < currentSlideSize) {
            momentumDuration = params.speed;
          } else if (moveDistance < 2 * currentSlideSize) {
            momentumDuration = params.speed * 1.5;
          } else {
            momentumDuration = params.speed * 2.5;
          }
        }
      } else if (params.freeModeSticky) {
        swiper.slideToClosest();
        return;
      }

      if (params.freeModeMomentumBounce && doBounce) {
        swiper.updateProgress(afterBouncePosition);
        swiper.setTransition(momentumDuration);
        swiper.setTranslate(newPosition);
        swiper.transitionStart(true, swiper.swipeDirection);
        swiper.animating = true;
        $wrapperEl.transitionEnd(function () {
          if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;
          swiper.emit('momentumBounce');
          swiper.setTransition(params.speed);
          setTimeout(function () {
            swiper.setTranslate(afterBouncePosition);
            $wrapperEl.transitionEnd(function () {
              if (!swiper || swiper.destroyed) return;
              swiper.transitionEnd();
            });
          }, 0);
        });
      } else if (swiper.velocity) {
        swiper.updateProgress(newPosition);
        swiper.setTransition(momentumDuration);
        swiper.setTranslate(newPosition);
        swiper.transitionStart(true, swiper.swipeDirection);

        if (!swiper.animating) {
          swiper.animating = true;
          $wrapperEl.transitionEnd(function () {
            if (!swiper || swiper.destroyed) return;
            swiper.transitionEnd();
          });
        }
      } else {
        swiper.updateProgress(newPosition);
      }

      swiper.updateActiveIndex();
      swiper.updateSlidesClasses();
    } else if (params.freeModeSticky) {
      swiper.slideToClosest();
      return;
    }

    if (!params.freeModeMomentum || timeDiff >= params.longSwipesMs) {
      swiper.updateProgress();
      swiper.updateActiveIndex();
      swiper.updateSlidesClasses();
    }

    return;
  } // Find current slide


  var stopIndex = 0;
  var groupSize = swiper.slidesSizesGrid[0];

  for (var i = 0; i < slidesGrid.length; i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup) {
    var _increment = i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;

    if (typeof slidesGrid[i + _increment] !== 'undefined') {
      if (currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + _increment]) {
        stopIndex = i;
        groupSize = slidesGrid[i + _increment] - slidesGrid[i];
      }
    } else if (currentPos >= slidesGrid[i]) {
      stopIndex = i;
      groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];
    }
  } // Find current slide size


  var ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;
  var increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;

  if (timeDiff > params.longSwipesMs) {
    // Long touches
    if (!params.longSwipes) {
      swiper.slideTo(swiper.activeIndex);
      return;
    }

    if (swiper.swipeDirection === 'next') {
      if (ratio >= params.longSwipesRatio) swiper.slideTo(stopIndex + increment);else swiper.slideTo(stopIndex);
    }

    if (swiper.swipeDirection === 'prev') {
      if (ratio > 1 - params.longSwipesRatio) swiper.slideTo(stopIndex + increment);else swiper.slideTo(stopIndex);
    }
  } else {
    // Short swipes
    if (!params.shortSwipes) {
      swiper.slideTo(swiper.activeIndex);
      return;
    }

    var isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);

    if (!isNavButtonTarget) {
      if (swiper.swipeDirection === 'next') {
        swiper.slideTo(stopIndex + increment);
      }

      if (swiper.swipeDirection === 'prev') {
        swiper.slideTo(stopIndex);
      }
    } else if (e.target === swiper.navigation.nextEl) {
      swiper.slideTo(stopIndex + increment);
    } else {
      swiper.slideTo(stopIndex);
    }
  }
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/events/onTouchMove.js":
/*!***********************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/events/onTouchMove.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return onTouchMove; });
/* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");
/* harmony import */ var _utils_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/dom */ "./node_modules/swiper/esm/utils/dom.js");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/utils */ "./node_modules/swiper/esm/utils/utils.js");



function onTouchMove(event) {
  var document = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getDocument"])();
  var swiper = this;
  var data = swiper.touchEventsData;
  var params = swiper.params,
      touches = swiper.touches,
      rtl = swiper.rtlTranslate;
  var e = event;
  if (e.originalEvent) e = e.originalEvent;

  if (!data.isTouched) {
    if (data.startMoving && data.isScrolling) {
      swiper.emit('touchMoveOpposite', e);
    }

    return;
  }

  if (data.isTouchEvent && e.type !== 'touchmove') return;
  var targetTouch = e.type === 'touchmove' && e.targetTouches && (e.targetTouches[0] || e.changedTouches[0]);
  var pageX = e.type === 'touchmove' ? targetTouch.pageX : e.pageX;
  var pageY = e.type === 'touchmove' ? targetTouch.pageY : e.pageY;

  if (e.preventedByNestedSwiper) {
    touches.startX = pageX;
    touches.startY = pageY;
    return;
  }

  if (!swiper.allowTouchMove) {
    // isMoved = true;
    swiper.allowClick = false;

    if (data.isTouched) {
      Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["extend"])(touches, {
        startX: pageX,
        startY: pageY,
        currentX: pageX,
        currentY: pageY
      });
      data.touchStartTime = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["now"])();
    }

    return;
  }

  if (data.isTouchEvent && params.touchReleaseOnEdges && !params.loop) {
    if (swiper.isVertical()) {
      // Vertical
      if (pageY < touches.startY && swiper.translate <= swiper.maxTranslate() || pageY > touches.startY && swiper.translate >= swiper.minTranslate()) {
        data.isTouched = false;
        data.isMoved = false;
        return;
      }
    } else if (pageX < touches.startX && swiper.translate <= swiper.maxTranslate() || pageX > touches.startX && swiper.translate >= swiper.minTranslate()) {
      return;
    }
  }

  if (data.isTouchEvent && document.activeElement) {
    if (e.target === document.activeElement && Object(_utils_dom__WEBPACK_IMPORTED_MODULE_1__["default"])(e.target).is(data.formElements)) {
      data.isMoved = true;
      swiper.allowClick = false;
      return;
    }
  }

  if (data.allowTouchCallbacks) {
    swiper.emit('touchMove', e);
  }

  if (e.targetTouches && e.targetTouches.length > 1) return;
  touches.currentX = pageX;
  touches.currentY = pageY;
  var diffX = touches.currentX - touches.startX;
  var diffY = touches.currentY - touches.startY;
  if (swiper.params.threshold && Math.sqrt(Math.pow(diffX, 2) + Math.pow(diffY, 2)) < swiper.params.threshold) return;

  if (typeof data.isScrolling === 'undefined') {
    var touchAngle;

    if (swiper.isHorizontal() && touches.currentY === touches.startY || swiper.isVertical() && touches.currentX === touches.startX) {
      data.isScrolling = false;
    } else {
      // eslint-disable-next-line
      if (diffX * diffX + diffY * diffY >= 25) {
        touchAngle = Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180 / Math.PI;
        data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : 90 - touchAngle > params.touchAngle;
      }
    }
  }

  if (data.isScrolling) {
    swiper.emit('touchMoveOpposite', e);
  }

  if (typeof data.startMoving === 'undefined') {
    if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {
      data.startMoving = true;
    }
  }

  if (data.isScrolling) {
    data.isTouched = false;
    return;
  }

  if (!data.startMoving) {
    return;
  }

  swiper.allowClick = false;

  if (!params.cssMode && e.cancelable) {
    e.preventDefault();
  }

  if (params.touchMoveStopPropagation && !params.nested) {
    e.stopPropagation();
  }

  if (!data.isMoved) {
    if (params.loop) {
      swiper.loopFix();
    }

    data.startTranslate = swiper.getTranslate();
    swiper.setTransition(0);

    if (swiper.animating) {
      swiper.$wrapperEl.trigger('webkitTransitionEnd transitionend');
    }

    data.allowMomentumBounce = false; // Grab Cursor

    if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
      swiper.setGrabCursor(true);
    }

    swiper.emit('sliderFirstMove', e);
  }

  swiper.emit('sliderMove', e);
  data.isMoved = true;
  var diff = swiper.isHorizontal() ? diffX : diffY;
  touches.diff = diff;
  diff *= params.touchRatio;
  if (rtl) diff = -diff;
  swiper.swipeDirection = diff > 0 ? 'prev' : 'next';
  data.currentTranslate = diff + data.startTranslate;
  var disableParentSwiper = true;
  var resistanceRatio = params.resistanceRatio;

  if (params.touchReleaseOnEdges) {
    resistanceRatio = 0;
  }

  if (diff > 0 && data.currentTranslate > swiper.minTranslate()) {
    disableParentSwiper = false;
    if (params.resistance) data.currentTranslate = swiper.minTranslate() - 1 + Math.pow(-swiper.minTranslate() + data.startTranslate + diff, resistanceRatio);
  } else if (diff < 0 && data.currentTranslate < swiper.maxTranslate()) {
    disableParentSwiper = false;
    if (params.resistance) data.currentTranslate = swiper.maxTranslate() + 1 - Math.pow(swiper.maxTranslate() - data.startTranslate - diff, resistanceRatio);
  }

  if (disableParentSwiper) {
    e.preventedByNestedSwiper = true;
  } // Directions locks


  if (!swiper.allowSlideNext && swiper.swipeDirection === 'next' && data.currentTranslate < data.startTranslate) {
    data.currentTranslate = data.startTranslate;
  }

  if (!swiper.allowSlidePrev && swiper.swipeDirection === 'prev' && data.currentTranslate > data.startTranslate) {
    data.currentTranslate = data.startTranslate;
  } // Threshold


  if (params.threshold > 0) {
    if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {
      if (!data.allowThresholdMove) {
        data.allowThresholdMove = true;
        touches.startX = touches.currentX;
        touches.startY = touches.currentY;
        data.currentTranslate = data.startTranslate;
        touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;
        return;
      }
    } else {
      data.currentTranslate = data.startTranslate;
      return;
    }
  }

  if (!params.followFinger || params.cssMode) return; // Update active index in free mode

  if (params.freeMode || params.watchSlidesProgress || params.watchSlidesVisibility) {
    swiper.updateActiveIndex();
    swiper.updateSlidesClasses();
  }

  if (params.freeMode) {
    // Velocity
    if (data.velocities.length === 0) {
      data.velocities.push({
        position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],
        time: data.touchStartTime
      });
    }

    data.velocities.push({
      position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],
      time: Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["now"])()
    });
  } // Update progress


  swiper.updateProgress(data.currentTranslate); // Update translate

  swiper.setTranslate(data.currentTranslate);
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/events/onTouchStart.js":
/*!************************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/events/onTouchStart.js ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return onTouchStart; });
/* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");
/* harmony import */ var _utils_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/dom */ "./node_modules/swiper/esm/utils/dom.js");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/utils */ "./node_modules/swiper/esm/utils/utils.js");



function onTouchStart(event) {
  var swiper = this;
  var document = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getDocument"])();
  var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();
  var data = swiper.touchEventsData;
  var params = swiper.params,
      touches = swiper.touches;

  if (swiper.animating && params.preventInteractionOnTransition) {
    return;
  }

  var e = event;
  if (e.originalEvent) e = e.originalEvent;
  var $targetEl = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_1__["default"])(e.target);

  if (params.touchEventsTarget === 'wrapper') {
    if (!$targetEl.closest(swiper.wrapperEl).length) return;
  }

  data.isTouchEvent = e.type === 'touchstart';
  if (!data.isTouchEvent && 'which' in e && e.which === 3) return;
  if (!data.isTouchEvent && 'button' in e && e.button > 0) return;
  if (data.isTouched && data.isMoved) return;

  if (params.noSwiping && $targetEl.closest(params.noSwipingSelector ? params.noSwipingSelector : "." + params.noSwipingClass)[0]) {
    swiper.allowClick = true;
    return;
  }

  if (params.swipeHandler) {
    if (!$targetEl.closest(params.swipeHandler)[0]) return;
  }

  touches.currentX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
  touches.currentY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;
  var startX = touches.currentX;
  var startY = touches.currentY; // Do NOT start if iOS edge swipe is detected. Otherwise iOS app cannot swipe-to-go-back anymore

  var edgeSwipeDetection = params.edgeSwipeDetection || params.iOSEdgeSwipeDetection;
  var edgeSwipeThreshold = params.edgeSwipeThreshold || params.iOSEdgeSwipeThreshold;

  if (edgeSwipeDetection && (startX <= edgeSwipeThreshold || startX >= window.screen.width - edgeSwipeThreshold)) {
    return;
  }

  Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["extend"])(data, {
    isTouched: true,
    isMoved: false,
    allowTouchCallbacks: true,
    isScrolling: undefined,
    startMoving: undefined
  });
  touches.startX = startX;
  touches.startY = startY;
  data.touchStartTime = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["now"])();
  swiper.allowClick = true;
  swiper.updateSize();
  swiper.swipeDirection = undefined;
  if (params.threshold > 0) data.allowThresholdMove = false;

  if (e.type !== 'touchstart') {
    var preventDefault = true;
    if ($targetEl.is(data.formElements)) preventDefault = false;

    if (document.activeElement && Object(_utils_dom__WEBPACK_IMPORTED_MODULE_1__["default"])(document.activeElement).is(data.formElements) && document.activeElement !== $targetEl[0]) {
      document.activeElement.blur();
    }

    var shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;

    if (params.touchStartForcePreventDefault || shouldPreventDefault) {
      e.preventDefault();
    }
  }

  swiper.emit('touchStart', e);
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/grab-cursor/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/grab-cursor/index.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _setGrabCursor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setGrabCursor */ "./node_modules/swiper/esm/components/core/grab-cursor/setGrabCursor.js");
/* harmony import */ var _unsetGrabCursor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./unsetGrabCursor */ "./node_modules/swiper/esm/components/core/grab-cursor/unsetGrabCursor.js");


/* harmony default export */ __webpack_exports__["default"] = ({
  setGrabCursor: _setGrabCursor__WEBPACK_IMPORTED_MODULE_0__["default"],
  unsetGrabCursor: _unsetGrabCursor__WEBPACK_IMPORTED_MODULE_1__["default"]
});

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/grab-cursor/setGrabCursor.js":
/*!******************************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/grab-cursor/setGrabCursor.js ***!
  \******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return setGrabCursor; });
function setGrabCursor(moving) {
  var swiper = this;
  if (swiper.support.touch || !swiper.params.simulateTouch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) return;
  var el = swiper.el;
  el.style.cursor = 'move';
  el.style.cursor = moving ? '-webkit-grabbing' : '-webkit-grab';
  el.style.cursor = moving ? '-moz-grabbin' : '-moz-grab';
  el.style.cursor = moving ? 'grabbing' : 'grab';
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/grab-cursor/unsetGrabCursor.js":
/*!********************************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/grab-cursor/unsetGrabCursor.js ***!
  \********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return unsetGrabCursor; });
function unsetGrabCursor() {
  var swiper = this;

  if (swiper.support.touch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) {
    return;
  }

  swiper.el.style.cursor = '';
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/images/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/images/index.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _loadImage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadImage */ "./node_modules/swiper/esm/components/core/images/loadImage.js");
/* harmony import */ var _preloadImages__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./preloadImages */ "./node_modules/swiper/esm/components/core/images/preloadImages.js");


/* harmony default export */ __webpack_exports__["default"] = ({
  loadImage: _loadImage__WEBPACK_IMPORTED_MODULE_0__["default"],
  preloadImages: _preloadImages__WEBPACK_IMPORTED_MODULE_1__["default"]
});

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/images/loadImage.js":
/*!*********************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/images/loadImage.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return loadImage; });
/* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");
/* harmony import */ var _utils_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/dom */ "./node_modules/swiper/esm/utils/dom.js");


function loadImage(imageEl, src, srcset, sizes, checkForComplete, callback) {
  var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();
  var image;

  function onReady() {
    if (callback) callback();
  }

  var isPicture = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_1__["default"])(imageEl).parent('picture')[0];

  if (!isPicture && (!imageEl.complete || !checkForComplete)) {
    if (src) {
      image = new window.Image();
      image.onload = onReady;
      image.onerror = onReady;

      if (sizes) {
        image.sizes = sizes;
      }

      if (srcset) {
        image.srcset = srcset;
      }

      if (src) {
        image.src = src;
      }
    } else {
      onReady();
    }
  } else {
    // image already loaded...
    onReady();
  }
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/images/preloadImages.js":
/*!*************************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/images/preloadImages.js ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return preloadImages; });
function preloadImages() {
  var swiper = this;
  swiper.imagesToLoad = swiper.$el.find('img');

  function onReady() {
    if (typeof swiper === 'undefined' || swiper === null || !swiper || swiper.destroyed) return;
    if (swiper.imagesLoaded !== undefined) swiper.imagesLoaded += 1;

    if (swiper.imagesLoaded === swiper.imagesToLoad.length) {
      if (swiper.params.updateOnImagesReady) swiper.update();
      swiper.emit('imagesReady');
    }
  }

  for (var i = 0; i < swiper.imagesToLoad.length; i += 1) {
    var imageEl = swiper.imagesToLoad[i];
    swiper.loadImage(imageEl, imageEl.currentSrc || imageEl.getAttribute('src'), imageEl.srcset || imageEl.getAttribute('srcset'), imageEl.sizes || imageEl.getAttribute('sizes'), true, onReady);
  }
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/loop/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/loop/index.js ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _loopCreate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loopCreate */ "./node_modules/swiper/esm/components/core/loop/loopCreate.js");
/* harmony import */ var _loopFix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loopFix */ "./node_modules/swiper/esm/components/core/loop/loopFix.js");
/* harmony import */ var _loopDestroy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loopDestroy */ "./node_modules/swiper/esm/components/core/loop/loopDestroy.js");



/* harmony default export */ __webpack_exports__["default"] = ({
  loopCreate: _loopCreate__WEBPACK_IMPORTED_MODULE_0__["default"],
  loopFix: _loopFix__WEBPACK_IMPORTED_MODULE_1__["default"],
  loopDestroy: _loopDestroy__WEBPACK_IMPORTED_MODULE_2__["default"]
});

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/loop/loopCreate.js":
/*!********************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/loop/loopCreate.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return loopCreate; });
/* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");
/* harmony import */ var _utils_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/dom */ "./node_modules/swiper/esm/utils/dom.js");


function loopCreate() {
  var swiper = this;
  var document = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getDocument"])();
  var params = swiper.params,
      $wrapperEl = swiper.$wrapperEl; // Remove duplicated slides

  $wrapperEl.children("." + params.slideClass + "." + params.slideDuplicateClass).remove();
  var slides = $wrapperEl.children("." + params.slideClass);

  if (params.loopFillGroupWithBlank) {
    var blankSlidesNum = params.slidesPerGroup - slides.length % params.slidesPerGroup;

    if (blankSlidesNum !== params.slidesPerGroup) {
      for (var i = 0; i < blankSlidesNum; i += 1) {
        var blankNode = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_1__["default"])(document.createElement('div')).addClass(params.slideClass + " " + params.slideBlankClass);
        $wrapperEl.append(blankNode);
      }

      slides = $wrapperEl.children("." + params.slideClass);
    }
  }

  if (params.slidesPerView === 'auto' && !params.loopedSlides) params.loopedSlides = slides.length;
  swiper.loopedSlides = Math.ceil(parseFloat(params.loopedSlides || params.slidesPerView, 10));
  swiper.loopedSlides += params.loopAdditionalSlides;

  if (swiper.loopedSlides > slides.length) {
    swiper.loopedSlides = slides.length;
  }

  var prependSlides = [];
  var appendSlides = [];
  slides.each(function (el, index) {
    var slide = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_1__["default"])(el);

    if (index < swiper.loopedSlides) {
      appendSlides.push(el);
    }

    if (index < slides.length && index >= slides.length - swiper.loopedSlides) {
      prependSlides.push(el);
    }

    slide.attr('data-swiper-slide-index', index);
  });

  for (var _i = 0; _i < appendSlides.length; _i += 1) {
    $wrapperEl.append(Object(_utils_dom__WEBPACK_IMPORTED_MODULE_1__["default"])(appendSlides[_i].cloneNode(true)).addClass(params.slideDuplicateClass));
  }

  for (var _i2 = prependSlides.length - 1; _i2 >= 0; _i2 -= 1) {
    $wrapperEl.prepend(Object(_utils_dom__WEBPACK_IMPORTED_MODULE_1__["default"])(prependSlides[_i2].cloneNode(true)).addClass(params.slideDuplicateClass));
  }
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/loop/loopDestroy.js":
/*!*********************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/loop/loopDestroy.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return loopDestroy; });
function loopDestroy() {
  var swiper = this;
  var $wrapperEl = swiper.$wrapperEl,
      params = swiper.params,
      slides = swiper.slides;
  $wrapperEl.children("." + params.slideClass + "." + params.slideDuplicateClass + ",." + params.slideClass + "." + params.slideBlankClass).remove();
  slides.removeAttr('data-swiper-slide-index');
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/loop/loopFix.js":
/*!*****************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/loop/loopFix.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return loopFix; });
function loopFix() {
  var swiper = this;
  swiper.emit('beforeLoopFix');
  var activeIndex = swiper.activeIndex,
      slides = swiper.slides,
      loopedSlides = swiper.loopedSlides,
      allowSlidePrev = swiper.allowSlidePrev,
      allowSlideNext = swiper.allowSlideNext,
      snapGrid = swiper.snapGrid,
      rtl = swiper.rtlTranslate;
  var newIndex;
  swiper.allowSlidePrev = true;
  swiper.allowSlideNext = true;
  var snapTranslate = -snapGrid[activeIndex];
  var diff = snapTranslate - swiper.getTranslate(); // Fix For Negative Oversliding

  if (activeIndex < loopedSlides) {
    newIndex = slides.length - loopedSlides * 3 + activeIndex;
    newIndex += loopedSlides;
    var slideChanged = swiper.slideTo(newIndex, 0, false, true);

    if (slideChanged && diff !== 0) {
      swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);
    }
  } else if (activeIndex >= slides.length - loopedSlides) {
    // Fix For Positive Oversliding
    newIndex = -slides.length + activeIndex + loopedSlides;
    newIndex += loopedSlides;

    var _slideChanged = swiper.slideTo(newIndex, 0, false, true);

    if (_slideChanged && diff !== 0) {
      swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);
    }
  }

  swiper.allowSlidePrev = allowSlidePrev;
  swiper.allowSlideNext = allowSlideNext;
  swiper.emit('loopFix');
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/manipulation/addSlide.js":
/*!**************************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/manipulation/addSlide.js ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return addSlide; });
function addSlide(index, slides) {
  var swiper = this;
  var $wrapperEl = swiper.$wrapperEl,
      params = swiper.params,
      activeIndex = swiper.activeIndex;
  var activeIndexBuffer = activeIndex;

  if (params.loop) {
    activeIndexBuffer -= swiper.loopedSlides;
    swiper.loopDestroy();
    swiper.slides = $wrapperEl.children("." + params.slideClass);
  }

  var baseLength = swiper.slides.length;

  if (index <= 0) {
    swiper.prependSlide(slides);
    return;
  }

  if (index >= baseLength) {
    swiper.appendSlide(slides);
    return;
  }

  var newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + 1 : activeIndexBuffer;
  var slidesBuffer = [];

  for (var i = baseLength - 1; i >= index; i -= 1) {
    var currentSlide = swiper.slides.eq(i);
    currentSlide.remove();
    slidesBuffer.unshift(currentSlide);
  }

  if (typeof slides === 'object' && 'length' in slides) {
    for (var _i = 0; _i < slides.length; _i += 1) {
      if (slides[_i]) $wrapperEl.append(slides[_i]);
    }

    newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + slides.length : activeIndexBuffer;
  } else {
    $wrapperEl.append(slides);
  }

  for (var _i2 = 0; _i2 < slidesBuffer.length; _i2 += 1) {
    $wrapperEl.append(slidesBuffer[_i2]);
  }

  if (params.loop) {
    swiper.loopCreate();
  }

  if (!(params.observer && swiper.support.observer)) {
    swiper.update();
  }

  if (params.loop) {
    swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);
  } else {
    swiper.slideTo(newActiveIndex, 0, false);
  }
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/manipulation/appendSlide.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/manipulation/appendSlide.js ***!
  \*****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return appendSlide; });
function appendSlide(slides) {
  var swiper = this;
  var $wrapperEl = swiper.$wrapperEl,
      params = swiper.params;

  if (params.loop) {
    swiper.loopDestroy();
  }

  if (typeof slides === 'object' && 'length' in slides) {
    for (var i = 0; i < slides.length; i += 1) {
      if (slides[i]) $wrapperEl.append(slides[i]);
    }
  } else {
    $wrapperEl.append(slides);
  }

  if (params.loop) {
    swiper.loopCreate();
  }

  if (!(params.observer && swiper.support.observer)) {
    swiper.update();
  }
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/manipulation/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/manipulation/index.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _appendSlide__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./appendSlide */ "./node_modules/swiper/esm/components/core/manipulation/appendSlide.js");
/* harmony import */ var _prependSlide__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./prependSlide */ "./node_modules/swiper/esm/components/core/manipulation/prependSlide.js");
/* harmony import */ var _addSlide__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./addSlide */ "./node_modules/swiper/esm/components/core/manipulation/addSlide.js");
/* harmony import */ var _removeSlide__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./removeSlide */ "./node_modules/swiper/esm/components/core/manipulation/removeSlide.js");
/* harmony import */ var _removeAllSlides__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./removeAllSlides */ "./node_modules/swiper/esm/components/core/manipulation/removeAllSlides.js");





/* harmony default export */ __webpack_exports__["default"] = ({
  appendSlide: _appendSlide__WEBPACK_IMPORTED_MODULE_0__["default"],
  prependSlide: _prependSlide__WEBPACK_IMPORTED_MODULE_1__["default"],
  addSlide: _addSlide__WEBPACK_IMPORTED_MODULE_2__["default"],
  removeSlide: _removeSlide__WEBPACK_IMPORTED_MODULE_3__["default"],
  removeAllSlides: _removeAllSlides__WEBPACK_IMPORTED_MODULE_4__["default"]
});

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/manipulation/prependSlide.js":
/*!******************************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/manipulation/prependSlide.js ***!
  \******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return prependSlide; });
function prependSlide(slides) {
  var swiper = this;
  var params = swiper.params,
      $wrapperEl = swiper.$wrapperEl,
      activeIndex = swiper.activeIndex;

  if (params.loop) {
    swiper.loopDestroy();
  }

  var newActiveIndex = activeIndex + 1;

  if (typeof slides === 'object' && 'length' in slides) {
    for (var i = 0; i < slides.length; i += 1) {
      if (slides[i]) $wrapperEl.prepend(slides[i]);
    }

    newActiveIndex = activeIndex + slides.length;
  } else {
    $wrapperEl.prepend(slides);
  }

  if (params.loop) {
    swiper.loopCreate();
  }

  if (!(params.observer && swiper.support.observer)) {
    swiper.update();
  }

  swiper.slideTo(newActiveIndex, 0, false);
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/manipulation/removeAllSlides.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/manipulation/removeAllSlides.js ***!
  \*********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return removeAllSlides; });
function removeAllSlides() {
  var swiper = this;
  var slidesIndexes = [];

  for (var i = 0; i < swiper.slides.length; i += 1) {
    slidesIndexes.push(i);
  }

  swiper.removeSlide(slidesIndexes);
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/manipulation/removeSlide.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/manipulation/removeSlide.js ***!
  \*****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return removeSlide; });
function removeSlide(slidesIndexes) {
  var swiper = this;
  var params = swiper.params,
      $wrapperEl = swiper.$wrapperEl,
      activeIndex = swiper.activeIndex;
  var activeIndexBuffer = activeIndex;

  if (params.loop) {
    activeIndexBuffer -= swiper.loopedSlides;
    swiper.loopDestroy();
    swiper.slides = $wrapperEl.children("." + params.slideClass);
  }

  var newActiveIndex = activeIndexBuffer;
  var indexToRemove;

  if (typeof slidesIndexes === 'object' && 'length' in slidesIndexes) {
    for (var i = 0; i < slidesIndexes.length; i += 1) {
      indexToRemove = slidesIndexes[i];
      if (swiper.slides[indexToRemove]) swiper.slides.eq(indexToRemove).remove();
      if (indexToRemove < newActiveIndex) newActiveIndex -= 1;
    }

    newActiveIndex = Math.max(newActiveIndex, 0);
  } else {
    indexToRemove = slidesIndexes;
    if (swiper.slides[indexToRemove]) swiper.slides.eq(indexToRemove).remove();
    if (indexToRemove < newActiveIndex) newActiveIndex -= 1;
    newActiveIndex = Math.max(newActiveIndex, 0);
  }

  if (params.loop) {
    swiper.loopCreate();
  }

  if (!(params.observer && swiper.support.observer)) {
    swiper.update();
  }

  if (params.loop) {
    swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);
  } else {
    swiper.slideTo(newActiveIndex, 0, false);
  }
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/modular.js":
/*!************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/modular.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/utils */ "./node_modules/swiper/esm/utils/utils.js");

/* harmony default export */ __webpack_exports__["default"] = ({
  useParams: function useParams(instanceParams) {
    var instance = this;
    if (!instance.modules) return;
    Object.keys(instance.modules).forEach(function (moduleName) {
      var module = instance.modules[moduleName]; // Extend params

      if (module.params) {
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["extend"])(instanceParams, module.params);
      }
    });
  },
  useModules: function useModules(modulesParams) {
    if (modulesParams === void 0) {
      modulesParams = {};
    }

    var instance = this;
    if (!instance.modules) return;
    Object.keys(instance.modules).forEach(function (moduleName) {
      var module = instance.modules[moduleName];
      var moduleParams = modulesParams[moduleName] || {}; // Add event listeners

      if (module.on && instance.on) {
        Object.keys(module.on).forEach(function (moduleEventName) {
          instance.on(moduleEventName, module.on[moduleEventName]);
        });
      } // Module create callback


      if (module.create) {
        module.create.bind(instance)(moduleParams);
      }
    });
  }
});

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/slide/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/slide/index.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _slideTo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./slideTo */ "./node_modules/swiper/esm/components/core/slide/slideTo.js");
/* harmony import */ var _slideToLoop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./slideToLoop */ "./node_modules/swiper/esm/components/core/slide/slideToLoop.js");
/* harmony import */ var _slideNext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./slideNext */ "./node_modules/swiper/esm/components/core/slide/slideNext.js");
/* harmony import */ var _slidePrev__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./slidePrev */ "./node_modules/swiper/esm/components/core/slide/slidePrev.js");
/* harmony import */ var _slideReset__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./slideReset */ "./node_modules/swiper/esm/components/core/slide/slideReset.js");
/* harmony import */ var _slideToClosest__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./slideToClosest */ "./node_modules/swiper/esm/components/core/slide/slideToClosest.js");
/* harmony import */ var _slideToClickedSlide__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./slideToClickedSlide */ "./node_modules/swiper/esm/components/core/slide/slideToClickedSlide.js");







/* harmony default export */ __webpack_exports__["default"] = ({
  slideTo: _slideTo__WEBPACK_IMPORTED_MODULE_0__["default"],
  slideToLoop: _slideToLoop__WEBPACK_IMPORTED_MODULE_1__["default"],
  slideNext: _slideNext__WEBPACK_IMPORTED_MODULE_2__["default"],
  slidePrev: _slidePrev__WEBPACK_IMPORTED_MODULE_3__["default"],
  slideReset: _slideReset__WEBPACK_IMPORTED_MODULE_4__["default"],
  slideToClosest: _slideToClosest__WEBPACK_IMPORTED_MODULE_5__["default"],
  slideToClickedSlide: _slideToClickedSlide__WEBPACK_IMPORTED_MODULE_6__["default"]
});

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/slide/slideNext.js":
/*!********************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/slide/slideNext.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return slideNext; });
/* eslint no-unused-vars: "off" */
function slideNext(speed, runCallbacks, internal) {
  if (speed === void 0) {
    speed = this.params.speed;
  }

  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  var swiper = this;
  var params = swiper.params,
      animating = swiper.animating;
  var increment = swiper.activeIndex < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup;

  if (params.loop) {
    if (animating && params.loopPreventsSlide) return false;
    swiper.loopFix(); // eslint-disable-next-line

    swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
  }

  return swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/slide/slidePrev.js":
/*!********************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/slide/slidePrev.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return slidePrev; });
/* eslint no-unused-vars: "off" */
function slidePrev(speed, runCallbacks, internal) {
  if (speed === void 0) {
    speed = this.params.speed;
  }

  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  var swiper = this;
  var params = swiper.params,
      animating = swiper.animating,
      snapGrid = swiper.snapGrid,
      slidesGrid = swiper.slidesGrid,
      rtlTranslate = swiper.rtlTranslate;

  if (params.loop) {
    if (animating && params.loopPreventsSlide) return false;
    swiper.loopFix(); // eslint-disable-next-line

    swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
  }

  var translate = rtlTranslate ? swiper.translate : -swiper.translate;

  function normalize(val) {
    if (val < 0) return -Math.floor(Math.abs(val));
    return Math.floor(val);
  }

  var normalizedTranslate = normalize(translate);
  var normalizedSnapGrid = snapGrid.map(function (val) {
    return normalize(val);
  });
  var currentSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate)];
  var prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];

  if (typeof prevSnap === 'undefined' && params.cssMode) {
    snapGrid.forEach(function (snap) {
      if (!prevSnap && normalizedTranslate >= snap) prevSnap = snap;
    });
  }

  var prevIndex;

  if (typeof prevSnap !== 'undefined') {
    prevIndex = slidesGrid.indexOf(prevSnap);
    if (prevIndex < 0) prevIndex = swiper.activeIndex - 1;
  }

  return swiper.slideTo(prevIndex, speed, runCallbacks, internal);
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/slide/slideReset.js":
/*!*********************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/slide/slideReset.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return slideReset; });
/* eslint no-unused-vars: "off" */
function slideReset(speed, runCallbacks, internal) {
  if (speed === void 0) {
    speed = this.params.speed;
  }

  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  var swiper = this;
  return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/slide/slideTo.js":
/*!******************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/slide/slideTo.js ***!
  \******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return slideTo; });
function slideTo(index, speed, runCallbacks, internal) {
  if (index === void 0) {
    index = 0;
  }

  if (speed === void 0) {
    speed = this.params.speed;
  }

  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  var swiper = this;
  var slideIndex = index;
  if (slideIndex < 0) slideIndex = 0;
  var params = swiper.params,
      snapGrid = swiper.snapGrid,
      slidesGrid = swiper.slidesGrid,
      previousIndex = swiper.previousIndex,
      activeIndex = swiper.activeIndex,
      rtl = swiper.rtlTranslate,
      wrapperEl = swiper.wrapperEl;

  if (swiper.animating && params.preventInteractionOnTransition) {
    return false;
  }

  var skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);
  var snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);
  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;

  if ((activeIndex || params.initialSlide || 0) === (previousIndex || 0) && runCallbacks) {
    swiper.emit('beforeSlideChangeStart');
  }

  var translate = -snapGrid[snapIndex]; // Update progress

  swiper.updateProgress(translate); // Normalize slideIndex

  if (params.normalizeSlideIndex) {
    for (var i = 0; i < slidesGrid.length; i += 1) {
      if (-Math.floor(translate * 100) >= Math.floor(slidesGrid[i] * 100)) {
        slideIndex = i;
      }
    }
  } // Directions locks


  if (swiper.initialized && slideIndex !== activeIndex) {
    if (!swiper.allowSlideNext && translate < swiper.translate && translate < swiper.minTranslate()) {
      return false;
    }

    if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {
      if ((activeIndex || 0) !== slideIndex) return false;
    }
  }

  var direction;
  if (slideIndex > activeIndex) direction = 'next';else if (slideIndex < activeIndex) direction = 'prev';else direction = 'reset'; // Update Index

  if (rtl && -translate === swiper.translate || !rtl && translate === swiper.translate) {
    swiper.updateActiveIndex(slideIndex); // Update Height

    if (params.autoHeight) {
      swiper.updateAutoHeight();
    }

    swiper.updateSlidesClasses();

    if (params.effect !== 'slide') {
      swiper.setTranslate(translate);
    }

    if (direction !== 'reset') {
      swiper.transitionStart(runCallbacks, direction);
      swiper.transitionEnd(runCallbacks, direction);
    }

    return false;
  }

  if (params.cssMode) {
    var isH = swiper.isHorizontal();
    var t = -translate;

    if (rtl) {
      t = wrapperEl.scrollWidth - wrapperEl.offsetWidth - t;
    }

    if (speed === 0) {
      wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;
    } else {
      // eslint-disable-next-line
      if (wrapperEl.scrollTo) {
        var _wrapperEl$scrollTo;

        wrapperEl.scrollTo((_wrapperEl$scrollTo = {}, _wrapperEl$scrollTo[isH ? 'left' : 'top'] = t, _wrapperEl$scrollTo.behavior = 'smooth', _wrapperEl$scrollTo));
      } else {
        wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;
      }
    }

    return true;
  }

  if (speed === 0) {
    swiper.setTransition(0);
    swiper.setTranslate(translate);
    swiper.updateActiveIndex(slideIndex);
    swiper.updateSlidesClasses();
    swiper.emit('beforeTransitionStart', speed, internal);
    swiper.transitionStart(runCallbacks, direction);
    swiper.transitionEnd(runCallbacks, direction);
  } else {
    swiper.setTransition(speed);
    swiper.setTranslate(translate);
    swiper.updateActiveIndex(slideIndex);
    swiper.updateSlidesClasses();
    swiper.emit('beforeTransitionStart', speed, internal);
    swiper.transitionStart(runCallbacks, direction);

    if (!swiper.animating) {
      swiper.animating = true;

      if (!swiper.onSlideToWrapperTransitionEnd) {
        swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {
          if (!swiper || swiper.destroyed) return;
          if (e.target !== this) return;
          swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);
          swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);
          swiper.onSlideToWrapperTransitionEnd = null;
          delete swiper.onSlideToWrapperTransitionEnd;
          swiper.transitionEnd(runCallbacks, direction);
        };
      }

      swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);
      swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);
    }
  }

  return true;
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/slide/slideToClickedSlide.js":
/*!******************************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/slide/slideToClickedSlide.js ***!
  \******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return slideToClickedSlide; });
/* harmony import */ var _utils_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/dom */ "./node_modules/swiper/esm/utils/dom.js");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/utils */ "./node_modules/swiper/esm/utils/utils.js");


function slideToClickedSlide() {
  var swiper = this;
  var params = swiper.params,
      $wrapperEl = swiper.$wrapperEl;
  var slidesPerView = params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : params.slidesPerView;
  var slideToIndex = swiper.clickedIndex;
  var realIndex;

  if (params.loop) {
    if (swiper.animating) return;
    realIndex = parseInt(Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])(swiper.clickedSlide).attr('data-swiper-slide-index'), 10);

    if (params.centeredSlides) {
      if (slideToIndex < swiper.loopedSlides - slidesPerView / 2 || slideToIndex > swiper.slides.length - swiper.loopedSlides + slidesPerView / 2) {
        swiper.loopFix();
        slideToIndex = $wrapperEl.children("." + params.slideClass + "[data-swiper-slide-index=\"" + realIndex + "\"]:not(." + params.slideDuplicateClass + ")").eq(0).index();
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["nextTick"])(function () {
          swiper.slideTo(slideToIndex);
        });
      } else {
        swiper.slideTo(slideToIndex);
      }
    } else if (slideToIndex > swiper.slides.length - slidesPerView) {
      swiper.loopFix();
      slideToIndex = $wrapperEl.children("." + params.slideClass + "[data-swiper-slide-index=\"" + realIndex + "\"]:not(." + params.slideDuplicateClass + ")").eq(0).index();
      Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["nextTick"])(function () {
        swiper.slideTo(slideToIndex);
      });
    } else {
      swiper.slideTo(slideToIndex);
    }
  } else {
    swiper.slideTo(slideToIndex);
  }
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/slide/slideToClosest.js":
/*!*************************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/slide/slideToClosest.js ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return slideToClosest; });
/* eslint no-unused-vars: "off" */
function slideToClosest(speed, runCallbacks, internal, threshold) {
  if (speed === void 0) {
    speed = this.params.speed;
  }

  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  if (threshold === void 0) {
    threshold = 0.5;
  }

  var swiper = this;
  var index = swiper.activeIndex;
  var skip = Math.min(swiper.params.slidesPerGroupSkip, index);
  var snapIndex = skip + Math.floor((index - skip) / swiper.params.slidesPerGroup);
  var translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;

  if (translate >= swiper.snapGrid[snapIndex]) {
    // The current translate is on or after the current snap index, so the choice
    // is between the current index and the one after it.
    var currentSnap = swiper.snapGrid[snapIndex];
    var nextSnap = swiper.snapGrid[snapIndex + 1];

    if (translate - currentSnap > (nextSnap - currentSnap) * threshold) {
      index += swiper.params.slidesPerGroup;
    }
  } else {
    // The current translate is before the current snap index, so the choice
    // is between the current index and the one before it.
    var prevSnap = swiper.snapGrid[snapIndex - 1];
    var _currentSnap = swiper.snapGrid[snapIndex];

    if (translate - prevSnap <= (_currentSnap - prevSnap) * threshold) {
      index -= swiper.params.slidesPerGroup;
    }
  }

  index = Math.max(index, 0);
  index = Math.min(index, swiper.slidesGrid.length - 1);
  return swiper.slideTo(index, speed, runCallbacks, internal);
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/slide/slideToLoop.js":
/*!**********************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/slide/slideToLoop.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return slideToLoop; });
function slideToLoop(index, speed, runCallbacks, internal) {
  if (index === void 0) {
    index = 0;
  }

  if (speed === void 0) {
    speed = this.params.speed;
  }

  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  var swiper = this;
  var newIndex = index;

  if (swiper.params.loop) {
    newIndex += swiper.loopedSlides;
  }

  return swiper.slideTo(newIndex, speed, runCallbacks, internal);
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/transition/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/transition/index.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _setTransition__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setTransition */ "./node_modules/swiper/esm/components/core/transition/setTransition.js");
/* harmony import */ var _transitionStart__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transitionStart */ "./node_modules/swiper/esm/components/core/transition/transitionStart.js");
/* harmony import */ var _transitionEnd__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transitionEnd */ "./node_modules/swiper/esm/components/core/transition/transitionEnd.js");



/* harmony default export */ __webpack_exports__["default"] = ({
  setTransition: _setTransition__WEBPACK_IMPORTED_MODULE_0__["default"],
  transitionStart: _transitionStart__WEBPACK_IMPORTED_MODULE_1__["default"],
  transitionEnd: _transitionEnd__WEBPACK_IMPORTED_MODULE_2__["default"]
});

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/transition/setTransition.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/transition/setTransition.js ***!
  \*****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return setTransition; });
function setTransition(duration, byController) {
  var swiper = this;

  if (!swiper.params.cssMode) {
    swiper.$wrapperEl.transition(duration);
  }

  swiper.emit('setTransition', duration, byController);
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/transition/transitionEnd.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/transition/transitionEnd.js ***!
  \*****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return transitionEnd; });
function transitionEnd(runCallbacks, direction) {
  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  var swiper = this;
  var activeIndex = swiper.activeIndex,
      previousIndex = swiper.previousIndex,
      params = swiper.params;
  swiper.animating = false;
  if (params.cssMode) return;
  swiper.setTransition(0);
  var dir = direction;

  if (!dir) {
    if (activeIndex > previousIndex) dir = 'next';else if (activeIndex < previousIndex) dir = 'prev';else dir = 'reset';
  }

  swiper.emit('transitionEnd');

  if (runCallbacks && activeIndex !== previousIndex) {
    if (dir === 'reset') {
      swiper.emit('slideResetTransitionEnd');
      return;
    }

    swiper.emit('slideChangeTransitionEnd');

    if (dir === 'next') {
      swiper.emit('slideNextTransitionEnd');
    } else {
      swiper.emit('slidePrevTransitionEnd');
    }
  }
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/transition/transitionStart.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/transition/transitionStart.js ***!
  \*******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return transitionStart; });
function transitionStart(runCallbacks, direction) {
  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  var swiper = this;
  var activeIndex = swiper.activeIndex,
      params = swiper.params,
      previousIndex = swiper.previousIndex;
  if (params.cssMode) return;

  if (params.autoHeight) {
    swiper.updateAutoHeight();
  }

  var dir = direction;

  if (!dir) {
    if (activeIndex > previousIndex) dir = 'next';else if (activeIndex < previousIndex) dir = 'prev';else dir = 'reset';
  }

  swiper.emit('transitionStart');

  if (runCallbacks && activeIndex !== previousIndex) {
    if (dir === 'reset') {
      swiper.emit('slideResetTransitionStart');
      return;
    }

    swiper.emit('slideChangeTransitionStart');

    if (dir === 'next') {
      swiper.emit('slideNextTransitionStart');
    } else {
      swiper.emit('slidePrevTransitionStart');
    }
  }
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/translate/getTranslate.js":
/*!***************************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/translate/getTranslate.js ***!
  \***************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getSwiperTranslate; });
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/utils */ "./node_modules/swiper/esm/utils/utils.js");

function getSwiperTranslate(axis) {
  if (axis === void 0) {
    axis = this.isHorizontal() ? 'x' : 'y';
  }

  var swiper = this;
  var params = swiper.params,
      rtl = swiper.rtlTranslate,
      translate = swiper.translate,
      $wrapperEl = swiper.$wrapperEl;

  if (params.virtualTranslate) {
    return rtl ? -translate : translate;
  }

  if (params.cssMode) {
    return translate;
  }

  var currentTranslate = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["getTranslate"])($wrapperEl[0], axis);
  if (rtl) currentTranslate = -currentTranslate;
  return currentTranslate || 0;
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/translate/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/translate/index.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _getTranslate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getTranslate */ "./node_modules/swiper/esm/components/core/translate/getTranslate.js");
/* harmony import */ var _setTranslate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./setTranslate */ "./node_modules/swiper/esm/components/core/translate/setTranslate.js");
/* harmony import */ var _minTranslate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./minTranslate */ "./node_modules/swiper/esm/components/core/translate/minTranslate.js");
/* harmony import */ var _maxTranslate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./maxTranslate */ "./node_modules/swiper/esm/components/core/translate/maxTranslate.js");
/* harmony import */ var _translateTo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./translateTo */ "./node_modules/swiper/esm/components/core/translate/translateTo.js");





/* harmony default export */ __webpack_exports__["default"] = ({
  getTranslate: _getTranslate__WEBPACK_IMPORTED_MODULE_0__["default"],
  setTranslate: _setTranslate__WEBPACK_IMPORTED_MODULE_1__["default"],
  minTranslate: _minTranslate__WEBPACK_IMPORTED_MODULE_2__["default"],
  maxTranslate: _maxTranslate__WEBPACK_IMPORTED_MODULE_3__["default"],
  translateTo: _translateTo__WEBPACK_IMPORTED_MODULE_4__["default"]
});

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/translate/maxTranslate.js":
/*!***************************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/translate/maxTranslate.js ***!
  \***************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return maxTranslate; });
function maxTranslate() {
  return -this.snapGrid[this.snapGrid.length - 1];
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/translate/minTranslate.js":
/*!***************************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/translate/minTranslate.js ***!
  \***************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return minTranslate; });
function minTranslate() {
  return -this.snapGrid[0];
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/translate/setTranslate.js":
/*!***************************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/translate/setTranslate.js ***!
  \***************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return setTranslate; });
function setTranslate(translate, byController) {
  var swiper = this;
  var rtl = swiper.rtlTranslate,
      params = swiper.params,
      $wrapperEl = swiper.$wrapperEl,
      wrapperEl = swiper.wrapperEl,
      progress = swiper.progress;
  var x = 0;
  var y = 0;
  var z = 0;

  if (swiper.isHorizontal()) {
    x = rtl ? -translate : translate;
  } else {
    y = translate;
  }

  if (params.roundLengths) {
    x = Math.floor(x);
    y = Math.floor(y);
  }

  if (params.cssMode) {
    wrapperEl[swiper.isHorizontal() ? 'scrollLeft' : 'scrollTop'] = swiper.isHorizontal() ? -x : -y;
  } else if (!params.virtualTranslate) {
    $wrapperEl.transform("translate3d(" + x + "px, " + y + "px, " + z + "px)");
  }

  swiper.previousTranslate = swiper.translate;
  swiper.translate = swiper.isHorizontal() ? x : y; // Check if we need to update progress

  var newProgress;
  var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();

  if (translatesDiff === 0) {
    newProgress = 0;
  } else {
    newProgress = (translate - swiper.minTranslate()) / translatesDiff;
  }

  if (newProgress !== progress) {
    swiper.updateProgress(translate);
  }

  swiper.emit('setTranslate', swiper.translate, byController);
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/translate/translateTo.js":
/*!**************************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/translate/translateTo.js ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return translateTo; });
function translateTo(translate, speed, runCallbacks, translateBounds, internal) {
  if (translate === void 0) {
    translate = 0;
  }

  if (speed === void 0) {
    speed = this.params.speed;
  }

  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  if (translateBounds === void 0) {
    translateBounds = true;
  }

  var swiper = this;
  var params = swiper.params,
      wrapperEl = swiper.wrapperEl;

  if (swiper.animating && params.preventInteractionOnTransition) {
    return false;
  }

  var minTranslate = swiper.minTranslate();
  var maxTranslate = swiper.maxTranslate();
  var newTranslate;
  if (translateBounds && translate > minTranslate) newTranslate = minTranslate;else if (translateBounds && translate < maxTranslate) newTranslate = maxTranslate;else newTranslate = translate; // Update progress

  swiper.updateProgress(newTranslate);

  if (params.cssMode) {
    var isH = swiper.isHorizontal();

    if (speed === 0) {
      wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;
    } else {
      // eslint-disable-next-line
      if (wrapperEl.scrollTo) {
        var _wrapperEl$scrollTo;

        wrapperEl.scrollTo((_wrapperEl$scrollTo = {}, _wrapperEl$scrollTo[isH ? 'left' : 'top'] = -newTranslate, _wrapperEl$scrollTo.behavior = 'smooth', _wrapperEl$scrollTo));
      } else {
        wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;
      }
    }

    return true;
  }

  if (speed === 0) {
    swiper.setTransition(0);
    swiper.setTranslate(newTranslate);

    if (runCallbacks) {
      swiper.emit('beforeTransitionStart', speed, internal);
      swiper.emit('transitionEnd');
    }
  } else {
    swiper.setTransition(speed);
    swiper.setTranslate(newTranslate);

    if (runCallbacks) {
      swiper.emit('beforeTransitionStart', speed, internal);
      swiper.emit('transitionStart');
    }

    if (!swiper.animating) {
      swiper.animating = true;

      if (!swiper.onTranslateToWrapperTransitionEnd) {
        swiper.onTranslateToWrapperTransitionEnd = function transitionEnd(e) {
          if (!swiper || swiper.destroyed) return;
          if (e.target !== this) return;
          swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);
          swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onTranslateToWrapperTransitionEnd);
          swiper.onTranslateToWrapperTransitionEnd = null;
          delete swiper.onTranslateToWrapperTransitionEnd;

          if (runCallbacks) {
            swiper.emit('transitionEnd');
          }
        };
      }

      swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);
      swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onTranslateToWrapperTransitionEnd);
    }
  }

  return true;
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/update/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/update/index.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _updateSize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./updateSize */ "./node_modules/swiper/esm/components/core/update/updateSize.js");
/* harmony import */ var _updateSlides__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./updateSlides */ "./node_modules/swiper/esm/components/core/update/updateSlides.js");
/* harmony import */ var _updateAutoHeight__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./updateAutoHeight */ "./node_modules/swiper/esm/components/core/update/updateAutoHeight.js");
/* harmony import */ var _updateSlidesOffset__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./updateSlidesOffset */ "./node_modules/swiper/esm/components/core/update/updateSlidesOffset.js");
/* harmony import */ var _updateSlidesProgress__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./updateSlidesProgress */ "./node_modules/swiper/esm/components/core/update/updateSlidesProgress.js");
/* harmony import */ var _updateProgress__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./updateProgress */ "./node_modules/swiper/esm/components/core/update/updateProgress.js");
/* harmony import */ var _updateSlidesClasses__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./updateSlidesClasses */ "./node_modules/swiper/esm/components/core/update/updateSlidesClasses.js");
/* harmony import */ var _updateActiveIndex__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./updateActiveIndex */ "./node_modules/swiper/esm/components/core/update/updateActiveIndex.js");
/* harmony import */ var _updateClickedSlide__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./updateClickedSlide */ "./node_modules/swiper/esm/components/core/update/updateClickedSlide.js");









/* harmony default export */ __webpack_exports__["default"] = ({
  updateSize: _updateSize__WEBPACK_IMPORTED_MODULE_0__["default"],
  updateSlides: _updateSlides__WEBPACK_IMPORTED_MODULE_1__["default"],
  updateAutoHeight: _updateAutoHeight__WEBPACK_IMPORTED_MODULE_2__["default"],
  updateSlidesOffset: _updateSlidesOffset__WEBPACK_IMPORTED_MODULE_3__["default"],
  updateSlidesProgress: _updateSlidesProgress__WEBPACK_IMPORTED_MODULE_4__["default"],
  updateProgress: _updateProgress__WEBPACK_IMPORTED_MODULE_5__["default"],
  updateSlidesClasses: _updateSlidesClasses__WEBPACK_IMPORTED_MODULE_6__["default"],
  updateActiveIndex: _updateActiveIndex__WEBPACK_IMPORTED_MODULE_7__["default"],
  updateClickedSlide: _updateClickedSlide__WEBPACK_IMPORTED_MODULE_8__["default"]
});

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/update/updateActiveIndex.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/update/updateActiveIndex.js ***!
  \*****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return updateActiveIndex; });
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/utils */ "./node_modules/swiper/esm/utils/utils.js");

function updateActiveIndex(newActiveIndex) {
  var swiper = this;
  var translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;
  var slidesGrid = swiper.slidesGrid,
      snapGrid = swiper.snapGrid,
      params = swiper.params,
      previousIndex = swiper.activeIndex,
      previousRealIndex = swiper.realIndex,
      previousSnapIndex = swiper.snapIndex;
  var activeIndex = newActiveIndex;
  var snapIndex;

  if (typeof activeIndex === 'undefined') {
    for (var i = 0; i < slidesGrid.length; i += 1) {
      if (typeof slidesGrid[i + 1] !== 'undefined') {
        if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - (slidesGrid[i + 1] - slidesGrid[i]) / 2) {
          activeIndex = i;
        } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {
          activeIndex = i + 1;
        }
      } else if (translate >= slidesGrid[i]) {
        activeIndex = i;
      }
    } // Normalize slideIndex


    if (params.normalizeSlideIndex) {
      if (activeIndex < 0 || typeof activeIndex === 'undefined') activeIndex = 0;
    }
  }

  if (snapGrid.indexOf(translate) >= 0) {
    snapIndex = snapGrid.indexOf(translate);
  } else {
    var skip = Math.min(params.slidesPerGroupSkip, activeIndex);
    snapIndex = skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);
  }

  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;

  if (activeIndex === previousIndex) {
    if (snapIndex !== previousSnapIndex) {
      swiper.snapIndex = snapIndex;
      swiper.emit('snapIndexChange');
    }

    return;
  } // Get real index


  var realIndex = parseInt(swiper.slides.eq(activeIndex).attr('data-swiper-slide-index') || activeIndex, 10);
  Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["extend"])(swiper, {
    snapIndex: snapIndex,
    realIndex: realIndex,
    previousIndex: previousIndex,
    activeIndex: activeIndex
  });
  swiper.emit('activeIndexChange');
  swiper.emit('snapIndexChange');

  if (previousRealIndex !== realIndex) {
    swiper.emit('realIndexChange');
  }

  if (swiper.initialized || swiper.params.runCallbacksOnInit) {
    swiper.emit('slideChange');
  }
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/update/updateAutoHeight.js":
/*!****************************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/update/updateAutoHeight.js ***!
  \****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return updateAutoHeight; });
function updateAutoHeight(speed) {
  var swiper = this;
  var activeSlides = [];
  var newHeight = 0;
  var i;

  if (typeof speed === 'number') {
    swiper.setTransition(speed);
  } else if (speed === true) {
    swiper.setTransition(swiper.params.speed);
  } // Find slides currently in view


  if (swiper.params.slidesPerView !== 'auto' && swiper.params.slidesPerView > 1) {
    if (swiper.params.centeredSlides) {
      swiper.visibleSlides.each(function (slide) {
        activeSlides.push(slide);
      });
    } else {
      for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {
        var index = swiper.activeIndex + i;
        if (index > swiper.slides.length) break;
        activeSlides.push(swiper.slides.eq(index)[0]);
      }
    }
  } else {
    activeSlides.push(swiper.slides.eq(swiper.activeIndex)[0]);
  } // Find new height from highest slide in view


  for (i = 0; i < activeSlides.length; i += 1) {
    if (typeof activeSlides[i] !== 'undefined') {
      var height = activeSlides[i].offsetHeight;
      newHeight = height > newHeight ? height : newHeight;
    }
  } // Update Height


  if (newHeight) swiper.$wrapperEl.css('height', newHeight + "px");
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/update/updateClickedSlide.js":
/*!******************************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/update/updateClickedSlide.js ***!
  \******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return updateClickedSlide; });
/* harmony import */ var _utils_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/dom */ "./node_modules/swiper/esm/utils/dom.js");

function updateClickedSlide(e) {
  var swiper = this;
  var params = swiper.params;
  var slide = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])(e.target).closest("." + params.slideClass)[0];
  var slideFound = false;

  if (slide) {
    for (var i = 0; i < swiper.slides.length; i += 1) {
      if (swiper.slides[i] === slide) slideFound = true;
    }
  }

  if (slide && slideFound) {
    swiper.clickedSlide = slide;

    if (swiper.virtual && swiper.params.virtual.enabled) {
      swiper.clickedIndex = parseInt(Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])(slide).attr('data-swiper-slide-index'), 10);
    } else {
      swiper.clickedIndex = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])(slide).index();
    }
  } else {
    swiper.clickedSlide = undefined;
    swiper.clickedIndex = undefined;
    return;
  }

  if (params.slideToClickedSlide && swiper.clickedIndex !== undefined && swiper.clickedIndex !== swiper.activeIndex) {
    swiper.slideToClickedSlide();
  }
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/update/updateProgress.js":
/*!**************************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/update/updateProgress.js ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return updateProgress; });
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/utils */ "./node_modules/swiper/esm/utils/utils.js");

function updateProgress(translate) {
  var swiper = this;

  if (typeof translate === 'undefined') {
    var multiplier = swiper.rtlTranslate ? -1 : 1; // eslint-disable-next-line

    translate = swiper && swiper.translate && swiper.translate * multiplier || 0;
  }

  var params = swiper.params;
  var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
  var progress = swiper.progress,
      isBeginning = swiper.isBeginning,
      isEnd = swiper.isEnd;
  var wasBeginning = isBeginning;
  var wasEnd = isEnd;

  if (translatesDiff === 0) {
    progress = 0;
    isBeginning = true;
    isEnd = true;
  } else {
    progress = (translate - swiper.minTranslate()) / translatesDiff;
    isBeginning = progress <= 0;
    isEnd = progress >= 1;
  }

  Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["extend"])(swiper, {
    progress: progress,
    isBeginning: isBeginning,
    isEnd: isEnd
  });
  if (params.watchSlidesProgress || params.watchSlidesVisibility || params.centeredSlides && params.autoHeight) swiper.updateSlidesProgress(translate);

  if (isBeginning && !wasBeginning) {
    swiper.emit('reachBeginning toEdge');
  }

  if (isEnd && !wasEnd) {
    swiper.emit('reachEnd toEdge');
  }

  if (wasBeginning && !isBeginning || wasEnd && !isEnd) {
    swiper.emit('fromEdge');
  }

  swiper.emit('progress', progress);
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/update/updateSize.js":
/*!**********************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/update/updateSize.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return updateSize; });
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/utils */ "./node_modules/swiper/esm/utils/utils.js");

function updateSize() {
  var swiper = this;
  var width;
  var height;
  var $el = swiper.$el;

  if (typeof swiper.params.width !== 'undefined' && swiper.params.width !== null) {
    width = swiper.params.width;
  } else {
    width = $el[0].clientWidth;
  }

  if (typeof swiper.params.height !== 'undefined' && swiper.params.width !== null) {
    height = swiper.params.height;
  } else {
    height = $el[0].clientHeight;
  }

  if (width === 0 && swiper.isHorizontal() || height === 0 && swiper.isVertical()) {
    return;
  } // Subtract paddings


  width = width - parseInt($el.css('padding-left') || 0, 10) - parseInt($el.css('padding-right') || 0, 10);
  height = height - parseInt($el.css('padding-top') || 0, 10) - parseInt($el.css('padding-bottom') || 0, 10);
  if (Number.isNaN(width)) width = 0;
  if (Number.isNaN(height)) height = 0;
  Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["extend"])(swiper, {
    width: width,
    height: height,
    size: swiper.isHorizontal() ? width : height
  });
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/update/updateSlides.js":
/*!************************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/update/updateSlides.js ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return updateSlides; });
/* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/utils */ "./node_modules/swiper/esm/utils/utils.js");


function updateSlides() {
  var swiper = this;
  var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();
  var params = swiper.params;
  var $wrapperEl = swiper.$wrapperEl,
      swiperSize = swiper.size,
      rtl = swiper.rtlTranslate,
      wrongRTL = swiper.wrongRTL;
  var isVirtual = swiper.virtual && params.virtual.enabled;
  var previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;
  var slides = $wrapperEl.children("." + swiper.params.slideClass);
  var slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;
  var snapGrid = [];
  var slidesGrid = [];
  var slidesSizesGrid = [];

  function slidesForMargin(slideEl, slideIndex) {
    if (!params.cssMode) return true;

    if (slideIndex === slides.length - 1) {
      return false;
    }

    return true;
  }

  var offsetBefore = params.slidesOffsetBefore;

  if (typeof offsetBefore === 'function') {
    offsetBefore = params.slidesOffsetBefore.call(swiper);
  }

  var offsetAfter = params.slidesOffsetAfter;

  if (typeof offsetAfter === 'function') {
    offsetAfter = params.slidesOffsetAfter.call(swiper);
  }

  var previousSnapGridLength = swiper.snapGrid.length;
  var previousSlidesGridLength = swiper.snapGrid.length;
  var spaceBetween = params.spaceBetween;
  var slidePosition = -offsetBefore;
  var prevSlideSize = 0;
  var index = 0;

  if (typeof swiperSize === 'undefined') {
    return;
  }

  if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {
    spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiperSize;
  }

  swiper.virtualSize = -spaceBetween; // reset margins

  if (rtl) slides.css({
    marginLeft: '',
    marginTop: ''
  });else slides.css({
    marginRight: '',
    marginBottom: ''
  });
  var slidesNumberEvenToRows;

  if (params.slidesPerColumn > 1) {
    if (Math.floor(slidesLength / params.slidesPerColumn) === slidesLength / swiper.params.slidesPerColumn) {
      slidesNumberEvenToRows = slidesLength;
    } else {
      slidesNumberEvenToRows = Math.ceil(slidesLength / params.slidesPerColumn) * params.slidesPerColumn;
    }

    if (params.slidesPerView !== 'auto' && params.slidesPerColumnFill === 'row') {
      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, params.slidesPerView * params.slidesPerColumn);
    }
  } // Calc slides


  var slideSize;
  var slidesPerColumn = params.slidesPerColumn;
  var slidesPerRow = slidesNumberEvenToRows / slidesPerColumn;
  var numFullColumns = Math.floor(slidesLength / params.slidesPerColumn);

  for (var i = 0; i < slidesLength; i += 1) {
    slideSize = 0;
    var slide = slides.eq(i);

    if (params.slidesPerColumn > 1) {
      // Set slides order
      var newSlideOrderIndex = void 0;
      var column = void 0;
      var row = void 0;

      if (params.slidesPerColumnFill === 'row' && params.slidesPerGroup > 1) {
        var groupIndex = Math.floor(i / (params.slidesPerGroup * params.slidesPerColumn));
        var slideIndexInGroup = i - params.slidesPerColumn * params.slidesPerGroup * groupIndex;
        var columnsInGroup = groupIndex === 0 ? params.slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * slidesPerColumn * params.slidesPerGroup) / slidesPerColumn), params.slidesPerGroup);
        row = Math.floor(slideIndexInGroup / columnsInGroup);
        column = slideIndexInGroup - row * columnsInGroup + groupIndex * params.slidesPerGroup;
        newSlideOrderIndex = column + row * slidesNumberEvenToRows / slidesPerColumn;
        slide.css({
          '-webkit-box-ordinal-group': newSlideOrderIndex,
          '-moz-box-ordinal-group': newSlideOrderIndex,
          '-ms-flex-order': newSlideOrderIndex,
          '-webkit-order': newSlideOrderIndex,
          order: newSlideOrderIndex
        });
      } else if (params.slidesPerColumnFill === 'column') {
        column = Math.floor(i / slidesPerColumn);
        row = i - column * slidesPerColumn;

        if (column > numFullColumns || column === numFullColumns && row === slidesPerColumn - 1) {
          row += 1;

          if (row >= slidesPerColumn) {
            row = 0;
            column += 1;
          }
        }
      } else {
        row = Math.floor(i / slidesPerRow);
        column = i - row * slidesPerRow;
      }

      slide.css("margin-" + (swiper.isHorizontal() ? 'top' : 'left'), row !== 0 && params.spaceBetween && params.spaceBetween + "px");
    }

    if (slide.css('display') === 'none') continue; // eslint-disable-line

    if (params.slidesPerView === 'auto') {
      var slideStyles = window.getComputedStyle(slide[0], null);
      var currentTransform = slide[0].style.transform;
      var currentWebKitTransform = slide[0].style.webkitTransform;

      if (currentTransform) {
        slide[0].style.transform = 'none';
      }

      if (currentWebKitTransform) {
        slide[0].style.webkitTransform = 'none';
      }

      if (params.roundLengths) {
        slideSize = swiper.isHorizontal() ? slide.outerWidth(true) : slide.outerHeight(true);
      } else {
        // eslint-disable-next-line
        if (swiper.isHorizontal()) {
          var width = parseFloat(slideStyles.getPropertyValue('width') || 0);
          var paddingLeft = parseFloat(slideStyles.getPropertyValue('padding-left') || 0);
          var paddingRight = parseFloat(slideStyles.getPropertyValue('padding-right') || 0);
          var marginLeft = parseFloat(slideStyles.getPropertyValue('margin-left') || 0);
          var marginRight = parseFloat(slideStyles.getPropertyValue('margin-right') || 0);
          var boxSizing = slideStyles.getPropertyValue('box-sizing');

          if (boxSizing && boxSizing === 'border-box') {
            slideSize = width + marginLeft + marginRight;
          } else {
            slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight;
          }
        } else {
          var height = parseFloat(slideStyles.getPropertyValue('height') || 0);
          var paddingTop = parseFloat(slideStyles.getPropertyValue('padding-top') || 0);
          var paddingBottom = parseFloat(slideStyles.getPropertyValue('padding-bottom') || 0);
          var marginTop = parseFloat(slideStyles.getPropertyValue('margin-top') || 0);
          var marginBottom = parseFloat(slideStyles.getPropertyValue('margin-bottom') || 0);

          var _boxSizing = slideStyles.getPropertyValue('box-sizing');

          if (_boxSizing && _boxSizing === 'border-box') {
            slideSize = height + marginTop + marginBottom;
          } else {
            slideSize = height + paddingTop + paddingBottom + marginTop + marginBottom;
          }
        }
      }

      if (currentTransform) {
        slide[0].style.transform = currentTransform;
      }

      if (currentWebKitTransform) {
        slide[0].style.webkitTransform = currentWebKitTransform;
      }

      if (params.roundLengths) slideSize = Math.floor(slideSize);
    } else {
      slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;
      if (params.roundLengths) slideSize = Math.floor(slideSize);

      if (slides[i]) {
        if (swiper.isHorizontal()) {
          slides[i].style.width = slideSize + "px";
        } else {
          slides[i].style.height = slideSize + "px";
        }
      }
    }

    if (slides[i]) {
      slides[i].swiperSlideSize = slideSize;
    }

    slidesSizesGrid.push(slideSize);

    if (params.centeredSlides) {
      slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;
      if (prevSlideSize === 0 && i !== 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;
      if (i === 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;
      if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;
      if (params.roundLengths) slidePosition = Math.floor(slidePosition);
      if (index % params.slidesPerGroup === 0) snapGrid.push(slidePosition);
      slidesGrid.push(slidePosition);
    } else {
      if (params.roundLengths) slidePosition = Math.floor(slidePosition);
      if ((index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0) snapGrid.push(slidePosition);
      slidesGrid.push(slidePosition);
      slidePosition = slidePosition + slideSize + spaceBetween;
    }

    swiper.virtualSize += slideSize + spaceBetween;
    prevSlideSize = slideSize;
    index += 1;
  }

  swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;
  var newSlidesGrid;

  if (rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {
    $wrapperEl.css({
      width: swiper.virtualSize + params.spaceBetween + "px"
    });
  }

  if (params.setWrapperSize) {
    if (swiper.isHorizontal()) $wrapperEl.css({
      width: swiper.virtualSize + params.spaceBetween + "px"
    });else $wrapperEl.css({
      height: swiper.virtualSize + params.spaceBetween + "px"
    });
  }

  if (params.slidesPerColumn > 1) {
    swiper.virtualSize = (slideSize + params.spaceBetween) * slidesNumberEvenToRows;
    swiper.virtualSize = Math.ceil(swiper.virtualSize / params.slidesPerColumn) - params.spaceBetween;
    if (swiper.isHorizontal()) $wrapperEl.css({
      width: swiper.virtualSize + params.spaceBetween + "px"
    });else $wrapperEl.css({
      height: swiper.virtualSize + params.spaceBetween + "px"
    });

    if (params.centeredSlides) {
      newSlidesGrid = [];

      for (var _i = 0; _i < snapGrid.length; _i += 1) {
        var slidesGridItem = snapGrid[_i];
        if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);
        if (snapGrid[_i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);
      }

      snapGrid = newSlidesGrid;
    }
  } // Remove last grid elements depending on width


  if (!params.centeredSlides) {
    newSlidesGrid = [];

    for (var _i2 = 0; _i2 < snapGrid.length; _i2 += 1) {
      var _slidesGridItem = snapGrid[_i2];
      if (params.roundLengths) _slidesGridItem = Math.floor(_slidesGridItem);

      if (snapGrid[_i2] <= swiper.virtualSize - swiperSize) {
        newSlidesGrid.push(_slidesGridItem);
      }
    }

    snapGrid = newSlidesGrid;

    if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {
      snapGrid.push(swiper.virtualSize - swiperSize);
    }
  }

  if (snapGrid.length === 0) snapGrid = [0];

  if (params.spaceBetween !== 0) {
    if (swiper.isHorizontal()) {
      if (rtl) slides.filter(slidesForMargin).css({
        marginLeft: spaceBetween + "px"
      });else slides.filter(slidesForMargin).css({
        marginRight: spaceBetween + "px"
      });
    } else slides.filter(slidesForMargin).css({
      marginBottom: spaceBetween + "px"
    });
  }

  if (params.centeredSlides && params.centeredSlidesBounds) {
    var allSlidesSize = 0;
    slidesSizesGrid.forEach(function (slideSizeValue) {
      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);
    });
    allSlidesSize -= params.spaceBetween;
    var maxSnap = allSlidesSize - swiperSize;
    snapGrid = snapGrid.map(function (snap) {
      if (snap < 0) return -offsetBefore;
      if (snap > maxSnap) return maxSnap + offsetAfter;
      return snap;
    });
  }

  if (params.centerInsufficientSlides) {
    var _allSlidesSize = 0;
    slidesSizesGrid.forEach(function (slideSizeValue) {
      _allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);
    });
    _allSlidesSize -= params.spaceBetween;

    if (_allSlidesSize < swiperSize) {
      var allSlidesOffset = (swiperSize - _allSlidesSize) / 2;
      snapGrid.forEach(function (snap, snapIndex) {
        snapGrid[snapIndex] = snap - allSlidesOffset;
      });
      slidesGrid.forEach(function (snap, snapIndex) {
        slidesGrid[snapIndex] = snap + allSlidesOffset;
      });
    }
  }

  Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["extend"])(swiper, {
    slides: slides,
    snapGrid: snapGrid,
    slidesGrid: slidesGrid,
    slidesSizesGrid: slidesSizesGrid
  });

  if (slidesLength !== previousSlidesLength) {
    swiper.emit('slidesLengthChange');
  }

  if (snapGrid.length !== previousSnapGridLength) {
    if (swiper.params.watchOverflow) swiper.checkOverflow();
    swiper.emit('snapGridLengthChange');
  }

  if (slidesGrid.length !== previousSlidesGridLength) {
    swiper.emit('slidesGridLengthChange');
  }

  if (params.watchSlidesProgress || params.watchSlidesVisibility) {
    swiper.updateSlidesOffset();
  }
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/update/updateSlidesClasses.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/update/updateSlidesClasses.js ***!
  \*******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return updateSlidesClasses; });
function updateSlidesClasses() {
  var swiper = this;
  var slides = swiper.slides,
      params = swiper.params,
      $wrapperEl = swiper.$wrapperEl,
      activeIndex = swiper.activeIndex,
      realIndex = swiper.realIndex;
  var isVirtual = swiper.virtual && params.virtual.enabled;
  slides.removeClass(params.slideActiveClass + " " + params.slideNextClass + " " + params.slidePrevClass + " " + params.slideDuplicateActiveClass + " " + params.slideDuplicateNextClass + " " + params.slideDuplicatePrevClass);
  var activeSlide;

  if (isVirtual) {
    activeSlide = swiper.$wrapperEl.find("." + params.slideClass + "[data-swiper-slide-index=\"" + activeIndex + "\"]");
  } else {
    activeSlide = slides.eq(activeIndex);
  } // Active classes


  activeSlide.addClass(params.slideActiveClass);

  if (params.loop) {
    // Duplicate to all looped slides
    if (activeSlide.hasClass(params.slideDuplicateClass)) {
      $wrapperEl.children("." + params.slideClass + ":not(." + params.slideDuplicateClass + ")[data-swiper-slide-index=\"" + realIndex + "\"]").addClass(params.slideDuplicateActiveClass);
    } else {
      $wrapperEl.children("." + params.slideClass + "." + params.slideDuplicateClass + "[data-swiper-slide-index=\"" + realIndex + "\"]").addClass(params.slideDuplicateActiveClass);
    }
  } // Next Slide


  var nextSlide = activeSlide.nextAll("." + params.slideClass).eq(0).addClass(params.slideNextClass);

  if (params.loop && nextSlide.length === 0) {
    nextSlide = slides.eq(0);
    nextSlide.addClass(params.slideNextClass);
  } // Prev Slide


  var prevSlide = activeSlide.prevAll("." + params.slideClass).eq(0).addClass(params.slidePrevClass);

  if (params.loop && prevSlide.length === 0) {
    prevSlide = slides.eq(-1);
    prevSlide.addClass(params.slidePrevClass);
  }

  if (params.loop) {
    // Duplicate to all looped slides
    if (nextSlide.hasClass(params.slideDuplicateClass)) {
      $wrapperEl.children("." + params.slideClass + ":not(." + params.slideDuplicateClass + ")[data-swiper-slide-index=\"" + nextSlide.attr('data-swiper-slide-index') + "\"]").addClass(params.slideDuplicateNextClass);
    } else {
      $wrapperEl.children("." + params.slideClass + "." + params.slideDuplicateClass + "[data-swiper-slide-index=\"" + nextSlide.attr('data-swiper-slide-index') + "\"]").addClass(params.slideDuplicateNextClass);
    }

    if (prevSlide.hasClass(params.slideDuplicateClass)) {
      $wrapperEl.children("." + params.slideClass + ":not(." + params.slideDuplicateClass + ")[data-swiper-slide-index=\"" + prevSlide.attr('data-swiper-slide-index') + "\"]").addClass(params.slideDuplicatePrevClass);
    } else {
      $wrapperEl.children("." + params.slideClass + "." + params.slideDuplicateClass + "[data-swiper-slide-index=\"" + prevSlide.attr('data-swiper-slide-index') + "\"]").addClass(params.slideDuplicatePrevClass);
    }
  }

  swiper.emitSlidesClasses();
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/update/updateSlidesOffset.js":
/*!******************************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/update/updateSlidesOffset.js ***!
  \******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return updateSlidesOffset; });
function updateSlidesOffset() {
  var swiper = this;
  var slides = swiper.slides;

  for (var i = 0; i < slides.length; i += 1) {
    slides[i].swiperSlideOffset = swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop;
  }
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/core/update/updateSlidesProgress.js":
/*!********************************************************************************!*\
  !*** ./node_modules/swiper/esm/components/core/update/updateSlidesProgress.js ***!
  \********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return updateSlidesProgress; });
/* harmony import */ var _utils_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/dom */ "./node_modules/swiper/esm/utils/dom.js");

function updateSlidesProgress(translate) {
  if (translate === void 0) {
    translate = this && this.translate || 0;
  }

  var swiper = this;
  var params = swiper.params;
  var slides = swiper.slides,
      rtl = swiper.rtlTranslate;
  if (slides.length === 0) return;
  if (typeof slides[0].swiperSlideOffset === 'undefined') swiper.updateSlidesOffset();
  var offsetCenter = -translate;
  if (rtl) offsetCenter = translate; // Visible Slides

  slides.removeClass(params.slideVisibleClass);
  swiper.visibleSlidesIndexes = [];
  swiper.visibleSlides = [];

  for (var i = 0; i < slides.length; i += 1) {
    var slide = slides[i];
    var slideProgress = (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0) - slide.swiperSlideOffset) / (slide.swiperSlideSize + params.spaceBetween);

    if (params.watchSlidesVisibility || params.centeredSlides && params.autoHeight) {
      var slideBefore = -(offsetCenter - slide.swiperSlideOffset);
      var slideAfter = slideBefore + swiper.slidesSizesGrid[i];
      var isVisible = slideBefore >= 0 && slideBefore < swiper.size - 1 || slideAfter > 1 && slideAfter <= swiper.size || slideBefore <= 0 && slideAfter >= swiper.size;

      if (isVisible) {
        swiper.visibleSlides.push(slide);
        swiper.visibleSlidesIndexes.push(i);
        slides.eq(i).addClass(params.slideVisibleClass);
      }
    }

    slide.progress = rtl ? -slideProgress : slideProgress;
  }

  swiper.visibleSlides = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])(swiper.visibleSlides);
}

/***/ }),

/***/ "./node_modules/swiper/esm/components/effect-coverflow/effect-coverflow.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/swiper/esm/components/effect-coverflow/effect-coverflow.js ***!
  \*********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/dom */ "./node_modules/swiper/esm/utils/dom.js");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/utils */ "./node_modules/swiper/esm/utils/utils.js");
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}



var Coverflow = {
  setTranslate: function setTranslate() {
    var swiper = this;
    var swiperWidth = swiper.width,
        swiperHeight = swiper.height,
        slides = swiper.slides,
        slidesSizesGrid = swiper.slidesSizesGrid;
    var params = swiper.params.coverflowEffect;
    var isHorizontal = swiper.isHorizontal();
    var transform = swiper.translate;
    var center = isHorizontal ? -transform + swiperWidth / 2 : -transform + swiperHeight / 2;
    var rotate = isHorizontal ? params.rotate : -params.rotate;
    var translate = params.depth; // Each slide offset from center

    for (var i = 0, length = slides.length; i < length; i += 1) {
      var $slideEl = slides.eq(i);
      var slideSize = slidesSizesGrid[i];
      var slideOffset = $slideEl[0].swiperSlideOffset;
      var offsetMultiplier = (center - slideOffset - slideSize / 2) / slideSize * params.modifier;
      var rotateY = isHorizontal ? rotate * offsetMultiplier : 0;
      var rotateX = isHorizontal ? 0 : rotate * offsetMultiplier; // var rotateZ = 0

      var translateZ = -translate * Math.abs(offsetMultiplier);
      var stretch = params.stretch; // Allow percentage to make a relative stretch for responsive sliders

      if (typeof stretch === 'string' && stretch.indexOf('%') !== -1) {
        stretch = parseFloat(params.stretch) / 100 * slideSize;
      }

      var translateY = isHorizontal ? 0 : stretch * offsetMultiplier;
      var translateX = isHorizontal ? stretch * offsetMultiplier : 0;
      var scale = 1 - (1 - params.scale) * Math.abs(offsetMultiplier); // Fix for ultra small values

      if (Math.abs(translateX) < 0.001) translateX = 0;
      if (Math.abs(translateY) < 0.001) translateY = 0;
      if (Math.abs(translateZ) < 0.001) translateZ = 0;
      if (Math.abs(rotateY) < 0.001) rotateY = 0;
      if (Math.abs(rotateX) < 0.001) rotateX = 0;
      if (Math.abs(scale) < 0.001) scale = 0;
      var slideTransform = "translate3d(" + translateX + "px," + translateY + "px," + translateZ + "px)  rotateX(" + rotateX + "deg) rotateY(" + rotateY + "deg) scale(" + scale + ")";
      $slideEl.transform(slideTransform);
      $slideEl[0].style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;

      if (params.slideShadows) {
        // Set shadows
        var $shadowBeforeEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');
        var $shadowAfterEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');

        if ($shadowBeforeEl.length === 0) {
          $shadowBeforeEl = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])("<div class=\"swiper-slide-shadow-" + (isHorizontal ? 'left' : 'top') + "\"></div>");
          $slideEl.append($shadowBeforeEl);
        }

        if ($shadowAfterEl.length === 0) {
          $shadowAfterEl = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])("<div class=\"swiper-slide-shadow-" + (isHorizontal ? 'right' : 'bottom') + "\"></div>");
          $slideEl.append($shadowAfterEl);
        }

        if ($shadowBeforeEl.length) $shadowBeforeEl[0].style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0;
        if ($shadowAfterEl.length) $shadowAfterEl[0].style.opacity = -offsetMultiplier > 0 ? -offsetMultiplier : 0;
      }
    }
  },
  setTransition: function setTransition(duration) {
    var swiper = this;
    swiper.slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);
  }
};
/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'effect-coverflow',
  params: {
    coverflowEffect: {
      rotate: 50,
      stretch: 0,
      depth: 100,
      scale: 1,
      modifier: 1,
      slideShadows: true
    }
  },
  create: function create() {
    var swiper = this;
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["bindModuleMethods"])(swiper, {
      coverflowEffect: _extends({}, Coverflow)
    });
  },
  on: {
    beforeInit: function beforeInit(swiper) {
      if (swiper.params.effect !== 'coverflow') return;
      swiper.classNames.push(swiper.params.containerModifierClass + "coverflow");
      swiper.classNames.push(swiper.params.containerModifierClass + "3d");
      swiper.params.watchSlidesProgress = true;
      swiper.originalParams.watchSlidesProgress = true;
    },
    setTranslate: function setTranslate(swiper) {
      if (swiper.params.effect !== 'coverflow') return;
      swiper.coverflowEffect.setTranslate();
    },
    setTransition: function setTransition(swiper, duration) {
      if (swiper.params.effect !== 'coverflow') return;
      swiper.coverflowEffect.setTransition(duration);
    }
  }
});

/***/ }),

/***/ "./node_modules/swiper/esm/components/effect-cube/effect-cube.js":
/*!***********************************************************************!*\
  !*** ./node_modules/swiper/esm/components/effect-cube/effect-cube.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/dom */ "./node_modules/swiper/esm/utils/dom.js");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/utils */ "./node_modules/swiper/esm/utils/utils.js");
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}



var Cube = {
  setTranslate: function setTranslate() {
    var swiper = this;
    var $el = swiper.$el,
        $wrapperEl = swiper.$wrapperEl,
        slides = swiper.slides,
        swiperWidth = swiper.width,
        swiperHeight = swiper.height,
        rtl = swiper.rtlTranslate,
        swiperSize = swiper.size,
        browser = swiper.browser;
    var params = swiper.params.cubeEffect;
    var isHorizontal = swiper.isHorizontal();
    var isVirtual = swiper.virtual && swiper.params.virtual.enabled;
    var wrapperRotate = 0;
    var $cubeShadowEl;

    if (params.shadow) {
      if (isHorizontal) {
        $cubeShadowEl = $wrapperEl.find('.swiper-cube-shadow');

        if ($cubeShadowEl.length === 0) {
          $cubeShadowEl = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])('<div class="swiper-cube-shadow"></div>');
          $wrapperEl.append($cubeShadowEl);
        }

        $cubeShadowEl.css({
          height: swiperWidth + "px"
        });
      } else {
        $cubeShadowEl = $el.find('.swiper-cube-shadow');

        if ($cubeShadowEl.length === 0) {
          $cubeShadowEl = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])('<div class="swiper-cube-shadow"></div>');
          $el.append($cubeShadowEl);
        }
      }
    }

    for (var i = 0; i < slides.length; i += 1) {
      var $slideEl = slides.eq(i);
      var slideIndex = i;

      if (isVirtual) {
        slideIndex = parseInt($slideEl.attr('data-swiper-slide-index'), 10);
      }

      var slideAngle = slideIndex * 90;
      var round = Math.floor(slideAngle / 360);

      if (rtl) {
        slideAngle = -slideAngle;
        round = Math.floor(-slideAngle / 360);
      }

      var progress = Math.max(Math.min($slideEl[0].progress, 1), -1);
      var tx = 0;
      var ty = 0;
      var tz = 0;

      if (slideIndex % 4 === 0) {
        tx = -round * 4 * swiperSize;
        tz = 0;
      } else if ((slideIndex - 1) % 4 === 0) {
        tx = 0;
        tz = -round * 4 * swiperSize;
      } else if ((slideIndex - 2) % 4 === 0) {
        tx = swiperSize + round * 4 * swiperSize;
        tz = swiperSize;
      } else if ((slideIndex - 3) % 4 === 0) {
        tx = -swiperSize;
        tz = 3 * swiperSize + swiperSize * 4 * round;
      }

      if (rtl) {
        tx = -tx;
      }

      if (!isHorizontal) {
        ty = tx;
        tx = 0;
      }

      var transform = "rotateX(" + (isHorizontal ? 0 : -slideAngle) + "deg) rotateY(" + (isHorizontal ? slideAngle : 0) + "deg) translate3d(" + tx + "px, " + ty + "px, " + tz + "px)";

      if (progress <= 1 && progress > -1) {
        wrapperRotate = slideIndex * 90 + progress * 90;
        if (rtl) wrapperRotate = -slideIndex * 90 - progress * 90;
      }

      $slideEl.transform(transform);

      if (params.slideShadows) {
        // Set shadows
        var shadowBefore = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');
        var shadowAfter = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');

        if (shadowBefore.length === 0) {
          shadowBefore = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])("<div class=\"swiper-slide-shadow-" + (isHorizontal ? 'left' : 'top') + "\"></div>");
          $slideEl.append(shadowBefore);
        }

        if (shadowAfter.length === 0) {
          shadowAfter = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])("<div class=\"swiper-slide-shadow-" + (isHorizontal ? 'right' : 'bottom') + "\"></div>");
          $slideEl.append(shadowAfter);
        }

        if (shadowBefore.length) shadowBefore[0].style.opacity = Math.max(-progress, 0);
        if (shadowAfter.length) shadowAfter[0].style.opacity = Math.max(progress, 0);
      }
    }

    $wrapperEl.css({
      '-webkit-transform-origin': "50% 50% -" + swiperSize / 2 + "px",
      '-moz-transform-origin': "50% 50% -" + swiperSize / 2 + "px",
      '-ms-transform-origin': "50% 50% -" + swiperSize / 2 + "px",
      'transform-origin': "50% 50% -" + swiperSize / 2 + "px"
    });

    if (params.shadow) {
      if (isHorizontal) {
        $cubeShadowEl.transform("translate3d(0px, " + (swiperWidth / 2 + params.shadowOffset) + "px, " + -swiperWidth / 2 + "px) rotateX(90deg) rotateZ(0deg) scale(" + params.shadowScale + ")");
      } else {
        var shadowAngle = Math.abs(wrapperRotate) - Math.floor(Math.abs(wrapperRotate) / 90) * 90;
        var multiplier = 1.5 - (Math.sin(shadowAngle * 2 * Math.PI / 360) / 2 + Math.cos(shadowAngle * 2 * Math.PI / 360) / 2);
        var scale1 = params.shadowScale;
        var scale2 = params.shadowScale / multiplier;
        var offset = params.shadowOffset;
        $cubeShadowEl.transform("scale3d(" + scale1 + ", 1, " + scale2 + ") translate3d(0px, " + (swiperHeight / 2 + offset) + "px, " + -swiperHeight / 2 / scale2 + "px) rotateX(-90deg)");
      }
    }

    var zFactor = browser.isSafari || browser.isWebView ? -swiperSize / 2 : 0;
    $wrapperEl.transform("translate3d(0px,0," + zFactor + "px) rotateX(" + (swiper.isHorizontal() ? 0 : wrapperRotate) + "deg) rotateY(" + (swiper.isHorizontal() ? -wrapperRotate : 0) + "deg)");
  },
  setTransition: function setTransition(duration) {
    var swiper = this;
    var $el = swiper.$el,
        slides = swiper.slides;
    slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);

    if (swiper.params.cubeEffect.shadow && !swiper.isHorizontal()) {
      $el.find('.swiper-cube-shadow').transition(duration);
    }
  }
};
/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'effect-cube',
  params: {
    cubeEffect: {
      slideShadows: true,
      shadow: true,
      shadowOffset: 20,
      shadowScale: 0.94
    }
  },
  create: function create() {
    var swiper = this;
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["bindModuleMethods"])(swiper, {
      cubeEffect: _extends({}, Cube)
    });
  },
  on: {
    beforeInit: function beforeInit(swiper) {
      if (swiper.params.effect !== 'cube') return;
      swiper.classNames.push(swiper.params.containerModifierClass + "cube");
      swiper.classNames.push(swiper.params.containerModifierClass + "3d");
      var overwriteParams = {
        slidesPerView: 1,
        slidesPerColumn: 1,
        slidesPerGroup: 1,
        watchSlidesProgress: true,
        resistanceRatio: 0,
        spaceBetween: 0,
        centeredSlides: false,
        virtualTranslate: true
      };
      Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["extend"])(swiper.params, overwriteParams);
      Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["extend"])(swiper.originalParams, overwriteParams);
    },
    setTranslate: function setTranslate(swiper) {
      if (swiper.params.effect !== 'cube') return;
      swiper.cubeEffect.setTranslate();
    },
    setTransition: function setTransition(swiper, duration) {
      if (swiper.params.effect !== 'cube') return;
      swiper.cubeEffect.setTransition(duration);
    }
  }
});

/***/ }),

/***/ "./node_modules/swiper/esm/components/effect-fade/effect-fade.js":
/*!***********************************************************************!*\
  !*** ./node_modules/swiper/esm/components/effect-fade/effect-fade.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/utils */ "./node_modules/swiper/esm/utils/utils.js");
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}


var Fade = {
  setTranslate: function setTranslate() {
    var swiper = this;
    var slides = swiper.slides;

    for (var i = 0; i < slides.length; i += 1) {
      var $slideEl = swiper.slides.eq(i);
      var offset = $slideEl[0].swiperSlideOffset;
      var tx = -offset;
      if (!swiper.params.virtualTranslate) tx -= swiper.translate;
      var ty = 0;

      if (!swiper.isHorizontal()) {
        ty = tx;
        tx = 0;
      }

      var slideOpacity = swiper.params.fadeEffect.crossFade ? Math.max(1 - Math.abs($slideEl[0].progress), 0) : 1 + Math.min(Math.max($slideEl[0].progress, -1), 0);
      $slideEl.css({
        opacity: slideOpacity
      }).transform("translate3d(" + tx + "px, " + ty + "px, 0px)");
    }
  },
  setTransition: function setTransition(duration) {
    var swiper = this;
    var slides = swiper.slides,
        $wrapperEl = swiper.$wrapperEl;
    slides.transition(duration);

    if (swiper.params.virtualTranslate && duration !== 0) {
      var eventTriggered = false;
      slides.transitionEnd(function () {
        if (eventTriggered) return;
        if (!swiper || swiper.destroyed) return;
        eventTriggered = true;
        swiper.animating = false;
        var triggerEvents = ['webkitTransitionEnd', 'transitionend'];

        for (var i = 0; i < triggerEvents.length; i += 1) {
          $wrapperEl.trigger(triggerEvents[i]);
        }
      });
    }
  }
};
/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'effect-fade',
  params: {
    fadeEffect: {
      crossFade: false
    }
  },
  create: function create() {
    var swiper = this;
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["bindModuleMethods"])(swiper, {
      fadeEffect: _extends({}, Fade)
    });
  },
  on: {
    beforeInit: function beforeInit(swiper) {
      if (swiper.params.effect !== 'fade') return;
      swiper.classNames.push(swiper.params.containerModifierClass + "fade");
      var overwriteParams = {
        slidesPerView: 1,
        slidesPerColumn: 1,
        slidesPerGroup: 1,
        watchSlidesProgress: true,
        spaceBetween: 0,
        virtualTranslate: true
      };
      Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["extend"])(swiper.params, overwriteParams);
      Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["extend"])(swiper.originalParams, overwriteParams);
    },
    setTranslate: function setTranslate(swiper) {
      if (swiper.params.effect !== 'fade') return;
      swiper.fadeEffect.setTranslate();
    },
    setTransition: function setTransition(swiper, duration) {
      if (swiper.params.effect !== 'fade') return;
      swiper.fadeEffect.setTransition(duration);
    }
  }
});

/***/ }),

/***/ "./node_modules/swiper/esm/components/effect-flip/effect-flip.js":
/*!***********************************************************************!*\
  !*** ./node_modules/swiper/esm/components/effect-flip/effect-flip.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/dom */ "./node_modules/swiper/esm/utils/dom.js");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/utils */ "./node_modules/swiper/esm/utils/utils.js");
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}



var Flip = {
  setTranslate: function setTranslate() {
    var swiper = this;
    var slides = swiper.slides,
        rtl = swiper.rtlTranslate;

    for (var i = 0; i < slides.length; i += 1) {
      var $slideEl = slides.eq(i);
      var progress = $slideEl[0].progress;

      if (swiper.params.flipEffect.limitRotation) {
        progress = Math.max(Math.min($slideEl[0].progress, 1), -1);
      }

      var offset = $slideEl[0].swiperSlideOffset;
      var rotate = -180 * progress;
      var rotateY = rotate;
      var rotateX = 0;
      var tx = -offset;
      var ty = 0;

      if (!swiper.isHorizontal()) {
        ty = tx;
        tx = 0;
        rotateX = -rotateY;
        rotateY = 0;
      } else if (rtl) {
        rotateY = -rotateY;
      }

      $slideEl[0].style.zIndex = -Math.abs(Math.round(progress)) + slides.length;

      if (swiper.params.flipEffect.slideShadows) {
        // Set shadows
        var shadowBefore = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');
        var shadowAfter = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');

        if (shadowBefore.length === 0) {
          shadowBefore = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])("<div class=\"swiper-slide-shadow-" + (swiper.isHorizontal() ? 'left' : 'top') + "\"></div>");
          $slideEl.append(shadowBefore);
        }

        if (shadowAfter.length === 0) {
          shadowAfter = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])("<div class=\"swiper-slide-shadow-" + (swiper.isHorizontal() ? 'right' : 'bottom') + "\"></div>");
          $slideEl.append(shadowAfter);
        }

        if (shadowBefore.length) shadowBefore[0].style.opacity = Math.max(-progress, 0);
        if (shadowAfter.length) shadowAfter[0].style.opacity = Math.max(progress, 0);
      }

      $slideEl.transform("translate3d(" + tx + "px, " + ty + "px, 0px) rotateX(" + rotateX + "deg) rotateY(" + rotateY + "deg)");
    }
  },
  setTransition: function setTransition(duration) {
    var swiper = this;
    var slides = swiper.slides,
        activeIndex = swiper.activeIndex,
        $wrapperEl = swiper.$wrapperEl;
    slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);

    if (swiper.params.virtualTranslate && duration !== 0) {
      var eventTriggered = false; // eslint-disable-next-line

      slides.eq(activeIndex).transitionEnd(function onTransitionEnd() {
        if (eventTriggered) return;
        if (!swiper || swiper.destroyed) return; // if (!$(this).hasClass(swiper.params.slideActiveClass)) return;

        eventTriggered = true;
        swiper.animating = false;
        var triggerEvents = ['webkitTransitionEnd', 'transitionend'];

        for (var i = 0; i < triggerEvents.length; i += 1) {
          $wrapperEl.trigger(triggerEvents[i]);
        }
      });
    }
  }
};
/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'effect-flip',
  params: {
    flipEffect: {
      slideShadows: true,
      limitRotation: true
    }
  },
  create: function create() {
    var swiper = this;
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["bindModuleMethods"])(swiper, {
      flipEffect: _extends({}, Flip)
    });
  },
  on: {
    beforeInit: function beforeInit(swiper) {
      if (swiper.params.effect !== 'flip') return;
      swiper.classNames.push(swiper.params.containerModifierClass + "flip");
      swiper.classNames.push(swiper.params.containerModifierClass + "3d");
      var overwriteParams = {
        slidesPerView: 1,
        slidesPerColumn: 1,
        slidesPerGroup: 1,
        watchSlidesProgress: true,
        spaceBetween: 0,
        virtualTranslate: true
      };
      Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["extend"])(swiper.params, overwriteParams);
      Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["extend"])(swiper.originalParams, overwriteParams);
    },
    setTranslate: function setTranslate(swiper) {
      if (swiper.params.effect !== 'flip') return;
      swiper.flipEffect.setTranslate();
    },
    setTransition: function setTransition(swiper, duration) {
      if (swiper.params.effect !== 'flip') return;
      swiper.flipEffect.setTransition(duration);
    }
  }
});

/***/ }),

/***/ "./node_modules/swiper/esm/components/hash-navigation/hash-navigation.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/swiper/esm/components/hash-navigation/hash-navigation.js ***!
  \*******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");
/* harmony import */ var _utils_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/dom */ "./node_modules/swiper/esm/utils/dom.js");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/utils */ "./node_modules/swiper/esm/utils/utils.js");
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}




var HashNavigation = {
  onHashCange: function onHashCange() {
    var swiper = this;
    var document = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getDocument"])();
    swiper.emit('hashChange');
    var newHash = document.location.hash.replace('#', '');
    var activeSlideHash = swiper.slides.eq(swiper.activeIndex).attr('data-hash');

    if (newHash !== activeSlideHash) {
      var newIndex = swiper.$wrapperEl.children("." + swiper.params.slideClass + "[data-hash=\"" + newHash + "\"]").index();
      if (typeof newIndex === 'undefined') return;
      swiper.slideTo(newIndex);
    }
  },
  setHash: function setHash() {
    var swiper = this;
    var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();
    var document = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getDocument"])();
    if (!swiper.hashNavigation.initialized || !swiper.params.hashNavigation.enabled) return;

    if (swiper.params.hashNavigation.replaceState && window.history && window.history.replaceState) {
      window.history.replaceState(null, null, "#" + swiper.slides.eq(swiper.activeIndex).attr('data-hash') || false);
      swiper.emit('hashSet');
    } else {
      var slide = swiper.slides.eq(swiper.activeIndex);
      var hash = slide.attr('data-hash') || slide.attr('data-history');
      document.location.hash = hash || '';
      swiper.emit('hashSet');
    }
  },
  init: function init() {
    var swiper = this;
    var document = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getDocument"])();
    var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();
    if (!swiper.params.hashNavigation.enabled || swiper.params.history && swiper.params.history.enabled) return;
    swiper.hashNavigation.initialized = true;
    var hash = document.location.hash.replace('#', '');

    if (hash) {
      var speed = 0;

      for (var i = 0, length = swiper.slides.length; i < length; i += 1) {
        var slide = swiper.slides.eq(i);
        var slideHash = slide.attr('data-hash') || slide.attr('data-history');

        if (slideHash === hash && !slide.hasClass(swiper.params.slideDuplicateClass)) {
          var index = slide.index();
          swiper.slideTo(index, speed, swiper.params.runCallbacksOnInit, true);
        }
      }
    }

    if (swiper.params.hashNavigation.watchState) {
      Object(_utils_dom__WEBPACK_IMPORTED_MODULE_1__["default"])(window).on('hashchange', swiper.hashNavigation.onHashCange);
    }
  },
  destroy: function destroy() {
    var swiper = this;
    var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();

    if (swiper.params.hashNavigation.watchState) {
      Object(_utils_dom__WEBPACK_IMPORTED_MODULE_1__["default"])(window).off('hashchange', swiper.hashNavigation.onHashCange);
    }
  }
};
/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'hash-navigation',
  params: {
    hashNavigation: {
      enabled: false,
      replaceState: false,
      watchState: false
    }
  },
  create: function create() {
    var swiper = this;
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["bindModuleMethods"])(swiper, {
      hashNavigation: _extends({
        initialized: false
      }, HashNavigation)
    });
  },
  on: {
    init: function init(swiper) {
      if (swiper.params.hashNavigation.enabled) {
        swiper.hashNavigation.init();
      }
    },
    destroy: function destroy(swiper) {
      if (swiper.params.hashNavigation.enabled) {
        swiper.hashNavigation.destroy();
      }
    },
    transitionEnd: function transitionEnd(swiper) {
      if (swiper.hashNavigation.initialized) {
        swiper.hashNavigation.setHash();
      }
    },
    slideChange: function slideChange(swiper) {
      if (swiper.hashNavigation.initialized && swiper.params.cssMode) {
        swiper.hashNavigation.setHash();
      }
    }
  }
});

/***/ }),

/***/ "./node_modules/swiper/esm/components/history/history.js":
/*!***************************************************************!*\
  !*** ./node_modules/swiper/esm/components/history/history.js ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/utils */ "./node_modules/swiper/esm/utils/utils.js");
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}



var History = {
  init: function init() {
    var swiper = this;
    var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();
    if (!swiper.params.history) return;

    if (!window.history || !window.history.pushState) {
      swiper.params.history.enabled = false;
      swiper.params.hashNavigation.enabled = true;
      return;
    }

    var history = swiper.history;
    history.initialized = true;
    history.paths = History.getPathValues(swiper.params.url);
    if (!history.paths.key && !history.paths.value) return;
    history.scrollToSlide(0, history.paths.value, swiper.params.runCallbacksOnInit);

    if (!swiper.params.history.replaceState) {
      window.addEventListener('popstate', swiper.history.setHistoryPopState);
    }
  },
  destroy: function destroy() {
    var swiper = this;
    var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();

    if (!swiper.params.history.replaceState) {
      window.removeEventListener('popstate', swiper.history.setHistoryPopState);
    }
  },
  setHistoryPopState: function setHistoryPopState() {
    var swiper = this;
    swiper.history.paths = History.getPathValues(swiper.params.url);
    swiper.history.scrollToSlide(swiper.params.speed, swiper.history.paths.value, false);
  },
  getPathValues: function getPathValues(urlOverride) {
    var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();
    var location;

    if (urlOverride) {
      location = new URL(urlOverride);
    } else {
      location = window.location;
    }

    var pathArray = location.pathname.slice(1).split('/').filter(function (part) {
      return part !== '';
    });
    var total = pathArray.length;
    var key = pathArray[total - 2];
    var value = pathArray[total - 1];
    return {
      key: key,
      value: value
    };
  },
  setHistory: function setHistory(key, index) {
    var swiper = this;
    var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();
    if (!swiper.history.initialized || !swiper.params.history.enabled) return;
    var location;

    if (swiper.params.url) {
      location = new URL(swiper.params.url);
    } else {
      location = window.location;
    }

    var slide = swiper.slides.eq(index);
    var value = History.slugify(slide.attr('data-history'));

    if (!location.pathname.includes(key)) {
      value = key + "/" + value;
    }

    var currentState = window.history.state;

    if (currentState && currentState.value === value) {
      return;
    }

    if (swiper.params.history.replaceState) {
      window.history.replaceState({
        value: value
      }, null, value);
    } else {
      window.history.pushState({
        value: value
      }, null, value);
    }
  },
  slugify: function slugify(text) {
    return text.toString().replace(/\s+/g, '-').replace(/[^\w-]+/g, '').replace(/--+/g, '-').replace(/^-+/, '').replace(/-+$/, '');
  },
  scrollToSlide: function scrollToSlide(speed, value, runCallbacks) {
    var swiper = this;

    if (value) {
      for (var i = 0, length = swiper.slides.length; i < length; i += 1) {
        var slide = swiper.slides.eq(i);
        var slideHistory = History.slugify(slide.attr('data-history'));

        if (slideHistory === value && !slide.hasClass(swiper.params.slideDuplicateClass)) {
          var index = slide.index();
          swiper.slideTo(index, speed, runCallbacks);
        }
      }
    } else {
      swiper.slideTo(0, speed, runCallbacks);
    }
  }
};
/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'history',
  params: {
    history: {
      enabled: false,
      replaceState: false,
      key: 'slides'
    }
  },
  create: function create() {
    var swiper = this;
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["bindModuleMethods"])(swiper, {
      history: _extends({}, History)
    });
  },
  on: {
    init: function init(swiper) {
      if (swiper.params.history.enabled) {
        swiper.history.init();
      }
    },
    destroy: function destroy(swiper) {
      if (swiper.params.history.enabled) {
        swiper.history.destroy();
      }
    },
    transitionEnd: function transitionEnd(swiper) {
      if (swiper.history.initialized) {
        swiper.history.setHistory(swiper.params.history.key, swiper.activeIndex);
      }
    },
    slideChange: function slideChange(swiper) {
      if (swiper.history.initialized && swiper.params.cssMode) {
        swiper.history.setHistory(swiper.params.history.key, swiper.activeIndex);
      }
    }
  }
});

/***/ }),

/***/ "./node_modules/swiper/esm/components/keyboard/keyboard.js":
/*!*****************************************************************!*\
  !*** ./node_modules/swiper/esm/components/keyboard/keyboard.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");
/* harmony import */ var _utils_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/dom */ "./node_modules/swiper/esm/utils/dom.js");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/utils */ "./node_modules/swiper/esm/utils/utils.js");
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}




var Keyboard = {
  handle: function handle(event) {
    var swiper = this;
    var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();
    var document = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getDocument"])();
    var rtl = swiper.rtlTranslate;
    var e = event;
    if (e.originalEvent) e = e.originalEvent; // jquery fix

    var kc = e.keyCode || e.charCode;
    var pageUpDown = swiper.params.keyboard.pageUpDown;
    var isPageUp = pageUpDown && kc === 33;
    var isPageDown = pageUpDown && kc === 34;
    var isArrowLeft = kc === 37;
    var isArrowRight = kc === 39;
    var isArrowUp = kc === 38;
    var isArrowDown = kc === 40; // Directions locks

    if (!swiper.allowSlideNext && (swiper.isHorizontal() && isArrowRight || swiper.isVertical() && isArrowDown || isPageDown)) {
      return false;
    }

    if (!swiper.allowSlidePrev && (swiper.isHorizontal() && isArrowLeft || swiper.isVertical() && isArrowUp || isPageUp)) {
      return false;
    }

    if (e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) {
      return undefined;
    }

    if (document.activeElement && document.activeElement.nodeName && (document.activeElement.nodeName.toLowerCase() === 'input' || document.activeElement.nodeName.toLowerCase() === 'textarea')) {
      return undefined;
    }

    if (swiper.params.keyboard.onlyInViewport && (isPageUp || isPageDown || isArrowLeft || isArrowRight || isArrowUp || isArrowDown)) {
      var inView = false; // Check that swiper should be inside of visible area of window

      if (swiper.$el.parents("." + swiper.params.slideClass).length > 0 && swiper.$el.parents("." + swiper.params.slideActiveClass).length === 0) {
        return undefined;
      }

      var windowWidth = window.innerWidth;
      var windowHeight = window.innerHeight;
      var swiperOffset = swiper.$el.offset();
      if (rtl) swiperOffset.left -= swiper.$el[0].scrollLeft;
      var swiperCoord = [[swiperOffset.left, swiperOffset.top], [swiperOffset.left + swiper.width, swiperOffset.top], [swiperOffset.left, swiperOffset.top + swiper.height], [swiperOffset.left + swiper.width, swiperOffset.top + swiper.height]];

      for (var i = 0; i < swiperCoord.length; i += 1) {
        var point = swiperCoord[i];

        if (point[0] >= 0 && point[0] <= windowWidth && point[1] >= 0 && point[1] <= windowHeight) {
          inView = true;
        }
      }

      if (!inView) return undefined;
    }

    if (swiper.isHorizontal()) {
      if (isPageUp || isPageDown || isArrowLeft || isArrowRight) {
        if (e.preventDefault) e.preventDefault();else e.returnValue = false;
      }

      if ((isPageDown || isArrowRight) && !rtl || (isPageUp || isArrowLeft) && rtl) swiper.slideNext();
      if ((isPageUp || isArrowLeft) && !rtl || (isPageDown || isArrowRight) && rtl) swiper.slidePrev();
    } else {
      if (isPageUp || isPageDown || isArrowUp || isArrowDown) {
        if (e.preventDefault) e.preventDefault();else e.returnValue = false;
      }

      if (isPageDown || isArrowDown) swiper.slideNext();
      if (isPageUp || isArrowUp) swiper.slidePrev();
    }

    swiper.emit('keyPress', kc);
    return undefined;
  },
  enable: function enable() {
    var swiper = this;
    var document = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getDocument"])();
    if (swiper.keyboard.enabled) return;
    Object(_utils_dom__WEBPACK_IMPORTED_MODULE_1__["default"])(document).on('keydown', swiper.keyboard.handle);
    swiper.keyboard.enabled = true;
  },
  disable: function disable() {
    var swiper = this;
    var document = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getDocument"])();
    if (!swiper.keyboard.enabled) return;
    Object(_utils_dom__WEBPACK_IMPORTED_MODULE_1__["default"])(document).off('keydown', swiper.keyboard.handle);
    swiper.keyboard.enabled = false;
  }
};
/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'keyboard',
  params: {
    keyboard: {
      enabled: false,
      onlyInViewport: true,
      pageUpDown: true
    }
  },
  create: function create() {
    var swiper = this;
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["bindModuleMethods"])(swiper, {
      keyboard: _extends({
        enabled: false
      }, Keyboard)
    });
  },
  on: {
    init: function init(swiper) {
      if (swiper.params.keyboard.enabled) {
        swiper.keyboard.enable();
      }
    },
    destroy: function destroy(swiper) {
      if (swiper.keyboard.enabled) {
        swiper.keyboard.disable();
      }
    }
  }
});

/***/ }),

/***/ "./node_modules/swiper/esm/components/lazy/lazy.js":
/*!*********************************************************!*\
  !*** ./node_modules/swiper/esm/components/lazy/lazy.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/dom */ "./node_modules/swiper/esm/utils/dom.js");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/utils */ "./node_modules/swiper/esm/utils/utils.js");
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}



var Lazy = {
  loadInSlide: function loadInSlide(index, loadInDuplicate) {
    if (loadInDuplicate === void 0) {
      loadInDuplicate = true;
    }

    var swiper = this;
    var params = swiper.params.lazy;
    if (typeof index === 'undefined') return;
    if (swiper.slides.length === 0) return;
    var isVirtual = swiper.virtual && swiper.params.virtual.enabled;
    var $slideEl = isVirtual ? swiper.$wrapperEl.children("." + swiper.params.slideClass + "[data-swiper-slide-index=\"" + index + "\"]") : swiper.slides.eq(index);
    var $images = $slideEl.find("." + params.elementClass + ":not(." + params.loadedClass + "):not(." + params.loadingClass + ")");

    if ($slideEl.hasClass(params.elementClass) && !$slideEl.hasClass(params.loadedClass) && !$slideEl.hasClass(params.loadingClass)) {
      $images.push($slideEl[0]);
    }

    if ($images.length === 0) return;
    $images.each(function (imageEl) {
      var $imageEl = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])(imageEl);
      $imageEl.addClass(params.loadingClass);
      var background = $imageEl.attr('data-background');
      var src = $imageEl.attr('data-src');
      var srcset = $imageEl.attr('data-srcset');
      var sizes = $imageEl.attr('data-sizes');
      var $pictureEl = $imageEl.parent('picture');
      swiper.loadImage($imageEl[0], src || background, srcset, sizes, false, function () {
        if (typeof swiper === 'undefined' || swiper === null || !swiper || swiper && !swiper.params || swiper.destroyed) return;

        if (background) {
          $imageEl.css('background-image', "url(\"" + background + "\")");
          $imageEl.removeAttr('data-background');
        } else {
          if (srcset) {
            $imageEl.attr('srcset', srcset);
            $imageEl.removeAttr('data-srcset');
          }

          if (sizes) {
            $imageEl.attr('sizes', sizes);
            $imageEl.removeAttr('data-sizes');
          }

          if ($pictureEl.length) {
            $pictureEl.children('source').each(function (sourceEl) {
              var $source = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])(sourceEl);

              if ($source.attr('data-srcset')) {
                $source.attr('srcset', $source.attr('data-srcset'));
                $source.removeAttr('data-srcset');
              }
            });
          }

          if (src) {
            $imageEl.attr('src', src);
            $imageEl.removeAttr('data-src');
          }
        }

        $imageEl.addClass(params.loadedClass).removeClass(params.loadingClass);
        $slideEl.find("." + params.preloaderClass).remove();

        if (swiper.params.loop && loadInDuplicate) {
          var slideOriginalIndex = $slideEl.attr('data-swiper-slide-index');

          if ($slideEl.hasClass(swiper.params.slideDuplicateClass)) {
            var originalSlide = swiper.$wrapperEl.children("[data-swiper-slide-index=\"" + slideOriginalIndex + "\"]:not(." + swiper.params.slideDuplicateClass + ")");
            swiper.lazy.loadInSlide(originalSlide.index(), false);
          } else {
            var duplicatedSlide = swiper.$wrapperEl.children("." + swiper.params.slideDuplicateClass + "[data-swiper-slide-index=\"" + slideOriginalIndex + "\"]");
            swiper.lazy.loadInSlide(duplicatedSlide.index(), false);
          }
        }

        swiper.emit('lazyImageReady', $slideEl[0], $imageEl[0]);

        if (swiper.params.autoHeight) {
          swiper.updateAutoHeight();
        }
      });
      swiper.emit('lazyImageLoad', $slideEl[0], $imageEl[0]);
    });
  },
  load: function load() {
    var swiper = this;
    var $wrapperEl = swiper.$wrapperEl,
        swiperParams = swiper.params,
        slides = swiper.slides,
        activeIndex = swiper.activeIndex;
    var isVirtual = swiper.virtual && swiperParams.virtual.enabled;
    var params = swiperParams.lazy;
    var slidesPerView = swiperParams.slidesPerView;

    if (slidesPerView === 'auto') {
      slidesPerView = 0;
    }

    function slideExist(index) {
      if (isVirtual) {
        if ($wrapperEl.children("." + swiperParams.slideClass + "[data-swiper-slide-index=\"" + index + "\"]").length) {
          return true;
        }
      } else if (slides[index]) return true;

      return false;
    }

    function slideIndex(slideEl) {
      if (isVirtual) {
        return Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])(slideEl).attr('data-swiper-slide-index');
      }

      return Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])(slideEl).index();
    }

    if (!swiper.lazy.initialImageLoaded) swiper.lazy.initialImageLoaded = true;

    if (swiper.params.watchSlidesVisibility) {
      $wrapperEl.children("." + swiperParams.slideVisibleClass).each(function (slideEl) {
        var index = isVirtual ? Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])(slideEl).attr('data-swiper-slide-index') : Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])(slideEl).index();
        swiper.lazy.loadInSlide(index);
      });
    } else if (slidesPerView > 1) {
      for (var i = activeIndex; i < activeIndex + slidesPerView; i += 1) {
        if (slideExist(i)) swiper.lazy.loadInSlide(i);
      }
    } else {
      swiper.lazy.loadInSlide(activeIndex);
    }

    if (params.loadPrevNext) {
      if (slidesPerView > 1 || params.loadPrevNextAmount && params.loadPrevNextAmount > 1) {
        var amount = params.loadPrevNextAmount;
        var spv = slidesPerView;
        var maxIndex = Math.min(activeIndex + spv + Math.max(amount, spv), slides.length);
        var minIndex = Math.max(activeIndex - Math.max(spv, amount), 0); // Next Slides

        for (var _i = activeIndex + slidesPerView; _i < maxIndex; _i += 1) {
          if (slideExist(_i)) swiper.lazy.loadInSlide(_i);
        } // Prev Slides


        for (var _i2 = minIndex; _i2 < activeIndex; _i2 += 1) {
          if (slideExist(_i2)) swiper.lazy.loadInSlide(_i2);
        }
      } else {
        var nextSlide = $wrapperEl.children("." + swiperParams.slideNextClass);
        if (nextSlide.length > 0) swiper.lazy.loadInSlide(slideIndex(nextSlide));
        var prevSlide = $wrapperEl.children("." + swiperParams.slidePrevClass);
        if (prevSlide.length > 0) swiper.lazy.loadInSlide(slideIndex(prevSlide));
      }
    }
  }
};
/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'lazy',
  params: {
    lazy: {
      enabled: false,
      loadPrevNext: false,
      loadPrevNextAmount: 1,
      loadOnTransitionStart: false,
      elementClass: 'swiper-lazy',
      loadingClass: 'swiper-lazy-loading',
      loadedClass: 'swiper-lazy-loaded',
      preloaderClass: 'swiper-lazy-preloader'
    }
  },
  create: function create() {
    var swiper = this;
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["bindModuleMethods"])(swiper, {
      lazy: _extends({
        initialImageLoaded: false
      }, Lazy)
    });
  },
  on: {
    beforeInit: function beforeInit(swiper) {
      if (swiper.params.lazy.enabled && swiper.params.preloadImages) {
        swiper.params.preloadImages = false;
      }
    },
    init: function init(swiper) {
      if (swiper.params.lazy.enabled && !swiper.params.loop && swiper.params.initialSlide === 0) {
        swiper.lazy.load();
      }
    },
    scroll: function scroll(swiper) {
      if (swiper.params.freeMode && !swiper.params.freeModeSticky) {
        swiper.lazy.load();
      }
    },
    resize: function resize(swiper) {
      if (swiper.params.lazy.enabled) {
        swiper.lazy.load();
      }
    },
    scrollbarDragMove: function scrollbarDragMove(swiper) {
      if (swiper.params.lazy.enabled) {
        swiper.lazy.load();
      }
    },
    transitionStart: function transitionStart(swiper) {
      if (swiper.params.lazy.enabled) {
        if (swiper.params.lazy.loadOnTransitionStart || !swiper.params.lazy.loadOnTransitionStart && !swiper.lazy.initialImageLoaded) {
          swiper.lazy.load();
        }
      }
    },
    transitionEnd: function transitionEnd(swiper) {
      if (swiper.params.lazy.enabled && !swiper.params.lazy.loadOnTransitionStart) {
        swiper.lazy.load();
      }
    },
    slideChange: function slideChange(swiper) {
      if (swiper.params.lazy.enabled && swiper.params.cssMode) {
        swiper.lazy.load();
      }
    }
  }
});

/***/ }),

/***/ "./node_modules/swiper/esm/components/mousewheel/mousewheel.js":
/*!*********************************************************************!*\
  !*** ./node_modules/swiper/esm/components/mousewheel/mousewheel.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");
/* harmony import */ var _utils_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/dom */ "./node_modules/swiper/esm/utils/dom.js");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/utils */ "./node_modules/swiper/esm/utils/utils.js");




function isEventSupported() {
  var document = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getDocument"])();
  var eventName = 'onwheel';
  var isSupported = (eventName in document);

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && document.implementation && document.implementation.hasFeature && // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true) {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

var Mousewheel = {
  lastScrollTime: Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["now"])(),
  lastEventBeforeSnap: undefined,
  recentWheelEvents: [],
  event: function event() {
    var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();
    if (window.navigator.userAgent.indexOf('firefox') > -1) return 'DOMMouseScroll';
    return isEventSupported() ? 'wheel' : 'mousewheel';
  },
  normalize: function normalize(e) {
    // Reasonable defaults
    var PIXEL_STEP = 10;
    var LINE_HEIGHT = 40;
    var PAGE_HEIGHT = 800;
    var sX = 0;
    var sY = 0; // spinX, spinY

    var pX = 0;
    var pY = 0; // pixelX, pixelY
    // Legacy

    if ('detail' in e) {
      sY = e.detail;
    }

    if ('wheelDelta' in e) {
      sY = -e.wheelDelta / 120;
    }

    if ('wheelDeltaY' in e) {
      sY = -e.wheelDeltaY / 120;
    }

    if ('wheelDeltaX' in e) {
      sX = -e.wheelDeltaX / 120;
    } // side scrolling on FF with DOMMouseScroll


    if ('axis' in e && e.axis === e.HORIZONTAL_AXIS) {
      sX = sY;
      sY = 0;
    }

    pX = sX * PIXEL_STEP;
    pY = sY * PIXEL_STEP;

    if ('deltaY' in e) {
      pY = e.deltaY;
    }

    if ('deltaX' in e) {
      pX = e.deltaX;
    }

    if (e.shiftKey && !pX) {
      // if user scrolls with shift he wants horizontal scroll
      pX = pY;
      pY = 0;
    }

    if ((pX || pY) && e.deltaMode) {
      if (e.deltaMode === 1) {
        // delta in LINE units
        pX *= LINE_HEIGHT;
        pY *= LINE_HEIGHT;
      } else {
        // delta in PAGE units
        pX *= PAGE_HEIGHT;
        pY *= PAGE_HEIGHT;
      }
    } // Fall-back if spin cannot be determined


    if (pX && !sX) {
      sX = pX < 1 ? -1 : 1;
    }

    if (pY && !sY) {
      sY = pY < 1 ? -1 : 1;
    }

    return {
      spinX: sX,
      spinY: sY,
      pixelX: pX,
      pixelY: pY
    };
  },
  handleMouseEnter: function handleMouseEnter() {
    var swiper = this;
    swiper.mouseEntered = true;
  },
  handleMouseLeave: function handleMouseLeave() {
    var swiper = this;
    swiper.mouseEntered = false;
  },
  handle: function handle(event) {
    var e = event;
    var swiper = this;
    var params = swiper.params.mousewheel;

    if (swiper.params.cssMode) {
      e.preventDefault();
    }

    var target = swiper.$el;

    if (swiper.params.mousewheel.eventsTarget !== 'container') {
      target = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_1__["default"])(swiper.params.mousewheel.eventsTarget);
    }

    if (!swiper.mouseEntered && !target[0].contains(e.target) && !params.releaseOnEdges) return true;
    if (e.originalEvent) e = e.originalEvent; // jquery fix

    var delta = 0;
    var rtlFactor = swiper.rtlTranslate ? -1 : 1;
    var data = Mousewheel.normalize(e);

    if (params.forceToAxis) {
      if (swiper.isHorizontal()) {
        if (Math.abs(data.pixelX) > Math.abs(data.pixelY)) delta = -data.pixelX * rtlFactor;else return true;
      } else if (Math.abs(data.pixelY) > Math.abs(data.pixelX)) delta = -data.pixelY;else return true;
    } else {
      delta = Math.abs(data.pixelX) > Math.abs(data.pixelY) ? -data.pixelX * rtlFactor : -data.pixelY;
    }

    if (delta === 0) return true;
    if (params.invert) delta = -delta;

    if (!swiper.params.freeMode) {
      // Register the new event in a variable which stores the relevant data
      var newEvent = {
        time: Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["now"])(),
        delta: Math.abs(delta),
        direction: Math.sign(delta),
        raw: event
      }; // Keep the most recent events

      var recentWheelEvents = swiper.mousewheel.recentWheelEvents;

      if (recentWheelEvents.length >= 2) {
        recentWheelEvents.shift(); // only store the last N events
      }

      var prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;
      recentWheelEvents.push(newEvent); // If there is at least one previous recorded event:
      //   If direction has changed or
      //   if the scroll is quicker than the previous one:
      //     Animate the slider.
      // Else (this is the first time the wheel is moved):
      //     Animate the slider.

      if (prevEvent) {
        if (newEvent.direction !== prevEvent.direction || newEvent.delta > prevEvent.delta || newEvent.time > prevEvent.time + 150) {
          swiper.mousewheel.animateSlider(newEvent);
        }
      } else {
        swiper.mousewheel.animateSlider(newEvent);
      } // If it's time to release the scroll:
      //   Return now so you don't hit the preventDefault.


      if (swiper.mousewheel.releaseScroll(newEvent)) {
        return true;
      }
    } else {
      // Freemode or scrollContainer:
      // If we recently snapped after a momentum scroll, then ignore wheel events
      // to give time for the deceleration to finish. Stop ignoring after 500 msecs
      // or if it's a new scroll (larger delta or inverse sign as last event before
      // an end-of-momentum snap).
      var _newEvent = {
        time: Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["now"])(),
        delta: Math.abs(delta),
        direction: Math.sign(delta)
      };
      var lastEventBeforeSnap = swiper.mousewheel.lastEventBeforeSnap;
      var ignoreWheelEvents = lastEventBeforeSnap && _newEvent.time < lastEventBeforeSnap.time + 500 && _newEvent.delta <= lastEventBeforeSnap.delta && _newEvent.direction === lastEventBeforeSnap.direction;

      if (!ignoreWheelEvents) {
        swiper.mousewheel.lastEventBeforeSnap = undefined;

        if (swiper.params.loop) {
          swiper.loopFix();
        }

        var position = swiper.getTranslate() + delta * params.sensitivity;
        var wasBeginning = swiper.isBeginning;
        var wasEnd = swiper.isEnd;
        if (position >= swiper.minTranslate()) position = swiper.minTranslate();
        if (position <= swiper.maxTranslate()) position = swiper.maxTranslate();
        swiper.setTransition(0);
        swiper.setTranslate(position);
        swiper.updateProgress();
        swiper.updateActiveIndex();
        swiper.updateSlidesClasses();

        if (!wasBeginning && swiper.isBeginning || !wasEnd && swiper.isEnd) {
          swiper.updateSlidesClasses();
        }

        if (swiper.params.freeModeSticky) {
          // When wheel scrolling starts with sticky (aka snap) enabled, then detect
          // the end of a momentum scroll by storing recent (N=15?) wheel events.
          // 1. do all N events have decreasing or same (absolute value) delta?
          // 2. did all N events arrive in the last M (M=500?) msecs?
          // 3. does the earliest event have an (absolute value) delta that's
          //    at least P (P=1?) larger than the most recent event's delta?
          // 4. does the latest event have a delta that's smaller than Q (Q=6?) pixels?
          // If 1-4 are "yes" then we're near the end of a momuntum scroll deceleration.
          // Snap immediately and ignore remaining wheel events in this scroll.
          // See comment above for "remaining wheel events in this scroll" determination.
          // If 1-4 aren't satisfied, then wait to snap until 500ms after the last event.
          clearTimeout(swiper.mousewheel.timeout);
          swiper.mousewheel.timeout = undefined;
          var _recentWheelEvents = swiper.mousewheel.recentWheelEvents;

          if (_recentWheelEvents.length >= 15) {
            _recentWheelEvents.shift(); // only store the last N events

          }

          var _prevEvent = _recentWheelEvents.length ? _recentWheelEvents[_recentWheelEvents.length - 1] : undefined;

          var firstEvent = _recentWheelEvents[0];

          _recentWheelEvents.push(_newEvent);

          if (_prevEvent && (_newEvent.delta > _prevEvent.delta || _newEvent.direction !== _prevEvent.direction)) {
            // Increasing or reverse-sign delta means the user started scrolling again. Clear the wheel event log.
            _recentWheelEvents.splice(0);
          } else if (_recentWheelEvents.length >= 15 && _newEvent.time - firstEvent.time < 500 && firstEvent.delta - _newEvent.delta >= 1 && _newEvent.delta <= 6) {
            // We're at the end of the deceleration of a momentum scroll, so there's no need
            // to wait for more events. Snap ASAP on the next tick.
            // Also, because there's some remaining momentum we'll bias the snap in the
            // direction of the ongoing scroll because it's better UX for the scroll to snap
            // in the same direction as the scroll instead of reversing to snap.  Therefore,
            // if it's already scrolled more than 20% in the current direction, keep going.
            var snapToThreshold = delta > 0 ? 0.8 : 0.2;
            swiper.mousewheel.lastEventBeforeSnap = _newEvent;

            _recentWheelEvents.splice(0);

            swiper.mousewheel.timeout = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["nextTick"])(function () {
              swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);
            }, 0); // no delay; move on next tick
          }

          if (!swiper.mousewheel.timeout) {
            // if we get here, then we haven't detected the end of a momentum scroll, so
            // we'll consider a scroll "complete" when there haven't been any wheel events
            // for 500ms.
            swiper.mousewheel.timeout = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["nextTick"])(function () {
              var snapToThreshold = 0.5;
              swiper.mousewheel.lastEventBeforeSnap = _newEvent;

              _recentWheelEvents.splice(0);

              swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);
            }, 500);
          }
        } // Emit event


        if (!ignoreWheelEvents) swiper.emit('scroll', e); // Stop autoplay

        if (swiper.params.autoplay && swiper.params.autoplayDisableOnInteraction) swiper.autoplay.stop(); // Return page scroll on edge positions

        if (position === swiper.minTranslate() || position === swiper.maxTranslate()) return true;
      }
    }

    if (e.preventDefault) e.preventDefault();else e.returnValue = false;
    return false;
  },
  animateSlider: function animateSlider(newEvent) {
    var swiper = this;
    var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();

    if (this.params.mousewheel.thresholdDelta && newEvent.delta < this.params.mousewheel.thresholdDelta) {
      // Prevent if delta of wheel scroll delta is below configured threshold
      return false;
    }

    if (this.params.mousewheel.thresholdTime && Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["now"])() - swiper.mousewheel.lastScrollTime < this.params.mousewheel.thresholdTime) {
      // Prevent if time between scrolls is below configured threshold
      return false;
    } // If the movement is NOT big enough and
    // if the last time the user scrolled was too close to the current one (avoid continuously triggering the slider):
    //   Don't go any further (avoid insignificant scroll movement).


    if (newEvent.delta >= 6 && Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["now"])() - swiper.mousewheel.lastScrollTime < 60) {
      // Return false as a default
      return true;
    } // If user is scrolling towards the end:
    //   If the slider hasn't hit the latest slide or
    //   if the slider is a loop and
    //   if the slider isn't moving right now:
    //     Go to next slide and
    //     emit a scroll event.
    // Else (the user is scrolling towards the beginning) and
    // if the slider hasn't hit the first slide or
    // if the slider is a loop and
    // if the slider isn't moving right now:
    //   Go to prev slide and
    //   emit a scroll event.


    if (newEvent.direction < 0) {
      if ((!swiper.isEnd || swiper.params.loop) && !swiper.animating) {
        swiper.slideNext();
        swiper.emit('scroll', newEvent.raw);
      }
    } else if ((!swiper.isBeginning || swiper.params.loop) && !swiper.animating) {
      swiper.slidePrev();
      swiper.emit('scroll', newEvent.raw);
    } // If you got here is because an animation has been triggered so store the current time


    swiper.mousewheel.lastScrollTime = new window.Date().getTime(); // Return false as a default

    return false;
  },
  releaseScroll: function releaseScroll(newEvent) {
    var swiper = this;
    var params = swiper.params.mousewheel;

    if (newEvent.direction < 0) {
      if (swiper.isEnd && !swiper.params.loop && params.releaseOnEdges) {
        // Return true to animate scroll on edges
        return true;
      }
    } else if (swiper.isBeginning && !swiper.params.loop && params.releaseOnEdges) {
      // Return true to animate scroll on edges
      return true;
    }

    return false;
  },
  enable: function enable() {
    var swiper = this;
    var event = Mousewheel.event();

    if (swiper.params.cssMode) {
      swiper.wrapperEl.removeEventListener(event, swiper.mousewheel.handle);
      return true;
    }

    if (!event) return false;
    if (swiper.mousewheel.enabled) return false;
    var target = swiper.$el;

    if (swiper.params.mousewheel.eventsTarget !== 'container') {
      target = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_1__["default"])(swiper.params.mousewheel.eventsTarget);
    }

    target.on('mouseenter', swiper.mousewheel.handleMouseEnter);
    target.on('mouseleave', swiper.mousewheel.handleMouseLeave);
    target.on(event, swiper.mousewheel.handle);
    swiper.mousewheel.enabled = true;
    return true;
  },
  disable: function disable() {
    var swiper = this;
    var event = Mousewheel.event();

    if (swiper.params.cssMode) {
      swiper.wrapperEl.addEventListener(event, swiper.mousewheel.handle);
      return true;
    }

    if (!event) return false;
    if (!swiper.mousewheel.enabled) return false;
    var target = swiper.$el;

    if (swiper.params.mousewheel.eventsTarget !== 'container') {
      target = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_1__["default"])(swiper.params.mousewheel.eventsTarget);
    }

    target.off(event, swiper.mousewheel.handle);
    swiper.mousewheel.enabled = false;
    return true;
  }
};
/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'mousewheel',
  params: {
    mousewheel: {
      enabled: false,
      releaseOnEdges: false,
      invert: false,
      forceToAxis: false,
      sensitivity: 1,
      eventsTarget: 'container',
      thresholdDelta: null,
      thresholdTime: null
    }
  },
  create: function create() {
    var swiper = this;
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["bindModuleMethods"])(swiper, {
      mousewheel: {
        enabled: false,
        lastScrollTime: Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["now"])(),
        lastEventBeforeSnap: undefined,
        recentWheelEvents: [],
        enable: Mousewheel.enable,
        disable: Mousewheel.disable,
        handle: Mousewheel.handle,
        handleMouseEnter: Mousewheel.handleMouseEnter,
        handleMouseLeave: Mousewheel.handleMouseLeave,
        animateSlider: Mousewheel.animateSlider,
        releaseScroll: Mousewheel.releaseScroll
      }
    });
  },
  on: {
    init: function init(swiper) {
      if (!swiper.params.mousewheel.enabled && swiper.params.cssMode) {
        swiper.mousewheel.disable();
      }

      if (swiper.params.mousewheel.enabled) swiper.mousewheel.enable();
    },
    destroy: function destroy(swiper) {
      if (swiper.params.cssMode) {
        swiper.mousewheel.enable();
      }

      if (swiper.mousewheel.enabled) swiper.mousewheel.disable();
    }
  }
});

/***/ }),

/***/ "./node_modules/swiper/esm/components/navigation/navigation.js":
/*!*********************************************************************!*\
  !*** ./node_modules/swiper/esm/components/navigation/navigation.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/dom */ "./node_modules/swiper/esm/utils/dom.js");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/utils */ "./node_modules/swiper/esm/utils/utils.js");
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}



var Navigation = {
  update: function update() {
    // Update Navigation Buttons
    var swiper = this;
    var params = swiper.params.navigation;
    if (swiper.params.loop) return;
    var _swiper$navigation = swiper.navigation,
        $nextEl = _swiper$navigation.$nextEl,
        $prevEl = _swiper$navigation.$prevEl;

    if ($prevEl && $prevEl.length > 0) {
      if (swiper.isBeginning) {
        $prevEl.addClass(params.disabledClass);
      } else {
        $prevEl.removeClass(params.disabledClass);
      }

      $prevEl[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
    }

    if ($nextEl && $nextEl.length > 0) {
      if (swiper.isEnd) {
        $nextEl.addClass(params.disabledClass);
      } else {
        $nextEl.removeClass(params.disabledClass);
      }

      $nextEl[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
    }
  },
  onPrevClick: function onPrevClick(e) {
    var swiper = this;
    e.preventDefault();
    if (swiper.isBeginning && !swiper.params.loop) return;
    swiper.slidePrev();
  },
  onNextClick: function onNextClick(e) {
    var swiper = this;
    e.preventDefault();
    if (swiper.isEnd && !swiper.params.loop) return;
    swiper.slideNext();
  },
  init: function init() {
    var swiper = this;
    var params = swiper.params.navigation;
    if (!(params.nextEl || params.prevEl)) return;
    var $nextEl;
    var $prevEl;

    if (params.nextEl) {
      $nextEl = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])(params.nextEl);

      if (swiper.params.uniqueNavElements && typeof params.nextEl === 'string' && $nextEl.length > 1 && swiper.$el.find(params.nextEl).length === 1) {
        $nextEl = swiper.$el.find(params.nextEl);
      }
    }

    if (params.prevEl) {
      $prevEl = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])(params.prevEl);

      if (swiper.params.uniqueNavElements && typeof params.prevEl === 'string' && $prevEl.length > 1 && swiper.$el.find(params.prevEl).length === 1) {
        $prevEl = swiper.$el.find(params.prevEl);
      }
    }

    if ($nextEl && $nextEl.length > 0) {
      $nextEl.on('click', swiper.navigation.onNextClick);
    }

    if ($prevEl && $prevEl.length > 0) {
      $prevEl.on('click', swiper.navigation.onPrevClick);
    }

    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["extend"])(swiper.navigation, {
      $nextEl: $nextEl,
      nextEl: $nextEl && $nextEl[0],
      $prevEl: $prevEl,
      prevEl: $prevEl && $prevEl[0]
    });
  },
  destroy: function destroy() {
    var swiper = this;
    var _swiper$navigation2 = swiper.navigation,
        $nextEl = _swiper$navigation2.$nextEl,
        $prevEl = _swiper$navigation2.$prevEl;

    if ($nextEl && $nextEl.length) {
      $nextEl.off('click', swiper.navigation.onNextClick);
      $nextEl.removeClass(swiper.params.navigation.disabledClass);
    }

    if ($prevEl && $prevEl.length) {
      $prevEl.off('click', swiper.navigation.onPrevClick);
      $prevEl.removeClass(swiper.params.navigation.disabledClass);
    }
  }
};
/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'navigation',
  params: {
    navigation: {
      nextEl: null,
      prevEl: null,
      hideOnClick: false,
      disabledClass: 'swiper-button-disabled',
      hiddenClass: 'swiper-button-hidden',
      lockClass: 'swiper-button-lock'
    }
  },
  create: function create() {
    var swiper = this;
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["bindModuleMethods"])(swiper, {
      navigation: _extends({}, Navigation)
    });
  },
  on: {
    init: function init(swiper) {
      swiper.navigation.init();
      swiper.navigation.update();
    },
    toEdge: function toEdge(swiper) {
      swiper.navigation.update();
    },
    fromEdge: function fromEdge(swiper) {
      swiper.navigation.update();
    },
    destroy: function destroy(swiper) {
      swiper.navigation.destroy();
    },
    click: function click(swiper, e) {
      var _swiper$navigation3 = swiper.navigation,
          $nextEl = _swiper$navigation3.$nextEl,
          $prevEl = _swiper$navigation3.$prevEl;

      if (swiper.params.navigation.hideOnClick && !Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])(e.target).is($prevEl) && !Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])(e.target).is($nextEl)) {
        var isHidden;

        if ($nextEl) {
          isHidden = $nextEl.hasClass(swiper.params.navigation.hiddenClass);
        } else if ($prevEl) {
          isHidden = $prevEl.hasClass(swiper.params.navigation.hiddenClass);
        }

        if (isHidden === true) {
          swiper.emit('navigationShow');
        } else {
          swiper.emit('navigationHide');
        }

        if ($nextEl) {
          $nextEl.toggleClass(swiper.params.navigation.hiddenClass);
        }

        if ($prevEl) {
          $prevEl.toggleClass(swiper.params.navigation.hiddenClass);
        }
      }
    }
  }
});

/***/ }),

/***/ "./node_modules/swiper/esm/components/pagination/pagination.js":
/*!*********************************************************************!*\
  !*** ./node_modules/swiper/esm/components/pagination/pagination.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/dom */ "./node_modules/swiper/esm/utils/dom.js");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/utils */ "./node_modules/swiper/esm/utils/utils.js");
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}



var Pagination = {
  update: function update() {
    // Render || Update Pagination bullets/items
    var swiper = this;
    var rtl = swiper.rtl;
    var params = swiper.params.pagination;
    if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) return;
    var slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;
    var $el = swiper.pagination.$el; // Current/Total

    var current;
    var total = swiper.params.loop ? Math.ceil((slidesLength - swiper.loopedSlides * 2) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;

    if (swiper.params.loop) {
      current = Math.ceil((swiper.activeIndex - swiper.loopedSlides) / swiper.params.slidesPerGroup);

      if (current > slidesLength - 1 - swiper.loopedSlides * 2) {
        current -= slidesLength - swiper.loopedSlides * 2;
      }

      if (current > total - 1) current -= total;
      if (current < 0 && swiper.params.paginationType !== 'bullets') current = total + current;
    } else if (typeof swiper.snapIndex !== 'undefined') {
      current = swiper.snapIndex;
    } else {
      current = swiper.activeIndex || 0;
    } // Types


    if (params.type === 'bullets' && swiper.pagination.bullets && swiper.pagination.bullets.length > 0) {
      var bullets = swiper.pagination.bullets;
      var firstIndex;
      var lastIndex;
      var midIndex;

      if (params.dynamicBullets) {
        swiper.pagination.bulletSize = bullets.eq(0)[swiper.isHorizontal() ? 'outerWidth' : 'outerHeight'](true);
        $el.css(swiper.isHorizontal() ? 'width' : 'height', swiper.pagination.bulletSize * (params.dynamicMainBullets + 4) + "px");

        if (params.dynamicMainBullets > 1 && swiper.previousIndex !== undefined) {
          swiper.pagination.dynamicBulletIndex += current - swiper.previousIndex;

          if (swiper.pagination.dynamicBulletIndex > params.dynamicMainBullets - 1) {
            swiper.pagination.dynamicBulletIndex = params.dynamicMainBullets - 1;
          } else if (swiper.pagination.dynamicBulletIndex < 0) {
            swiper.pagination.dynamicBulletIndex = 0;
          }
        }

        firstIndex = current - swiper.pagination.dynamicBulletIndex;
        lastIndex = firstIndex + (Math.min(bullets.length, params.dynamicMainBullets) - 1);
        midIndex = (lastIndex + firstIndex) / 2;
      }

      bullets.removeClass(params.bulletActiveClass + " " + params.bulletActiveClass + "-next " + params.bulletActiveClass + "-next-next " + params.bulletActiveClass + "-prev " + params.bulletActiveClass + "-prev-prev " + params.bulletActiveClass + "-main");

      if ($el.length > 1) {
        bullets.each(function (bullet) {
          var $bullet = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])(bullet);
          var bulletIndex = $bullet.index();

          if (bulletIndex === current) {
            $bullet.addClass(params.bulletActiveClass);
          }

          if (params.dynamicBullets) {
            if (bulletIndex >= firstIndex && bulletIndex <= lastIndex) {
              $bullet.addClass(params.bulletActiveClass + "-main");
            }

            if (bulletIndex === firstIndex) {
              $bullet.prev().addClass(params.bulletActiveClass + "-prev").prev().addClass(params.bulletActiveClass + "-prev-prev");
            }

            if (bulletIndex === lastIndex) {
              $bullet.next().addClass(params.bulletActiveClass + "-next").next().addClass(params.bulletActiveClass + "-next-next");
            }
          }
        });
      } else {
        var $bullet = bullets.eq(current);
        var bulletIndex = $bullet.index();
        $bullet.addClass(params.bulletActiveClass);

        if (params.dynamicBullets) {
          var $firstDisplayedBullet = bullets.eq(firstIndex);
          var $lastDisplayedBullet = bullets.eq(lastIndex);

          for (var i = firstIndex; i <= lastIndex; i += 1) {
            bullets.eq(i).addClass(params.bulletActiveClass + "-main");
          }

          if (swiper.params.loop) {
            if (bulletIndex >= bullets.length - params.dynamicMainBullets) {
              for (var _i = params.dynamicMainBullets; _i >= 0; _i -= 1) {
                bullets.eq(bullets.length - _i).addClass(params.bulletActiveClass + "-main");
              }

              bullets.eq(bullets.length - params.dynamicMainBullets - 1).addClass(params.bulletActiveClass + "-prev");
            } else {
              $firstDisplayedBullet.prev().addClass(params.bulletActiveClass + "-prev").prev().addClass(params.bulletActiveClass + "-prev-prev");
              $lastDisplayedBullet.next().addClass(params.bulletActiveClass + "-next").next().addClass(params.bulletActiveClass + "-next-next");
            }
          } else {
            $firstDisplayedBullet.prev().addClass(params.bulletActiveClass + "-prev").prev().addClass(params.bulletActiveClass + "-prev-prev");
            $lastDisplayedBullet.next().addClass(params.bulletActiveClass + "-next").next().addClass(params.bulletActiveClass + "-next-next");
          }
        }
      }

      if (params.dynamicBullets) {
        var dynamicBulletsLength = Math.min(bullets.length, params.dynamicMainBullets + 4);
        var bulletsOffset = (swiper.pagination.bulletSize * dynamicBulletsLength - swiper.pagination.bulletSize) / 2 - midIndex * swiper.pagination.bulletSize;
        var offsetProp = rtl ? 'right' : 'left';
        bullets.css(swiper.isHorizontal() ? offsetProp : 'top', bulletsOffset + "px");
      }
    }

    if (params.type === 'fraction') {
      $el.find("." + params.currentClass).text(params.formatFractionCurrent(current + 1));
      $el.find("." + params.totalClass).text(params.formatFractionTotal(total));
    }

    if (params.type === 'progressbar') {
      var progressbarDirection;

      if (params.progressbarOpposite) {
        progressbarDirection = swiper.isHorizontal() ? 'vertical' : 'horizontal';
      } else {
        progressbarDirection = swiper.isHorizontal() ? 'horizontal' : 'vertical';
      }

      var scale = (current + 1) / total;
      var scaleX = 1;
      var scaleY = 1;

      if (progressbarDirection === 'horizontal') {
        scaleX = scale;
      } else {
        scaleY = scale;
      }

      $el.find("." + params.progressbarFillClass).transform("translate3d(0,0,0) scaleX(" + scaleX + ") scaleY(" + scaleY + ")").transition(swiper.params.speed);
    }

    if (params.type === 'custom' && params.renderCustom) {
      $el.html(params.renderCustom(swiper, current + 1, total));
      swiper.emit('paginationRender', $el[0]);
    } else {
      swiper.emit('paginationUpdate', $el[0]);
    }

    $el[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
  },
  render: function render() {
    // Render Container
    var swiper = this;
    var params = swiper.params.pagination;
    if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) return;
    var slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;
    var $el = swiper.pagination.$el;
    var paginationHTML = '';

    if (params.type === 'bullets') {
      var numberOfBullets = swiper.params.loop ? Math.ceil((slidesLength - swiper.loopedSlides * 2) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;

      for (var i = 0; i < numberOfBullets; i += 1) {
        if (params.renderBullet) {
          paginationHTML += params.renderBullet.call(swiper, i, params.bulletClass);
        } else {
          paginationHTML += "<" + params.bulletElement + " class=\"" + params.bulletClass + "\"></" + params.bulletElement + ">";
        }
      }

      $el.html(paginationHTML);
      swiper.pagination.bullets = $el.find("." + params.bulletClass);
    }

    if (params.type === 'fraction') {
      if (params.renderFraction) {
        paginationHTML = params.renderFraction.call(swiper, params.currentClass, params.totalClass);
      } else {
        paginationHTML = "<span class=\"" + params.currentClass + "\"></span>" + ' / ' + ("<span class=\"" + params.totalClass + "\"></span>");
      }

      $el.html(paginationHTML);
    }

    if (params.type === 'progressbar') {
      if (params.renderProgressbar) {
        paginationHTML = params.renderProgressbar.call(swiper, params.progressbarFillClass);
      } else {
        paginationHTML = "<span class=\"" + params.progressbarFillClass + "\"></span>";
      }

      $el.html(paginationHTML);
    }

    if (params.type !== 'custom') {
      swiper.emit('paginationRender', swiper.pagination.$el[0]);
    }
  },
  init: function init() {
    var swiper = this;
    var params = swiper.params.pagination;
    if (!params.el) return;
    var $el = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])(params.el);
    if ($el.length === 0) return;

    if (swiper.params.uniqueNavElements && typeof params.el === 'string' && $el.length > 1) {
      $el = swiper.$el.find(params.el);
    }

    if (params.type === 'bullets' && params.clickable) {
      $el.addClass(params.clickableClass);
    }

    $el.addClass(params.modifierClass + params.type);

    if (params.type === 'bullets' && params.dynamicBullets) {
      $el.addClass("" + params.modifierClass + params.type + "-dynamic");
      swiper.pagination.dynamicBulletIndex = 0;

      if (params.dynamicMainBullets < 1) {
        params.dynamicMainBullets = 1;
      }
    }

    if (params.type === 'progressbar' && params.progressbarOpposite) {
      $el.addClass(params.progressbarOppositeClass);
    }

    if (params.clickable) {
      $el.on('click', "." + params.bulletClass, function onClick(e) {
        e.preventDefault();
        var index = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])(this).index() * swiper.params.slidesPerGroup;
        if (swiper.params.loop) index += swiper.loopedSlides;
        swiper.slideTo(index);
      });
    }

    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["extend"])(swiper.pagination, {
      $el: $el,
      el: $el[0]
    });
  },
  destroy: function destroy() {
    var swiper = this;
    var params = swiper.params.pagination;
    if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) return;
    var $el = swiper.pagination.$el;
    $el.removeClass(params.hiddenClass);
    $el.removeClass(params.modifierClass + params.type);
    if (swiper.pagination.bullets) swiper.pagination.bullets.removeClass(params.bulletActiveClass);

    if (params.clickable) {
      $el.off('click', "." + params.bulletClass);
    }
  }
};
/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'pagination',
  params: {
    pagination: {
      el: null,
      bulletElement: 'span',
      clickable: false,
      hideOnClick: false,
      renderBullet: null,
      renderProgressbar: null,
      renderFraction: null,
      renderCustom: null,
      progressbarOpposite: false,
      type: 'bullets',
      // 'bullets' or 'progressbar' or 'fraction' or 'custom'
      dynamicBullets: false,
      dynamicMainBullets: 1,
      formatFractionCurrent: function formatFractionCurrent(number) {
        return number;
      },
      formatFractionTotal: function formatFractionTotal(number) {
        return number;
      },
      bulletClass: 'swiper-pagination-bullet',
      bulletActiveClass: 'swiper-pagination-bullet-active',
      modifierClass: 'swiper-pagination-',
      // NEW
      currentClass: 'swiper-pagination-current',
      totalClass: 'swiper-pagination-total',
      hiddenClass: 'swiper-pagination-hidden',
      progressbarFillClass: 'swiper-pagination-progressbar-fill',
      progressbarOppositeClass: 'swiper-pagination-progressbar-opposite',
      clickableClass: 'swiper-pagination-clickable',
      // NEW
      lockClass: 'swiper-pagination-lock'
    }
  },
  create: function create() {
    var swiper = this;
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["bindModuleMethods"])(swiper, {
      pagination: _extends({
        dynamicBulletIndex: 0
      }, Pagination)
    });
  },
  on: {
    init: function init(swiper) {
      swiper.pagination.init();
      swiper.pagination.render();
      swiper.pagination.update();
    },
    activeIndexChange: function activeIndexChange(swiper) {
      if (swiper.params.loop) {
        swiper.pagination.update();
      } else if (typeof swiper.snapIndex === 'undefined') {
        swiper.pagination.update();
      }
    },
    snapIndexChange: function snapIndexChange(swiper) {
      if (!swiper.params.loop) {
        swiper.pagination.update();
      }
    },
    slidesLengthChange: function slidesLengthChange(swiper) {
      if (swiper.params.loop) {
        swiper.pagination.render();
        swiper.pagination.update();
      }
    },
    snapGridLengthChange: function snapGridLengthChange(swiper) {
      if (!swiper.params.loop) {
        swiper.pagination.render();
        swiper.pagination.update();
      }
    },
    destroy: function destroy(swiper) {
      swiper.pagination.destroy();
    },
    click: function click(swiper, e) {
      if (swiper.params.pagination.el && swiper.params.pagination.hideOnClick && swiper.pagination.$el.length > 0 && !Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])(e.target).hasClass(swiper.params.pagination.bulletClass)) {
        var isHidden = swiper.pagination.$el.hasClass(swiper.params.pagination.hiddenClass);

        if (isHidden === true) {
          swiper.emit('paginationShow');
        } else {
          swiper.emit('paginationHide');
        }

        swiper.pagination.$el.toggleClass(swiper.params.pagination.hiddenClass);
      }
    }
  }
});

/***/ }),

/***/ "./node_modules/swiper/esm/components/parallax/parallax.js":
/*!*****************************************************************!*\
  !*** ./node_modules/swiper/esm/components/parallax/parallax.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/dom */ "./node_modules/swiper/esm/utils/dom.js");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/utils */ "./node_modules/swiper/esm/utils/utils.js");
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}



var Parallax = {
  setTransform: function setTransform(el, progress) {
    var swiper = this;
    var rtl = swiper.rtl;
    var $el = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])(el);
    var rtlFactor = rtl ? -1 : 1;
    var p = $el.attr('data-swiper-parallax') || '0';
    var x = $el.attr('data-swiper-parallax-x');
    var y = $el.attr('data-swiper-parallax-y');
    var scale = $el.attr('data-swiper-parallax-scale');
    var opacity = $el.attr('data-swiper-parallax-opacity');

    if (x || y) {
      x = x || '0';
      y = y || '0';
    } else if (swiper.isHorizontal()) {
      x = p;
      y = '0';
    } else {
      y = p;
      x = '0';
    }

    if (x.indexOf('%') >= 0) {
      x = parseInt(x, 10) * progress * rtlFactor + "%";
    } else {
      x = x * progress * rtlFactor + "px";
    }

    if (y.indexOf('%') >= 0) {
      y = parseInt(y, 10) * progress + "%";
    } else {
      y = y * progress + "px";
    }

    if (typeof opacity !== 'undefined' && opacity !== null) {
      var currentOpacity = opacity - (opacity - 1) * (1 - Math.abs(progress));
      $el[0].style.opacity = currentOpacity;
    }

    if (typeof scale === 'undefined' || scale === null) {
      $el.transform("translate3d(" + x + ", " + y + ", 0px)");
    } else {
      var currentScale = scale - (scale - 1) * (1 - Math.abs(progress));
      $el.transform("translate3d(" + x + ", " + y + ", 0px) scale(" + currentScale + ")");
    }
  },
  setTranslate: function setTranslate() {
    var swiper = this;
    var $el = swiper.$el,
        slides = swiper.slides,
        progress = swiper.progress,
        snapGrid = swiper.snapGrid;
    $el.children('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]').each(function (el) {
      swiper.parallax.setTransform(el, progress);
    });
    slides.each(function (slideEl, slideIndex) {
      var slideProgress = slideEl.progress;

      if (swiper.params.slidesPerGroup > 1 && swiper.params.slidesPerView !== 'auto') {
        slideProgress += Math.ceil(slideIndex / 2) - progress * (snapGrid.length - 1);
      }

      slideProgress = Math.min(Math.max(slideProgress, -1), 1);
      Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])(slideEl).find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]').each(function (el) {
        swiper.parallax.setTransform(el, slideProgress);
      });
    });
  },
  setTransition: function setTransition(duration) {
    if (duration === void 0) {
      duration = this.params.speed;
    }

    var swiper = this;
    var $el = swiper.$el;
    $el.find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]').each(function (parallaxEl) {
      var $parallaxEl = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])(parallaxEl);
      var parallaxDuration = parseInt($parallaxEl.attr('data-swiper-parallax-duration'), 10) || duration;
      if (duration === 0) parallaxDuration = 0;
      $parallaxEl.transition(parallaxDuration);
    });
  }
};
/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'parallax',
  params: {
    parallax: {
      enabled: false
    }
  },
  create: function create() {
    var swiper = this;
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["bindModuleMethods"])(swiper, {
      parallax: _extends({}, Parallax)
    });
  },
  on: {
    beforeInit: function beforeInit(swiper) {
      if (!swiper.params.parallax.enabled) return;
      swiper.params.watchSlidesProgress = true;
      swiper.originalParams.watchSlidesProgress = true;
    },
    init: function init(swiper) {
      if (!swiper.params.parallax.enabled) return;
      swiper.parallax.setTranslate();
    },
    setTranslate: function setTranslate(swiper) {
      if (!swiper.params.parallax.enabled) return;
      swiper.parallax.setTranslate();
    },
    setTransition: function setTransition(swiper, duration) {
      if (!swiper.params.parallax.enabled) return;
      swiper.parallax.setTransition(duration);
    }
  }
});

/***/ }),

/***/ "./node_modules/swiper/esm/components/scrollbar/scrollbar.js":
/*!*******************************************************************!*\
  !*** ./node_modules/swiper/esm/components/scrollbar/scrollbar.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");
/* harmony import */ var _utils_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/dom */ "./node_modules/swiper/esm/utils/dom.js");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/utils */ "./node_modules/swiper/esm/utils/utils.js");
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}




var Scrollbar = {
  setTranslate: function setTranslate() {
    var swiper = this;
    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
    var scrollbar = swiper.scrollbar,
        rtl = swiper.rtlTranslate,
        progress = swiper.progress;
    var dragSize = scrollbar.dragSize,
        trackSize = scrollbar.trackSize,
        $dragEl = scrollbar.$dragEl,
        $el = scrollbar.$el;
    var params = swiper.params.scrollbar;
    var newSize = dragSize;
    var newPos = (trackSize - dragSize) * progress;

    if (rtl) {
      newPos = -newPos;

      if (newPos > 0) {
        newSize = dragSize - newPos;
        newPos = 0;
      } else if (-newPos + dragSize > trackSize) {
        newSize = trackSize + newPos;
      }
    } else if (newPos < 0) {
      newSize = dragSize + newPos;
      newPos = 0;
    } else if (newPos + dragSize > trackSize) {
      newSize = trackSize - newPos;
    }

    if (swiper.isHorizontal()) {
      $dragEl.transform("translate3d(" + newPos + "px, 0, 0)");
      $dragEl[0].style.width = newSize + "px";
    } else {
      $dragEl.transform("translate3d(0px, " + newPos + "px, 0)");
      $dragEl[0].style.height = newSize + "px";
    }

    if (params.hide) {
      clearTimeout(swiper.scrollbar.timeout);
      $el[0].style.opacity = 1;
      swiper.scrollbar.timeout = setTimeout(function () {
        $el[0].style.opacity = 0;
        $el.transition(400);
      }, 1000);
    }
  },
  setTransition: function setTransition(duration) {
    var swiper = this;
    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
    swiper.scrollbar.$dragEl.transition(duration);
  },
  updateSize: function updateSize() {
    var swiper = this;
    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
    var scrollbar = swiper.scrollbar;
    var $dragEl = scrollbar.$dragEl,
        $el = scrollbar.$el;
    $dragEl[0].style.width = '';
    $dragEl[0].style.height = '';
    var trackSize = swiper.isHorizontal() ? $el[0].offsetWidth : $el[0].offsetHeight;
    var divider = swiper.size / swiper.virtualSize;
    var moveDivider = divider * (trackSize / swiper.size);
    var dragSize;

    if (swiper.params.scrollbar.dragSize === 'auto') {
      dragSize = trackSize * divider;
    } else {
      dragSize = parseInt(swiper.params.scrollbar.dragSize, 10);
    }

    if (swiper.isHorizontal()) {
      $dragEl[0].style.width = dragSize + "px";
    } else {
      $dragEl[0].style.height = dragSize + "px";
    }

    if (divider >= 1) {
      $el[0].style.display = 'none';
    } else {
      $el[0].style.display = '';
    }

    if (swiper.params.scrollbar.hide) {
      $el[0].style.opacity = 0;
    }

    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["extend"])(scrollbar, {
      trackSize: trackSize,
      divider: divider,
      moveDivider: moveDivider,
      dragSize: dragSize
    });
    scrollbar.$el[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](swiper.params.scrollbar.lockClass);
  },
  getPointerPosition: function getPointerPosition(e) {
    var swiper = this;

    if (swiper.isHorizontal()) {
      return e.type === 'touchstart' || e.type === 'touchmove' ? e.targetTouches[0].clientX : e.clientX;
    }

    return e.type === 'touchstart' || e.type === 'touchmove' ? e.targetTouches[0].clientY : e.clientY;
  },
  setDragPosition: function setDragPosition(e) {
    var swiper = this;
    var scrollbar = swiper.scrollbar,
        rtl = swiper.rtlTranslate;
    var $el = scrollbar.$el,
        dragSize = scrollbar.dragSize,
        trackSize = scrollbar.trackSize,
        dragStartPos = scrollbar.dragStartPos;
    var positionRatio;
    positionRatio = (scrollbar.getPointerPosition(e) - $el.offset()[swiper.isHorizontal() ? 'left' : 'top'] - (dragStartPos !== null ? dragStartPos : dragSize / 2)) / (trackSize - dragSize);
    positionRatio = Math.max(Math.min(positionRatio, 1), 0);

    if (rtl) {
      positionRatio = 1 - positionRatio;
    }

    var position = swiper.minTranslate() + (swiper.maxTranslate() - swiper.minTranslate()) * positionRatio;
    swiper.updateProgress(position);
    swiper.setTranslate(position);
    swiper.updateActiveIndex();
    swiper.updateSlidesClasses();
  },
  onDragStart: function onDragStart(e) {
    var swiper = this;
    var params = swiper.params.scrollbar;
    var scrollbar = swiper.scrollbar,
        $wrapperEl = swiper.$wrapperEl;
    var $el = scrollbar.$el,
        $dragEl = scrollbar.$dragEl;
    swiper.scrollbar.isTouched = true;
    swiper.scrollbar.dragStartPos = e.target === $dragEl[0] || e.target === $dragEl ? scrollbar.getPointerPosition(e) - e.target.getBoundingClientRect()[swiper.isHorizontal() ? 'left' : 'top'] : null;
    e.preventDefault();
    e.stopPropagation();
    $wrapperEl.transition(100);
    $dragEl.transition(100);
    scrollbar.setDragPosition(e);
    clearTimeout(swiper.scrollbar.dragTimeout);
    $el.transition(0);

    if (params.hide) {
      $el.css('opacity', 1);
    }

    if (swiper.params.cssMode) {
      swiper.$wrapperEl.css('scroll-snap-type', 'none');
    }

    swiper.emit('scrollbarDragStart', e);
  },
  onDragMove: function onDragMove(e) {
    var swiper = this;
    var scrollbar = swiper.scrollbar,
        $wrapperEl = swiper.$wrapperEl;
    var $el = scrollbar.$el,
        $dragEl = scrollbar.$dragEl;
    if (!swiper.scrollbar.isTouched) return;
    if (e.preventDefault) e.preventDefault();else e.returnValue = false;
    scrollbar.setDragPosition(e);
    $wrapperEl.transition(0);
    $el.transition(0);
    $dragEl.transition(0);
    swiper.emit('scrollbarDragMove', e);
  },
  onDragEnd: function onDragEnd(e) {
    var swiper = this;
    var params = swiper.params.scrollbar;
    var scrollbar = swiper.scrollbar,
        $wrapperEl = swiper.$wrapperEl;
    var $el = scrollbar.$el;
    if (!swiper.scrollbar.isTouched) return;
    swiper.scrollbar.isTouched = false;

    if (swiper.params.cssMode) {
      swiper.$wrapperEl.css('scroll-snap-type', '');
      $wrapperEl.transition('');
    }

    if (params.hide) {
      clearTimeout(swiper.scrollbar.dragTimeout);
      swiper.scrollbar.dragTimeout = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["nextTick"])(function () {
        $el.css('opacity', 0);
        $el.transition(400);
      }, 1000);
    }

    swiper.emit('scrollbarDragEnd', e);

    if (params.snapOnRelease) {
      swiper.slideToClosest();
    }
  },
  enableDraggable: function enableDraggable() {
    var swiper = this;
    if (!swiper.params.scrollbar.el) return;
    var document = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getDocument"])();
    var scrollbar = swiper.scrollbar,
        touchEventsTouch = swiper.touchEventsTouch,
        touchEventsDesktop = swiper.touchEventsDesktop,
        params = swiper.params,
        support = swiper.support;
    var $el = scrollbar.$el;
    var target = $el[0];
    var activeListener = support.passiveListener && params.passiveListeners ? {
      passive: false,
      capture: false
    } : false;
    var passiveListener = support.passiveListener && params.passiveListeners ? {
      passive: true,
      capture: false
    } : false;

    if (!support.touch) {
      target.addEventListener(touchEventsDesktop.start, swiper.scrollbar.onDragStart, activeListener);
      document.addEventListener(touchEventsDesktop.move, swiper.scrollbar.onDragMove, activeListener);
      document.addEventListener(touchEventsDesktop.end, swiper.scrollbar.onDragEnd, passiveListener);
    } else {
      target.addEventListener(touchEventsTouch.start, swiper.scrollbar.onDragStart, activeListener);
      target.addEventListener(touchEventsTouch.move, swiper.scrollbar.onDragMove, activeListener);
      target.addEventListener(touchEventsTouch.end, swiper.scrollbar.onDragEnd, passiveListener);
    }
  },
  disableDraggable: function disableDraggable() {
    var swiper = this;
    if (!swiper.params.scrollbar.el) return;
    var document = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getDocument"])();
    var scrollbar = swiper.scrollbar,
        touchEventsTouch = swiper.touchEventsTouch,
        touchEventsDesktop = swiper.touchEventsDesktop,
        params = swiper.params,
        support = swiper.support;
    var $el = scrollbar.$el;
    var target = $el[0];
    var activeListener = support.passiveListener && params.passiveListeners ? {
      passive: false,
      capture: false
    } : false;
    var passiveListener = support.passiveListener && params.passiveListeners ? {
      passive: true,
      capture: false
    } : false;

    if (!support.touch) {
      target.removeEventListener(touchEventsDesktop.start, swiper.scrollbar.onDragStart, activeListener);
      document.removeEventListener(touchEventsDesktop.move, swiper.scrollbar.onDragMove, activeListener);
      document.removeEventListener(touchEventsDesktop.end, swiper.scrollbar.onDragEnd, passiveListener);
    } else {
      target.removeEventListener(touchEventsTouch.start, swiper.scrollbar.onDragStart, activeListener);
      target.removeEventListener(touchEventsTouch.move, swiper.scrollbar.onDragMove, activeListener);
      target.removeEventListener(touchEventsTouch.end, swiper.scrollbar.onDragEnd, passiveListener);
    }
  },
  init: function init() {
    var swiper = this;
    if (!swiper.params.scrollbar.el) return;
    var scrollbar = swiper.scrollbar,
        $swiperEl = swiper.$el;
    var params = swiper.params.scrollbar;
    var $el = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_1__["default"])(params.el);

    if (swiper.params.uniqueNavElements && typeof params.el === 'string' && $el.length > 1 && $swiperEl.find(params.el).length === 1) {
      $el = $swiperEl.find(params.el);
    }

    var $dragEl = $el.find("." + swiper.params.scrollbar.dragClass);

    if ($dragEl.length === 0) {
      $dragEl = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_1__["default"])("<div class=\"" + swiper.params.scrollbar.dragClass + "\"></div>");
      $el.append($dragEl);
    }

    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["extend"])(scrollbar, {
      $el: $el,
      el: $el[0],
      $dragEl: $dragEl,
      dragEl: $dragEl[0]
    });

    if (params.draggable) {
      scrollbar.enableDraggable();
    }
  },
  destroy: function destroy() {
    var swiper = this;
    swiper.scrollbar.disableDraggable();
  }
};
/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'scrollbar',
  params: {
    scrollbar: {
      el: null,
      dragSize: 'auto',
      hide: false,
      draggable: false,
      snapOnRelease: true,
      lockClass: 'swiper-scrollbar-lock',
      dragClass: 'swiper-scrollbar-drag'
    }
  },
  create: function create() {
    var swiper = this;
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["bindModuleMethods"])(swiper, {
      scrollbar: _extends({
        isTouched: false,
        timeout: null,
        dragTimeout: null
      }, Scrollbar)
    });
  },
  on: {
    init: function init(swiper) {
      swiper.scrollbar.init();
      swiper.scrollbar.updateSize();
      swiper.scrollbar.setTranslate();
    },
    update: function update(swiper) {
      swiper.scrollbar.updateSize();
    },
    resize: function resize(swiper) {
      swiper.scrollbar.updateSize();
    },
    observerUpdate: function observerUpdate(swiper) {
      swiper.scrollbar.updateSize();
    },
    setTranslate: function setTranslate(swiper) {
      swiper.scrollbar.setTranslate();
    },
    setTransition: function setTransition(swiper, duration) {
      swiper.scrollbar.setTransition(duration);
    },
    destroy: function destroy(swiper) {
      swiper.scrollbar.destroy();
    }
  }
});

/***/ }),

/***/ "./node_modules/swiper/esm/components/thumbs/thumbs.js":
/*!*************************************************************!*\
  !*** ./node_modules/swiper/esm/components/thumbs/thumbs.js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/utils */ "./node_modules/swiper/esm/utils/utils.js");
/* harmony import */ var _utils_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/dom */ "./node_modules/swiper/esm/utils/dom.js");
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}



var Thumbs = {
  init: function init() {
    var swiper = this;
    var thumbsParams = swiper.params.thumbs;
    if (swiper.thumbs.initialized) return false;
    swiper.thumbs.initialized = true;
    var SwiperClass = swiper.constructor;

    if (thumbsParams.swiper instanceof SwiperClass) {
      swiper.thumbs.swiper = thumbsParams.swiper;
      Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["extend"])(swiper.thumbs.swiper.originalParams, {
        watchSlidesProgress: true,
        slideToClickedSlide: false
      });
      Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["extend"])(swiper.thumbs.swiper.params, {
        watchSlidesProgress: true,
        slideToClickedSlide: false
      });
    } else if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isObject"])(thumbsParams.swiper)) {
      swiper.thumbs.swiper = new SwiperClass(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, thumbsParams.swiper, {
        watchSlidesVisibility: true,
        watchSlidesProgress: true,
        slideToClickedSlide: false
      }));
      swiper.thumbs.swiperCreated = true;
    }

    swiper.thumbs.swiper.$el.addClass(swiper.params.thumbs.thumbsContainerClass);
    swiper.thumbs.swiper.on('tap', swiper.thumbs.onThumbClick);
    return true;
  },
  onThumbClick: function onThumbClick() {
    var swiper = this;
    var thumbsSwiper = swiper.thumbs.swiper;
    if (!thumbsSwiper) return;
    var clickedIndex = thumbsSwiper.clickedIndex;
    var clickedSlide = thumbsSwiper.clickedSlide;
    if (clickedSlide && Object(_utils_dom__WEBPACK_IMPORTED_MODULE_1__["default"])(clickedSlide).hasClass(swiper.params.thumbs.slideThumbActiveClass)) return;
    if (typeof clickedIndex === 'undefined' || clickedIndex === null) return;
    var slideToIndex;

    if (thumbsSwiper.params.loop) {
      slideToIndex = parseInt(Object(_utils_dom__WEBPACK_IMPORTED_MODULE_1__["default"])(thumbsSwiper.clickedSlide).attr('data-swiper-slide-index'), 10);
    } else {
      slideToIndex = clickedIndex;
    }

    if (swiper.params.loop) {
      var currentIndex = swiper.activeIndex;

      if (swiper.slides.eq(currentIndex).hasClass(swiper.params.slideDuplicateClass)) {
        swiper.loopFix(); // eslint-disable-next-line

        swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
        currentIndex = swiper.activeIndex;
      }

      var prevIndex = swiper.slides.eq(currentIndex).prevAll("[data-swiper-slide-index=\"" + slideToIndex + "\"]").eq(0).index();
      var nextIndex = swiper.slides.eq(currentIndex).nextAll("[data-swiper-slide-index=\"" + slideToIndex + "\"]").eq(0).index();
      if (typeof prevIndex === 'undefined') slideToIndex = nextIndex;else if (typeof nextIndex === 'undefined') slideToIndex = prevIndex;else if (nextIndex - currentIndex < currentIndex - prevIndex) slideToIndex = nextIndex;else slideToIndex = prevIndex;
    }

    swiper.slideTo(slideToIndex);
  },
  update: function update(initial) {
    var swiper = this;
    var thumbsSwiper = swiper.thumbs.swiper;
    if (!thumbsSwiper) return;
    var slidesPerView = thumbsSwiper.params.slidesPerView === 'auto' ? thumbsSwiper.slidesPerViewDynamic() : thumbsSwiper.params.slidesPerView;
    var autoScrollOffset = swiper.params.thumbs.autoScrollOffset;
    var useOffset = autoScrollOffset && !thumbsSwiper.params.loop;

    if (swiper.realIndex !== thumbsSwiper.realIndex || useOffset) {
      var currentThumbsIndex = thumbsSwiper.activeIndex;
      var newThumbsIndex;
      var direction;

      if (thumbsSwiper.params.loop) {
        if (thumbsSwiper.slides.eq(currentThumbsIndex).hasClass(thumbsSwiper.params.slideDuplicateClass)) {
          thumbsSwiper.loopFix(); // eslint-disable-next-line

          thumbsSwiper._clientLeft = thumbsSwiper.$wrapperEl[0].clientLeft;
          currentThumbsIndex = thumbsSwiper.activeIndex;
        } // Find actual thumbs index to slide to


        var prevThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).prevAll("[data-swiper-slide-index=\"" + swiper.realIndex + "\"]").eq(0).index();
        var nextThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).nextAll("[data-swiper-slide-index=\"" + swiper.realIndex + "\"]").eq(0).index();
        if (typeof prevThumbsIndex === 'undefined') newThumbsIndex = nextThumbsIndex;else if (typeof nextThumbsIndex === 'undefined') newThumbsIndex = prevThumbsIndex;else if (nextThumbsIndex - currentThumbsIndex === currentThumbsIndex - prevThumbsIndex) newThumbsIndex = currentThumbsIndex;else if (nextThumbsIndex - currentThumbsIndex < currentThumbsIndex - prevThumbsIndex) newThumbsIndex = nextThumbsIndex;else newThumbsIndex = prevThumbsIndex;
        direction = swiper.activeIndex > swiper.previousIndex ? 'next' : 'prev';
      } else {
        newThumbsIndex = swiper.realIndex;
        direction = newThumbsIndex > swiper.previousIndex ? 'next' : 'prev';
      }

      if (useOffset) {
        newThumbsIndex += direction === 'next' ? autoScrollOffset : -1 * autoScrollOffset;
      }

      if (thumbsSwiper.visibleSlidesIndexes && thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0) {
        if (thumbsSwiper.params.centeredSlides) {
          if (newThumbsIndex > currentThumbsIndex) {
            newThumbsIndex = newThumbsIndex - Math.floor(slidesPerView / 2) + 1;
          } else {
            newThumbsIndex = newThumbsIndex + Math.floor(slidesPerView / 2) - 1;
          }
        } else if (newThumbsIndex > currentThumbsIndex) {
          newThumbsIndex = newThumbsIndex - slidesPerView + 1;
        }

        thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : undefined);
      }
    } // Activate thumbs


    var thumbsToActivate = 1;
    var thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;

    if (swiper.params.slidesPerView > 1 && !swiper.params.centeredSlides) {
      thumbsToActivate = swiper.params.slidesPerView;
    }

    if (!swiper.params.thumbs.multipleActiveThumbs) {
      thumbsToActivate = 1;
    }

    thumbsToActivate = Math.floor(thumbsToActivate);
    thumbsSwiper.slides.removeClass(thumbActiveClass);

    if (thumbsSwiper.params.loop || thumbsSwiper.params.virtual && thumbsSwiper.params.virtual.enabled) {
      for (var i = 0; i < thumbsToActivate; i += 1) {
        thumbsSwiper.$wrapperEl.children("[data-swiper-slide-index=\"" + (swiper.realIndex + i) + "\"]").addClass(thumbActiveClass);
      }
    } else {
      for (var _i = 0; _i < thumbsToActivate; _i += 1) {
        thumbsSwiper.slides.eq(swiper.realIndex + _i).addClass(thumbActiveClass);
      }
    }
  }
};
/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'thumbs',
  params: {
    thumbs: {
      swiper: null,
      multipleActiveThumbs: true,
      autoScrollOffset: 0,
      slideThumbActiveClass: 'swiper-slide-thumb-active',
      thumbsContainerClass: 'swiper-container-thumbs'
    }
  },
  create: function create() {
    var swiper = this;
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["bindModuleMethods"])(swiper, {
      thumbs: _extends({
        swiper: null,
        initialized: false
      }, Thumbs)
    });
  },
  on: {
    beforeInit: function beforeInit(swiper) {
      var thumbs = swiper.params.thumbs;
      if (!thumbs || !thumbs.swiper) return;
      swiper.thumbs.init();
      swiper.thumbs.update(true);
    },
    slideChange: function slideChange(swiper) {
      if (!swiper.thumbs.swiper) return;
      swiper.thumbs.update();
    },
    update: function update(swiper) {
      if (!swiper.thumbs.swiper) return;
      swiper.thumbs.update();
    },
    resize: function resize(swiper) {
      if (!swiper.thumbs.swiper) return;
      swiper.thumbs.update();
    },
    observerUpdate: function observerUpdate(swiper) {
      if (!swiper.thumbs.swiper) return;
      swiper.thumbs.update();
    },
    setTransition: function setTransition(swiper, duration) {
      var thumbsSwiper = swiper.thumbs.swiper;
      if (!thumbsSwiper) return;
      thumbsSwiper.setTransition(duration);
    },
    beforeDestroy: function beforeDestroy(swiper) {
      var thumbsSwiper = swiper.thumbs.swiper;
      if (!thumbsSwiper) return;

      if (swiper.thumbs.swiperCreated && thumbsSwiper) {
        thumbsSwiper.destroy();
      }
    }
  }
});

/***/ }),

/***/ "./node_modules/swiper/esm/components/virtual/virtual.js":
/*!***************************************************************!*\
  !*** ./node_modules/swiper/esm/components/virtual/virtual.js ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/dom */ "./node_modules/swiper/esm/utils/dom.js");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/utils */ "./node_modules/swiper/esm/utils/utils.js");
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}



var Virtual = {
  update: function update(force) {
    var swiper = this;
    var _swiper$params = swiper.params,
        slidesPerView = _swiper$params.slidesPerView,
        slidesPerGroup = _swiper$params.slidesPerGroup,
        centeredSlides = _swiper$params.centeredSlides;
    var _swiper$params$virtua = swiper.params.virtual,
        addSlidesBefore = _swiper$params$virtua.addSlidesBefore,
        addSlidesAfter = _swiper$params$virtua.addSlidesAfter;
    var _swiper$virtual = swiper.virtual,
        previousFrom = _swiper$virtual.from,
        previousTo = _swiper$virtual.to,
        slides = _swiper$virtual.slides,
        previousSlidesGrid = _swiper$virtual.slidesGrid,
        renderSlide = _swiper$virtual.renderSlide,
        previousOffset = _swiper$virtual.offset;
    swiper.updateActiveIndex();
    var activeIndex = swiper.activeIndex || 0;
    var offsetProp;
    if (swiper.rtlTranslate) offsetProp = 'right';else offsetProp = swiper.isHorizontal() ? 'left' : 'top';
    var slidesAfter;
    var slidesBefore;

    if (centeredSlides) {
      slidesAfter = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesAfter;
      slidesBefore = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesBefore;
    } else {
      slidesAfter = slidesPerView + (slidesPerGroup - 1) + addSlidesAfter;
      slidesBefore = slidesPerGroup + addSlidesBefore;
    }

    var from = Math.max((activeIndex || 0) - slidesBefore, 0);
    var to = Math.min((activeIndex || 0) + slidesAfter, slides.length - 1);
    var offset = (swiper.slidesGrid[from] || 0) - (swiper.slidesGrid[0] || 0);
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["extend"])(swiper.virtual, {
      from: from,
      to: to,
      offset: offset,
      slidesGrid: swiper.slidesGrid
    });

    function onRendered() {
      swiper.updateSlides();
      swiper.updateProgress();
      swiper.updateSlidesClasses();

      if (swiper.lazy && swiper.params.lazy.enabled) {
        swiper.lazy.load();
      }
    }

    if (previousFrom === from && previousTo === to && !force) {
      if (swiper.slidesGrid !== previousSlidesGrid && offset !== previousOffset) {
        swiper.slides.css(offsetProp, offset + "px");
      }

      swiper.updateProgress();
      return;
    }

    if (swiper.params.virtual.renderExternal) {
      swiper.params.virtual.renderExternal.call(swiper, {
        offset: offset,
        from: from,
        to: to,
        slides: function getSlides() {
          var slidesToRender = [];

          for (var i = from; i <= to; i += 1) {
            slidesToRender.push(slides[i]);
          }

          return slidesToRender;
        }()
      });

      if (swiper.params.virtual.renderExternalUpdate) {
        onRendered();
      }

      return;
    }

    var prependIndexes = [];
    var appendIndexes = [];

    if (force) {
      swiper.$wrapperEl.find("." + swiper.params.slideClass).remove();
    } else {
      for (var i = previousFrom; i <= previousTo; i += 1) {
        if (i < from || i > to) {
          swiper.$wrapperEl.find("." + swiper.params.slideClass + "[data-swiper-slide-index=\"" + i + "\"]").remove();
        }
      }
    }

    for (var _i = 0; _i < slides.length; _i += 1) {
      if (_i >= from && _i <= to) {
        if (typeof previousTo === 'undefined' || force) {
          appendIndexes.push(_i);
        } else {
          if (_i > previousTo) appendIndexes.push(_i);
          if (_i < previousFrom) prependIndexes.push(_i);
        }
      }
    }

    appendIndexes.forEach(function (index) {
      swiper.$wrapperEl.append(renderSlide(slides[index], index));
    });
    prependIndexes.sort(function (a, b) {
      return b - a;
    }).forEach(function (index) {
      swiper.$wrapperEl.prepend(renderSlide(slides[index], index));
    });
    swiper.$wrapperEl.children('.swiper-slide').css(offsetProp, offset + "px");
    onRendered();
  },
  renderSlide: function renderSlide(slide, index) {
    var swiper = this;
    var params = swiper.params.virtual;

    if (params.cache && swiper.virtual.cache[index]) {
      return swiper.virtual.cache[index];
    }

    var $slideEl = params.renderSlide ? Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])(params.renderSlide.call(swiper, slide, index)) : Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])("<div class=\"" + swiper.params.slideClass + "\" data-swiper-slide-index=\"" + index + "\">" + slide + "</div>");
    if (!$slideEl.attr('data-swiper-slide-index')) $slideEl.attr('data-swiper-slide-index', index);
    if (params.cache) swiper.virtual.cache[index] = $slideEl;
    return $slideEl;
  },
  appendSlide: function appendSlide(slides) {
    var swiper = this;

    if (typeof slides === 'object' && 'length' in slides) {
      for (var i = 0; i < slides.length; i += 1) {
        if (slides[i]) swiper.virtual.slides.push(slides[i]);
      }
    } else {
      swiper.virtual.slides.push(slides);
    }

    swiper.virtual.update(true);
  },
  prependSlide: function prependSlide(slides) {
    var swiper = this;
    var activeIndex = swiper.activeIndex;
    var newActiveIndex = activeIndex + 1;
    var numberOfNewSlides = 1;

    if (Array.isArray(slides)) {
      for (var i = 0; i < slides.length; i += 1) {
        if (slides[i]) swiper.virtual.slides.unshift(slides[i]);
      }

      newActiveIndex = activeIndex + slides.length;
      numberOfNewSlides = slides.length;
    } else {
      swiper.virtual.slides.unshift(slides);
    }

    if (swiper.params.virtual.cache) {
      var cache = swiper.virtual.cache;
      var newCache = {};
      Object.keys(cache).forEach(function (cachedIndex) {
        var $cachedEl = cache[cachedIndex];
        var cachedElIndex = $cachedEl.attr('data-swiper-slide-index');

        if (cachedElIndex) {
          $cachedEl.attr('data-swiper-slide-index', parseInt(cachedElIndex, 10) + 1);
        }

        newCache[parseInt(cachedIndex, 10) + numberOfNewSlides] = $cachedEl;
      });
      swiper.virtual.cache = newCache;
    }

    swiper.virtual.update(true);
    swiper.slideTo(newActiveIndex, 0);
  },
  removeSlide: function removeSlide(slidesIndexes) {
    var swiper = this;
    if (typeof slidesIndexes === 'undefined' || slidesIndexes === null) return;
    var activeIndex = swiper.activeIndex;

    if (Array.isArray(slidesIndexes)) {
      for (var i = slidesIndexes.length - 1; i >= 0; i -= 1) {
        swiper.virtual.slides.splice(slidesIndexes[i], 1);

        if (swiper.params.virtual.cache) {
          delete swiper.virtual.cache[slidesIndexes[i]];
        }

        if (slidesIndexes[i] < activeIndex) activeIndex -= 1;
        activeIndex = Math.max(activeIndex, 0);
      }
    } else {
      swiper.virtual.slides.splice(slidesIndexes, 1);

      if (swiper.params.virtual.cache) {
        delete swiper.virtual.cache[slidesIndexes];
      }

      if (slidesIndexes < activeIndex) activeIndex -= 1;
      activeIndex = Math.max(activeIndex, 0);
    }

    swiper.virtual.update(true);
    swiper.slideTo(activeIndex, 0);
  },
  removeAllSlides: function removeAllSlides() {
    var swiper = this;
    swiper.virtual.slides = [];

    if (swiper.params.virtual.cache) {
      swiper.virtual.cache = {};
    }

    swiper.virtual.update(true);
    swiper.slideTo(0, 0);
  }
};
/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'virtual',
  params: {
    virtual: {
      enabled: false,
      slides: [],
      cache: true,
      renderSlide: null,
      renderExternal: null,
      renderExternalUpdate: true,
      addSlidesBefore: 0,
      addSlidesAfter: 0
    }
  },
  create: function create() {
    var swiper = this;
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["bindModuleMethods"])(swiper, {
      virtual: _extends(_extends({}, Virtual), {}, {
        slides: swiper.params.virtual.slides,
        cache: {}
      })
    });
  },
  on: {
    beforeInit: function beforeInit(swiper) {
      if (!swiper.params.virtual.enabled) return;
      swiper.classNames.push(swiper.params.containerModifierClass + "virtual");
      var overwriteParams = {
        watchSlidesProgress: true
      };
      Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["extend"])(swiper.params, overwriteParams);
      Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["extend"])(swiper.originalParams, overwriteParams);

      if (!swiper.params.initialSlide) {
        swiper.virtual.update();
      }
    },
    setTranslate: function setTranslate(swiper) {
      if (!swiper.params.virtual.enabled) return;
      swiper.virtual.update();
    }
  }
});

/***/ }),

/***/ "./node_modules/swiper/esm/components/zoom/zoom.js":
/*!*********************************************************!*\
  !*** ./node_modules/swiper/esm/components/zoom/zoom.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/dom */ "./node_modules/swiper/esm/utils/dom.js");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/utils */ "./node_modules/swiper/esm/utils/utils.js");
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}



var Zoom = {
  // Calc Scale From Multi-touches
  getDistanceBetweenTouches: function getDistanceBetweenTouches(e) {
    if (e.targetTouches.length < 2) return 1;
    var x1 = e.targetTouches[0].pageX;
    var y1 = e.targetTouches[0].pageY;
    var x2 = e.targetTouches[1].pageX;
    var y2 = e.targetTouches[1].pageY;
    var distance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
    return distance;
  },
  // Events
  onGestureStart: function onGestureStart(e) {
    var swiper = this;
    var support = swiper.support;
    var params = swiper.params.zoom;
    var zoom = swiper.zoom;
    var gesture = zoom.gesture;
    zoom.fakeGestureTouched = false;
    zoom.fakeGestureMoved = false;

    if (!support.gestures) {
      if (e.type !== 'touchstart' || e.type === 'touchstart' && e.targetTouches.length < 2) {
        return;
      }

      zoom.fakeGestureTouched = true;
      gesture.scaleStart = Zoom.getDistanceBetweenTouches(e);
    }

    if (!gesture.$slideEl || !gesture.$slideEl.length) {
      gesture.$slideEl = Object(_utils_dom__WEBPACK_IMPORTED_MODULE_0__["default"])(e.target).closest("." + swiper.params.slideClass);
      if (gesture.$slideEl.length === 0) gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);
      gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas, picture, .swiper-zoom-target');
      gesture.$imageWrapEl = gesture.$imageEl.parent("." + params.containerClass);
      gesture.maxRatio = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;

      if (gesture.$imageWrapEl.length === 0) {
        gesture.$imageEl = undefined;
        return;
      }
    }

    if (gesture.$imageEl) {
      gesture.$imageEl.transition(0);
    }

    swiper.zoom.isScaling = true;
  },
  onGestureChange: function onGestureChange(e) {
    var swiper = this;
    var support = swiper.support;
    var params = swiper.params.zoom;
    var zoom = swiper.zoom;
    var gesture = zoom.gesture;

    if (!support.gestures) {
      if (e.type !== 'touchmove' || e.type === 'touchmove' && e.targetTouches.length < 2) {
        return;
      }

      zoom.fakeGestureMoved = true;
      gesture.scaleMove = Zoom.getDistanceBetweenTouches(e);
    }

    if (!gesture.$imageEl || gesture.$imageEl.length === 0) {
      if (e.type === 'gesturechange') zoom.onGestureStart(e);
      return;
    }

    if (support.gestures) {
      zoom.scale = e.scale * zoom.currentScale;
    } else {
      zoom.scale = gesture.scaleMove / gesture.scaleStart * zoom.currentScale;
    }

    if (zoom.scale > gesture.maxRatio) {
      zoom.scale = gesture.maxRatio - 1 + Math.pow(zoom.scale - gesture.maxRatio + 1, 0.5);
    }

    if (zoom.scale < params.minRatio) {
      zoom.scale = params.minRatio + 1 - Math.pow(params.minRatio - zoom.scale + 1, 0.5);
    }

    gesture.$imageEl.transform("translate3d(0,0,0) scale(" + zoom.scale + ")");
  },
  onGestureEnd: function onGestureEnd(e) {
    var swiper = this;
    var device = swiper.device;
    var support = swiper.support;
    var params = swiper.params.zoom;
    var zoom = swiper.zoom;
    var gesture = zoom.gesture;

    if (!support.gestures) {
      if (!zoom.fakeGestureTouched || !zoom.fakeGestureMoved) {
        return;
      }

      if (e.type !== 'touchend' || e.type === 'touchend' && e.changedTouches.length < 2 && !device.android) {
        return;
      }

      zoom.fakeGestureTouched = false;
      zoom.fakeGestureMoved = false;
    }

    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;
    zoom.scale = Math.max(Math.min(zoom.scale, gesture.maxRatio), params.minRatio);
    gesture.$imageEl.transition(swiper.params.speed).transform("translate3d(0,0,0) scale(" + zoom.scale + ")");
    zoom.currentScale = zoom.scale;
    zoom.isScaling = false;
    if (zoom.scale === 1) gesture.$slideEl = undefined;
  },
  onTouchStart: function onTouchStart(e) {
    var swiper = this;
    var device = swiper.device;
    var zoom = swiper.zoom;
    var gesture = zoom.gesture,
        image = zoom.image;
    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;
    if (image.isTouched) return;
    if (device.android && e.cancelable) e.preventDefault();
    image.isTouched = true;
    image.touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
    image.touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;
  },
  onTouchMove: function onTouchMove(e) {
    var swiper = this;
    var zoom = swiper.zoom;
    var gesture = zoom.gesture,
        image = zoom.image,
        velocity = zoom.velocity;
    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;
    swiper.allowClick = false;
    if (!image.isTouched || !gesture.$slideEl) return;

    if (!image.isMoved) {
      image.width = gesture.$imageEl[0].offsetWidth;
      image.height = gesture.$imageEl[0].offsetHeight;
      image.startX = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["getTranslate"])(gesture.$imageWrapEl[0], 'x') || 0;
      image.startY = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["getTranslate"])(gesture.$imageWrapEl[0], 'y') || 0;
      gesture.slideWidth = gesture.$slideEl[0].offsetWidth;
      gesture.slideHeight = gesture.$slideEl[0].offsetHeight;
      gesture.$imageWrapEl.transition(0);

      if (swiper.rtl) {
        image.startX = -image.startX;
        image.startY = -image.startY;
      }
    } // Define if we need image drag


    var scaledWidth = image.width * zoom.scale;
    var scaledHeight = image.height * zoom.scale;
    if (scaledWidth < gesture.slideWidth && scaledHeight < gesture.slideHeight) return;
    image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);
    image.maxX = -image.minX;
    image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);
    image.maxY = -image.minY;
    image.touchesCurrent.x = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;
    image.touchesCurrent.y = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;

    if (!image.isMoved && !zoom.isScaling) {
      if (swiper.isHorizontal() && (Math.floor(image.minX) === Math.floor(image.startX) && image.touchesCurrent.x < image.touchesStart.x || Math.floor(image.maxX) === Math.floor(image.startX) && image.touchesCurrent.x > image.touchesStart.x)) {
        image.isTouched = false;
        return;
      }

      if (!swiper.isHorizontal() && (Math.floor(image.minY) === Math.floor(image.startY) && image.touchesCurrent.y < image.touchesStart.y || Math.floor(image.maxY) === Math.floor(image.startY) && image.touchesCurrent.y > image.touchesStart.y)) {
        image.isTouched = false;
        return;
      }
    }

    if (e.cancelable) {
      e.preventDefault();
    }

    e.stopPropagation();
    image.isMoved = true;
    image.currentX = image.touchesCurrent.x - image.touchesStart.x + image.startX;
    image.currentY = image.touchesCurrent.y - image.touchesStart.y + image.startY;

    if (image.currentX < image.minX) {
      image.currentX = image.minX + 1 - Math.pow(image.minX - image.currentX + 1, 0.8);
    }

    if (image.currentX > image.maxX) {
      image.currentX = image.maxX - 1 + Math.pow(image.currentX - image.maxX + 1, 0.8);
    }

    if (image.currentY < image.minY) {
      image.currentY = image.minY + 1 - Math.pow(image.minY - image.currentY + 1, 0.8);
    }

    if (image.currentY > image.maxY) {
      image.currentY = image.maxY - 1 + Math.pow(image.currentY - image.maxY + 1, 0.8);
    } // Velocity


    if (!velocity.prevPositionX) velocity.prevPositionX = image.touchesCurrent.x;
    if (!velocity.prevPositionY) velocity.prevPositionY = image.touchesCurrent.y;
    if (!velocity.prevTime) velocity.prevTime = Date.now();
    velocity.x = (image.touchesCurrent.x - velocity.prevPositionX) / (Date.now() - velocity.prevTime) / 2;
    velocity.y = (image.touchesCurrent.y - velocity.prevPositionY) / (Date.now() - velocity.prevTime) / 2;
    if (Math.abs(image.touchesCurrent.x - velocity.prevPositionX) < 2) velocity.x = 0;
    if (Math.abs(image.touchesCurrent.y - velocity.prevPositionY) < 2) velocity.y = 0;
    velocity.prevPositionX = image.touchesCurrent.x;
    velocity.prevPositionY = image.touchesCurrent.y;
    velocity.prevTime = Date.now();
    gesture.$imageWrapEl.transform("translate3d(" + image.currentX + "px, " + image.currentY + "px,0)");
  },
  onTouchEnd: function onTouchEnd() {
    var swiper = this;
    var zoom = swiper.zoom;
    var gesture = zoom.gesture,
        image = zoom.image,
        velocity = zoom.velocity;
    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;

    if (!image.isTouched || !image.isMoved) {
      image.isTouched = false;
      image.isMoved = false;
      return;
    }

    image.isTouched = false;
    image.isMoved = false;
    var momentumDurationX = 300;
    var momentumDurationY = 300;
    var momentumDistanceX = velocity.x * momentumDurationX;
    var newPositionX = image.currentX + momentumDistanceX;
    var momentumDistanceY = velocity.y * momentumDurationY;
    var newPositionY = image.currentY + momentumDistanceY; // Fix duration

    if (velocity.x !== 0) momentumDurationX = Math.abs((newPositionX - image.currentX) / velocity.x);
    if (velocity.y !== 0) momentumDurationY = Math.abs((newPositionY - image.currentY) / velocity.y);
    var momentumDuration = Math.max(momentumDurationX, momentumDurationY);
    image.currentX = newPositionX;
    image.currentY = newPositionY; // Define if we need image drag

    var scaledWidth = image.width * zoom.scale;
    var scaledHeight = image.height * zoom.scale;
    image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);
    image.maxX = -image.minX;
    image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);
    image.maxY = -image.minY;
    image.currentX = Math.max(Math.min(image.currentX, image.maxX), image.minX);
    image.currentY = Math.max(Math.min(image.currentY, image.maxY), image.minY);
    gesture.$imageWrapEl.transition(momentumDuration).transform("translate3d(" + image.currentX + "px, " + image.currentY + "px,0)");
  },
  onTransitionEnd: function onTransitionEnd() {
    var swiper = this;
    var zoom = swiper.zoom;
    var gesture = zoom.gesture;

    if (gesture.$slideEl && swiper.previousIndex !== swiper.activeIndex) {
      if (gesture.$imageEl) {
        gesture.$imageEl.transform('translate3d(0,0,0) scale(1)');
      }

      if (gesture.$imageWrapEl) {
        gesture.$imageWrapEl.transform('translate3d(0,0,0)');
      }

      zoom.scale = 1;
      zoom.currentScale = 1;
      gesture.$slideEl = undefined;
      gesture.$imageEl = undefined;
      gesture.$imageWrapEl = undefined;
    }
  },
  // Toggle Zoom
  toggle: function toggle(e) {
    var swiper = this;
    var zoom = swiper.zoom;

    if (zoom.scale && zoom.scale !== 1) {
      // Zoom Out
      zoom.out();
    } else {
      // Zoom In
      zoom.in(e);
    }
  },
  in: function _in(e) {
    var swiper = this;
    var zoom = swiper.zoom;
    var params = swiper.params.zoom;
    var gesture = zoom.gesture,
        image = zoom.image;

    if (!gesture.$slideEl) {
      if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {
        gesture.$slideEl = swiper.$wrapperEl.children("." + swiper.params.slideActiveClass);
      } else {
        gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);
      }

      gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas, picture, .swiper-zoom-target');
      gesture.$imageWrapEl = gesture.$imageEl.parent("." + params.containerClass);
    }

    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;
    gesture.$slideEl.addClass("" + params.zoomedSlideClass);
    var touchX;
    var touchY;
    var offsetX;
    var offsetY;
    var diffX;
    var diffY;
    var translateX;
    var translateY;
    var imageWidth;
    var imageHeight;
    var scaledWidth;
    var scaledHeight;
    var translateMinX;
    var translateMinY;
    var translateMaxX;
    var translateMaxY;
    var slideWidth;
    var slideHeight;

    if (typeof image.touchesStart.x === 'undefined' && e) {
      touchX = e.type === 'touchend' ? e.changedTouches[0].pageX : e.pageX;
      touchY = e.type === 'touchend' ? e.changedTouches[0].pageY : e.pageY;
    } else {
      touchX = image.touchesStart.x;
      touchY = image.touchesStart.y;
    }

    zoom.scale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;
    zoom.currentScale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;

    if (e) {
      slideWidth = gesture.$slideEl[0].offsetWidth;
      slideHeight = gesture.$slideEl[0].offsetHeight;
      offsetX = gesture.$slideEl.offset().left;
      offsetY = gesture.$slideEl.offset().top;
      diffX = offsetX + slideWidth / 2 - touchX;
      diffY = offsetY + slideHeight / 2 - touchY;
      imageWidth = gesture.$imageEl[0].offsetWidth;
      imageHeight = gesture.$imageEl[0].offsetHeight;
      scaledWidth = imageWidth * zoom.scale;
      scaledHeight = imageHeight * zoom.scale;
      translateMinX = Math.min(slideWidth / 2 - scaledWidth / 2, 0);
      translateMinY = Math.min(slideHeight / 2 - scaledHeight / 2, 0);
      translateMaxX = -translateMinX;
      translateMaxY = -translateMinY;
      translateX = diffX * zoom.scale;
      translateY = diffY * zoom.scale;

      if (translateX < translateMinX) {
        translateX = translateMinX;
      }

      if (translateX > translateMaxX) {
        translateX = translateMaxX;
      }

      if (translateY < translateMinY) {
        translateY = translateMinY;
      }

      if (translateY > translateMaxY) {
        translateY = translateMaxY;
      }
    } else {
      translateX = 0;
      translateY = 0;
    }

    gesture.$imageWrapEl.transition(300).transform("translate3d(" + translateX + "px, " + translateY + "px,0)");
    gesture.$imageEl.transition(300).transform("translate3d(0,0,0) scale(" + zoom.scale + ")");
  },
  out: function out() {
    var swiper = this;
    var zoom = swiper.zoom;
    var params = swiper.params.zoom;
    var gesture = zoom.gesture;

    if (!gesture.$slideEl) {
      if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {
        gesture.$slideEl = swiper.$wrapperEl.children("." + swiper.params.slideActiveClass);
      } else {
        gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);
      }

      gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas, picture, .swiper-zoom-target');
      gesture.$imageWrapEl = gesture.$imageEl.parent("." + params.containerClass);
    }

    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;
    zoom.scale = 1;
    zoom.currentScale = 1;
    gesture.$imageWrapEl.transition(300).transform('translate3d(0,0,0)');
    gesture.$imageEl.transition(300).transform('translate3d(0,0,0) scale(1)');
    gesture.$slideEl.removeClass("" + params.zoomedSlideClass);
    gesture.$slideEl = undefined;
  },
  toggleGestures: function toggleGestures(method) {
    var swiper = this;
    var zoom = swiper.zoom;
    var selector = zoom.slideSelector,
        passive = zoom.passiveListener;
    swiper.$wrapperEl[method]('gesturestart', selector, zoom.onGestureStart, passive);
    swiper.$wrapperEl[method]('gesturechange', selector, zoom.onGestureChange, passive);
    swiper.$wrapperEl[method]('gestureend', selector, zoom.onGestureEnd, passive);
  },
  enableGestures: function enableGestures() {
    if (this.zoom.gesturesEnabled) return;
    this.zoom.gesturesEnabled = true;
    this.zoom.toggleGestures('on');
  },
  disableGestures: function disableGestures() {
    if (!this.zoom.gesturesEnabled) return;
    this.zoom.gesturesEnabled = false;
    this.zoom.toggleGestures('off');
  },
  // Attach/Detach Events
  enable: function enable() {
    var swiper = this;
    var support = swiper.support;
    var zoom = swiper.zoom;
    if (zoom.enabled) return;
    zoom.enabled = true;
    var passiveListener = swiper.touchEvents.start === 'touchstart' && support.passiveListener && swiper.params.passiveListeners ? {
      passive: true,
      capture: false
    } : false;
    var activeListenerWithCapture = support.passiveListener ? {
      passive: false,
      capture: true
    } : true;
    var slideSelector = "." + swiper.params.slideClass;
    swiper.zoom.passiveListener = passiveListener;
    swiper.zoom.slideSelector = slideSelector; // Scale image

    if (support.gestures) {
      swiper.$wrapperEl.on(swiper.touchEvents.start, swiper.zoom.enableGestures, passiveListener);
      swiper.$wrapperEl.on(swiper.touchEvents.end, swiper.zoom.disableGestures, passiveListener);
    } else if (swiper.touchEvents.start === 'touchstart') {
      swiper.$wrapperEl.on(swiper.touchEvents.start, slideSelector, zoom.onGestureStart, passiveListener);
      swiper.$wrapperEl.on(swiper.touchEvents.move, slideSelector, zoom.onGestureChange, activeListenerWithCapture);
      swiper.$wrapperEl.on(swiper.touchEvents.end, slideSelector, zoom.onGestureEnd, passiveListener);

      if (swiper.touchEvents.cancel) {
        swiper.$wrapperEl.on(swiper.touchEvents.cancel, slideSelector, zoom.onGestureEnd, passiveListener);
      }
    } // Move image


    swiper.$wrapperEl.on(swiper.touchEvents.move, "." + swiper.params.zoom.containerClass, zoom.onTouchMove, activeListenerWithCapture);
  },
  disable: function disable() {
    var swiper = this;
    var zoom = swiper.zoom;
    if (!zoom.enabled) return;
    var support = swiper.support;
    swiper.zoom.enabled = false;
    var passiveListener = swiper.touchEvents.start === 'touchstart' && support.passiveListener && swiper.params.passiveListeners ? {
      passive: true,
      capture: false
    } : false;
    var activeListenerWithCapture = support.passiveListener ? {
      passive: false,
      capture: true
    } : true;
    var slideSelector = "." + swiper.params.slideClass; // Scale image

    if (support.gestures) {
      swiper.$wrapperEl.off(swiper.touchEvents.start, swiper.zoom.enableGestures, passiveListener);
      swiper.$wrapperEl.off(swiper.touchEvents.end, swiper.zoom.disableGestures, passiveListener);
    } else if (swiper.touchEvents.start === 'touchstart') {
      swiper.$wrapperEl.off(swiper.touchEvents.start, slideSelector, zoom.onGestureStart, passiveListener);
      swiper.$wrapperEl.off(swiper.touchEvents.move, slideSelector, zoom.onGestureChange, activeListenerWithCapture);
      swiper.$wrapperEl.off(swiper.touchEvents.end, slideSelector, zoom.onGestureEnd, passiveListener);

      if (swiper.touchEvents.cancel) {
        swiper.$wrapperEl.off(swiper.touchEvents.cancel, slideSelector, zoom.onGestureEnd, passiveListener);
      }
    } // Move image


    swiper.$wrapperEl.off(swiper.touchEvents.move, "." + swiper.params.zoom.containerClass, zoom.onTouchMove, activeListenerWithCapture);
  }
};
/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'zoom',
  params: {
    zoom: {
      enabled: false,
      maxRatio: 3,
      minRatio: 1,
      toggle: true,
      containerClass: 'swiper-zoom-container',
      zoomedSlideClass: 'swiper-slide-zoomed'
    }
  },
  create: function create() {
    var swiper = this;
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["bindModuleMethods"])(swiper, {
      zoom: _extends({
        enabled: false,
        scale: 1,
        currentScale: 1,
        isScaling: false,
        gesture: {
          $slideEl: undefined,
          slideWidth: undefined,
          slideHeight: undefined,
          $imageEl: undefined,
          $imageWrapEl: undefined,
          maxRatio: 3
        },
        image: {
          isTouched: undefined,
          isMoved: undefined,
          currentX: undefined,
          currentY: undefined,
          minX: undefined,
          minY: undefined,
          maxX: undefined,
          maxY: undefined,
          width: undefined,
          height: undefined,
          startX: undefined,
          startY: undefined,
          touchesStart: {},
          touchesCurrent: {}
        },
        velocity: {
          x: undefined,
          y: undefined,
          prevPositionX: undefined,
          prevPositionY: undefined,
          prevTime: undefined
        }
      }, Zoom)
    });
    var scale = 1;
    Object.defineProperty(swiper.zoom, 'scale', {
      get: function get() {
        return scale;
      },
      set: function set(value) {
        if (scale !== value) {
          var imageEl = swiper.zoom.gesture.$imageEl ? swiper.zoom.gesture.$imageEl[0] : undefined;
          var slideEl = swiper.zoom.gesture.$slideEl ? swiper.zoom.gesture.$slideEl[0] : undefined;
          swiper.emit('zoomChange', value, imageEl, slideEl);
        }

        scale = value;
      }
    });
  },
  on: {
    init: function init(swiper) {
      if (swiper.params.zoom.enabled) {
        swiper.zoom.enable();
      }
    },
    destroy: function destroy(swiper) {
      swiper.zoom.disable();
    },
    touchStart: function touchStart(swiper, e) {
      if (!swiper.zoom.enabled) return;
      swiper.zoom.onTouchStart(e);
    },
    touchEnd: function touchEnd(swiper, e) {
      if (!swiper.zoom.enabled) return;
      swiper.zoom.onTouchEnd(e);
    },
    doubleTap: function doubleTap(swiper, e) {
      if (swiper.params.zoom.enabled && swiper.zoom.enabled && swiper.params.zoom.toggle) {
        swiper.zoom.toggle(e);
      }
    },
    transitionEnd: function transitionEnd(swiper) {
      if (swiper.zoom.enabled && swiper.params.zoom.enabled) {
        swiper.zoom.onTransitionEnd();
      }
    },
    slideChange: function slideChange(swiper) {
      if (swiper.zoom.enabled && swiper.params.zoom.enabled && swiper.params.cssMode) {
        swiper.zoom.onTransitionEnd();
      }
    }
  }
});

/***/ }),

/***/ "./node_modules/swiper/esm/modules/observer/observer.js":
/*!**************************************************************!*\
  !*** ./node_modules/swiper/esm/modules/observer/observer.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/utils */ "./node_modules/swiper/esm/utils/utils.js");
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}



var Observer = {
  attach: function attach(target, options) {
    if (options === void 0) {
      options = {};
    }

    var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();
    var swiper = this;
    var ObserverFunc = window.MutationObserver || window.WebkitMutationObserver;
    var observer = new ObserverFunc(function (mutations) {
      // The observerUpdate event should only be triggered
      // once despite the number of mutations.  Additional
      // triggers are redundant and are very costly
      if (mutations.length === 1) {
        swiper.emit('observerUpdate', mutations[0]);
        return;
      }

      var observerUpdate = function observerUpdate() {
        swiper.emit('observerUpdate', mutations[0]);
      };

      if (window.requestAnimationFrame) {
        window.requestAnimationFrame(observerUpdate);
      } else {
        window.setTimeout(observerUpdate, 0);
      }
    });
    observer.observe(target, {
      attributes: typeof options.attributes === 'undefined' ? true : options.attributes,
      childList: typeof options.childList === 'undefined' ? true : options.childList,
      characterData: typeof options.characterData === 'undefined' ? true : options.characterData
    });
    swiper.observer.observers.push(observer);
  },
  init: function init() {
    var swiper = this;
    if (!swiper.support.observer || !swiper.params.observer) return;

    if (swiper.params.observeParents) {
      var containerParents = swiper.$el.parents();

      for (var i = 0; i < containerParents.length; i += 1) {
        swiper.observer.attach(containerParents[i]);
      }
    } // Observe container


    swiper.observer.attach(swiper.$el[0], {
      childList: swiper.params.observeSlideChildren
    }); // Observe wrapper

    swiper.observer.attach(swiper.$wrapperEl[0], {
      attributes: false
    });
  },
  destroy: function destroy() {
    var swiper = this;
    swiper.observer.observers.forEach(function (observer) {
      observer.disconnect();
    });
    swiper.observer.observers = [];
  }
};
/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'observer',
  params: {
    observer: false,
    observeParents: false,
    observeSlideChildren: false
  },
  create: function create() {
    var swiper = this;
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["bindModuleMethods"])(swiper, {
      observer: _extends(_extends({}, Observer), {}, {
        observers: []
      })
    });
  },
  on: {
    init: function init(swiper) {
      swiper.observer.init();
    },
    destroy: function destroy(swiper) {
      swiper.observer.destroy();
    }
  }
});

/***/ }),

/***/ "./node_modules/swiper/esm/modules/resize/resize.js":
/*!**********************************************************!*\
  !*** ./node_modules/swiper/esm/modules/resize/resize.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/utils */ "./node_modules/swiper/esm/utils/utils.js");


/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'resize',
  create: function create() {
    var swiper = this;
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["extend"])(swiper, {
      resize: {
        resizeHandler: function resizeHandler() {
          if (!swiper || swiper.destroyed || !swiper.initialized) return;
          swiper.emit('beforeResize');
          swiper.emit('resize');
        },
        orientationChangeHandler: function orientationChangeHandler() {
          if (!swiper || swiper.destroyed || !swiper.initialized) return;
          swiper.emit('orientationchange');
        }
      }
    });
  },
  on: {
    init: function init(swiper) {
      var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])(); // Emit resize

      window.addEventListener('resize', swiper.resize.resizeHandler); // Emit orientationchange

      window.addEventListener('orientationchange', swiper.resize.orientationChangeHandler);
    },
    destroy: function destroy(swiper) {
      var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();
      window.removeEventListener('resize', swiper.resize.resizeHandler);
      window.removeEventListener('orientationchange', swiper.resize.orientationChangeHandler);
    }
  }
});

/***/ }),

/***/ "./node_modules/swiper/esm/utils/dom.js":
/*!**********************************************!*\
  !*** ./node_modules/swiper/esm/utils/dom.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var dom7__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dom7 */ "./node_modules/dom7/dom7.esm.js");

var Methods = {
  addClass: dom7__WEBPACK_IMPORTED_MODULE_0__["addClass"],
  removeClass: dom7__WEBPACK_IMPORTED_MODULE_0__["removeClass"],
  hasClass: dom7__WEBPACK_IMPORTED_MODULE_0__["hasClass"],
  toggleClass: dom7__WEBPACK_IMPORTED_MODULE_0__["toggleClass"],
  attr: dom7__WEBPACK_IMPORTED_MODULE_0__["attr"],
  removeAttr: dom7__WEBPACK_IMPORTED_MODULE_0__["removeAttr"],
  transform: dom7__WEBPACK_IMPORTED_MODULE_0__["transform"],
  transition: dom7__WEBPACK_IMPORTED_MODULE_0__["transition"],
  on: dom7__WEBPACK_IMPORTED_MODULE_0__["on"],
  off: dom7__WEBPACK_IMPORTED_MODULE_0__["off"],
  trigger: dom7__WEBPACK_IMPORTED_MODULE_0__["trigger"],
  transitionEnd: dom7__WEBPACK_IMPORTED_MODULE_0__["transitionEnd"],
  outerWidth: dom7__WEBPACK_IMPORTED_MODULE_0__["outerWidth"],
  outerHeight: dom7__WEBPACK_IMPORTED_MODULE_0__["outerHeight"],
  styles: dom7__WEBPACK_IMPORTED_MODULE_0__["styles"],
  offset: dom7__WEBPACK_IMPORTED_MODULE_0__["offset"],
  css: dom7__WEBPACK_IMPORTED_MODULE_0__["css"],
  each: dom7__WEBPACK_IMPORTED_MODULE_0__["each"],
  html: dom7__WEBPACK_IMPORTED_MODULE_0__["html"],
  text: dom7__WEBPACK_IMPORTED_MODULE_0__["text"],
  is: dom7__WEBPACK_IMPORTED_MODULE_0__["is"],
  index: dom7__WEBPACK_IMPORTED_MODULE_0__["index"],
  eq: dom7__WEBPACK_IMPORTED_MODULE_0__["eq"],
  append: dom7__WEBPACK_IMPORTED_MODULE_0__["append"],
  prepend: dom7__WEBPACK_IMPORTED_MODULE_0__["prepend"],
  next: dom7__WEBPACK_IMPORTED_MODULE_0__["next"],
  nextAll: dom7__WEBPACK_IMPORTED_MODULE_0__["nextAll"],
  prev: dom7__WEBPACK_IMPORTED_MODULE_0__["prev"],
  prevAll: dom7__WEBPACK_IMPORTED_MODULE_0__["prevAll"],
  parent: dom7__WEBPACK_IMPORTED_MODULE_0__["parent"],
  parents: dom7__WEBPACK_IMPORTED_MODULE_0__["parents"],
  closest: dom7__WEBPACK_IMPORTED_MODULE_0__["closest"],
  find: dom7__WEBPACK_IMPORTED_MODULE_0__["find"],
  children: dom7__WEBPACK_IMPORTED_MODULE_0__["children"],
  filter: dom7__WEBPACK_IMPORTED_MODULE_0__["filter"],
  remove: dom7__WEBPACK_IMPORTED_MODULE_0__["remove"]
};
Object.keys(Methods).forEach(function (methodName) {
  dom7__WEBPACK_IMPORTED_MODULE_0__["$"].fn[methodName] = Methods[methodName];
});
/* harmony default export */ __webpack_exports__["default"] = (dom7__WEBPACK_IMPORTED_MODULE_0__["$"]);

/***/ }),

/***/ "./node_modules/swiper/esm/utils/get-browser.js":
/*!******************************************************!*\
  !*** ./node_modules/swiper/esm/utils/get-browser.js ***!
  \******************************************************/
/*! exports provided: getBrowser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getBrowser", function() { return getBrowser; });
/* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");

var browser;

function calcBrowser() {
  var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();

  function isSafari() {
    var ua = window.navigator.userAgent.toLowerCase();
    return ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0;
  }

  return {
    isEdge: !!window.navigator.userAgent.match(/Edge/g),
    isSafari: isSafari(),
    isWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window.navigator.userAgent)
  };
}

function getBrowser() {
  if (!browser) {
    browser = calcBrowser();
  }

  return browser;
}



/***/ }),

/***/ "./node_modules/swiper/esm/utils/get-device.js":
/*!*****************************************************!*\
  !*** ./node_modules/swiper/esm/utils/get-device.js ***!
  \*****************************************************/
/*! exports provided: getDevice */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDevice", function() { return getDevice; });
/* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");
/* harmony import */ var _get_support__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./get-support */ "./node_modules/swiper/esm/utils/get-support.js");


var device;

function calcDevice(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      userAgent = _ref.userAgent;

  var support = Object(_get_support__WEBPACK_IMPORTED_MODULE_1__["getSupport"])();
  var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();
  var platform = window.navigator.platform;
  var ua = userAgent || window.navigator.userAgent;
  var device = {
    ios: false,
    android: false
  };
  var screenWidth = window.screen.width;
  var screenHeight = window.screen.height;
  var android = ua.match(/(Android);?[\s\/]+([\d.]+)?/); // eslint-disable-line

  var ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
  var ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
  var iphone = !ipad && ua.match(/(iPhone\sOS|iOS)\s([\d_]+)/);
  var windows = platform === 'Win32';
  var macos = platform === 'MacIntel'; // iPadOs 13 fix

  var iPadScreens = ['1024x1366', '1366x1024', '834x1194', '1194x834', '834x1112', '1112x834', '768x1024', '1024x768'];

  if (!ipad && macos && support.touch && iPadScreens.indexOf(screenWidth + "x" + screenHeight) >= 0) {
    ipad = ua.match(/(Version)\/([\d.]+)/);
    if (!ipad) ipad = [0, 1, '13_0_0'];
    macos = false;
  } // Android


  if (android && !windows) {
    device.os = 'android';
    device.android = true;
  }

  if (ipad || iphone || ipod) {
    device.os = 'ios';
    device.ios = true;
  } // Export object


  return device;
}

function getDevice(overrides) {
  if (overrides === void 0) {
    overrides = {};
  }

  if (!device) {
    device = calcDevice(overrides);
  }

  return device;
}



/***/ }),

/***/ "./node_modules/swiper/esm/utils/get-support.js":
/*!******************************************************!*\
  !*** ./node_modules/swiper/esm/utils/get-support.js ***!
  \******************************************************/
/*! exports provided: getSupport */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSupport", function() { return getSupport; });
/* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");

var support;

function calcSupport() {
  var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();
  var document = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getDocument"])();
  return {
    touch: !!('ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch),
    pointerEvents: !!window.PointerEvent && 'maxTouchPoints' in window.navigator && window.navigator.maxTouchPoints >= 0,
    observer: function checkObserver() {
      return 'MutationObserver' in window || 'WebkitMutationObserver' in window;
    }(),
    passiveListener: function checkPassiveListener() {
      var supportsPassive = false;

      try {
        var opts = Object.defineProperty({}, 'passive', {
          // eslint-disable-next-line
          get: function get() {
            supportsPassive = true;
          }
        });
        window.addEventListener('testPassiveListener', null, opts);
      } catch (e) {// No support
      }

      return supportsPassive;
    }(),
    gestures: function checkGestures() {
      return 'ongesturestart' in window;
    }()
  };
}

function getSupport() {
  if (!support) {
    support = calcSupport();
  }

  return support;
}



/***/ }),

/***/ "./node_modules/swiper/esm/utils/utils.js":
/*!************************************************!*\
  !*** ./node_modules/swiper/esm/utils/utils.js ***!
  \************************************************/
/*! exports provided: deleteProps, nextTick, now, getTranslate, isObject, extend, bindModuleMethods */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deleteProps", function() { return deleteProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nextTick", function() { return nextTick; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "now", function() { return now; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTranslate", function() { return getTranslate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObject", function() { return isObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extend", function() { return extend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bindModuleMethods", function() { return bindModuleMethods; });
/* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");


function deleteProps(obj) {
  var object = obj;
  Object.keys(object).forEach(function (key) {
    try {
      object[key] = null;
    } catch (e) {// no getter for object
    }

    try {
      delete object[key];
    } catch (e) {// something got wrong
    }
  });
}

function nextTick(callback, delay) {
  if (delay === void 0) {
    delay = 0;
  }

  return setTimeout(callback, delay);
}

function now() {
  return Date.now();
}

function getTranslate(el, axis) {
  if (axis === void 0) {
    axis = 'x';
  }

  var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();
  var matrix;
  var curTransform;
  var transformMatrix;
  var curStyle = window.getComputedStyle(el, null);

  if (window.WebKitCSSMatrix) {
    curTransform = curStyle.transform || curStyle.webkitTransform;

    if (curTransform.split(',').length > 6) {
      curTransform = curTransform.split(', ').map(function (a) {
        return a.replace(',', '.');
      }).join(', ');
    } // Some old versions of Webkit choke when 'none' is passed; pass
    // empty string instead in this case


    transformMatrix = new window.WebKitCSSMatrix(curTransform === 'none' ? '' : curTransform);
  } else {
    transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(', 'matrix(1, 0, 0, 1,');
    matrix = transformMatrix.toString().split(',');
  }

  if (axis === 'x') {
    // Latest Chrome and webkits Fix
    if (window.WebKitCSSMatrix) curTransform = transformMatrix.m41; // Crazy IE10 Matrix
    else if (matrix.length === 16) curTransform = parseFloat(matrix[12]); // Normal Browsers
      else curTransform = parseFloat(matrix[4]);
  }

  if (axis === 'y') {
    // Latest Chrome and webkits Fix
    if (window.WebKitCSSMatrix) curTransform = transformMatrix.m42; // Crazy IE10 Matrix
    else if (matrix.length === 16) curTransform = parseFloat(matrix[13]); // Normal Browsers
      else curTransform = parseFloat(matrix[5]);
  }

  return curTransform || 0;
}

function isObject(o) {
  return typeof o === 'object' && o !== null && o.constructor && o.constructor === Object;
}

function extend() {
  var to = Object(arguments.length <= 0 ? undefined : arguments[0]);

  for (var i = 1; i < arguments.length; i += 1) {
    var nextSource = i < 0 || arguments.length <= i ? undefined : arguments[i];

    if (nextSource !== undefined && nextSource !== null) {
      var keysArray = Object.keys(Object(nextSource));

      for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {
        var nextKey = keysArray[nextIndex];
        var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);

        if (desc !== undefined && desc.enumerable) {
          if (isObject(to[nextKey]) && isObject(nextSource[nextKey])) {
            extend(to[nextKey], nextSource[nextKey]);
          } else if (!isObject(to[nextKey]) && isObject(nextSource[nextKey])) {
            to[nextKey] = {};
            extend(to[nextKey], nextSource[nextKey]);
          } else {
            to[nextKey] = nextSource[nextKey];
          }
        }
      }
    }
  }

  return to;
}

function bindModuleMethods(instance, obj) {
  Object.keys(obj).forEach(function (key) {
    if (isObject(obj[key])) {
      Object.keys(obj[key]).forEach(function (subKey) {
        if (typeof obj[key][subKey] === 'function') {
          obj[key][subKey] = obj[key][subKey].bind(instance);
        }
      });
    }

    instance[key] = obj[key];
  });
}



/***/ }),

/***/ "./node_modules/swiper/swiper-bundle.esm.js":
/*!**************************************************!*\
  !*** ./node_modules/swiper/swiper-bundle.esm.js ***!
  \**************************************************/
/*! exports provided: Swiper, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _esm_components_core_core_class__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./esm/components/core/core-class */ "./node_modules/swiper/esm/components/core/core-class.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Swiper", function() { return _esm_components_core_core_class__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _esm_components_core_core_class__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _esm_components_virtual_virtual__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./esm/components/virtual/virtual */ "./node_modules/swiper/esm/components/virtual/virtual.js");
/* harmony import */ var _esm_components_keyboard_keyboard__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./esm/components/keyboard/keyboard */ "./node_modules/swiper/esm/components/keyboard/keyboard.js");
/* harmony import */ var _esm_components_mousewheel_mousewheel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./esm/components/mousewheel/mousewheel */ "./node_modules/swiper/esm/components/mousewheel/mousewheel.js");
/* harmony import */ var _esm_components_navigation_navigation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./esm/components/navigation/navigation */ "./node_modules/swiper/esm/components/navigation/navigation.js");
/* harmony import */ var _esm_components_pagination_pagination__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./esm/components/pagination/pagination */ "./node_modules/swiper/esm/components/pagination/pagination.js");
/* harmony import */ var _esm_components_scrollbar_scrollbar__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./esm/components/scrollbar/scrollbar */ "./node_modules/swiper/esm/components/scrollbar/scrollbar.js");
/* harmony import */ var _esm_components_parallax_parallax__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./esm/components/parallax/parallax */ "./node_modules/swiper/esm/components/parallax/parallax.js");
/* harmony import */ var _esm_components_zoom_zoom__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./esm/components/zoom/zoom */ "./node_modules/swiper/esm/components/zoom/zoom.js");
/* harmony import */ var _esm_components_lazy_lazy__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./esm/components/lazy/lazy */ "./node_modules/swiper/esm/components/lazy/lazy.js");
/* harmony import */ var _esm_components_controller_controller__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./esm/components/controller/controller */ "./node_modules/swiper/esm/components/controller/controller.js");
/* harmony import */ var _esm_components_a11y_a11y__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./esm/components/a11y/a11y */ "./node_modules/swiper/esm/components/a11y/a11y.js");
/* harmony import */ var _esm_components_history_history__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./esm/components/history/history */ "./node_modules/swiper/esm/components/history/history.js");
/* harmony import */ var _esm_components_hash_navigation_hash_navigation__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./esm/components/hash-navigation/hash-navigation */ "./node_modules/swiper/esm/components/hash-navigation/hash-navigation.js");
/* harmony import */ var _esm_components_autoplay_autoplay__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./esm/components/autoplay/autoplay */ "./node_modules/swiper/esm/components/autoplay/autoplay.js");
/* harmony import */ var _esm_components_effect_fade_effect_fade__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./esm/components/effect-fade/effect-fade */ "./node_modules/swiper/esm/components/effect-fade/effect-fade.js");
/* harmony import */ var _esm_components_effect_cube_effect_cube__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./esm/components/effect-cube/effect-cube */ "./node_modules/swiper/esm/components/effect-cube/effect-cube.js");
/* harmony import */ var _esm_components_effect_flip_effect_flip__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./esm/components/effect-flip/effect-flip */ "./node_modules/swiper/esm/components/effect-flip/effect-flip.js");
/* harmony import */ var _esm_components_effect_coverflow_effect_coverflow__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./esm/components/effect-coverflow/effect-coverflow */ "./node_modules/swiper/esm/components/effect-coverflow/effect-coverflow.js");
/* harmony import */ var _esm_components_thumbs_thumbs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./esm/components/thumbs/thumbs */ "./node_modules/swiper/esm/components/thumbs/thumbs.js");
/**
 * Swiper 6.1.2
 * Most modern mobile touch slider and framework with hardware accelerated transitions
 * http://swiperjs.com
 *
 * Copyright 2014-2020 Vladimir Kharlampidi
 *
 * Released under the MIT License
 *
 * Released on: August 17, 2020
 */




















 // Swiper Class

var components = [_esm_components_virtual_virtual__WEBPACK_IMPORTED_MODULE_1__["default"], _esm_components_keyboard_keyboard__WEBPACK_IMPORTED_MODULE_2__["default"], _esm_components_mousewheel_mousewheel__WEBPACK_IMPORTED_MODULE_3__["default"], _esm_components_navigation_navigation__WEBPACK_IMPORTED_MODULE_4__["default"], _esm_components_pagination_pagination__WEBPACK_IMPORTED_MODULE_5__["default"], _esm_components_scrollbar_scrollbar__WEBPACK_IMPORTED_MODULE_6__["default"], _esm_components_parallax_parallax__WEBPACK_IMPORTED_MODULE_7__["default"], _esm_components_zoom_zoom__WEBPACK_IMPORTED_MODULE_8__["default"], _esm_components_lazy_lazy__WEBPACK_IMPORTED_MODULE_9__["default"], _esm_components_controller_controller__WEBPACK_IMPORTED_MODULE_10__["default"], _esm_components_a11y_a11y__WEBPACK_IMPORTED_MODULE_11__["default"], _esm_components_history_history__WEBPACK_IMPORTED_MODULE_12__["default"], _esm_components_hash_navigation_hash_navigation__WEBPACK_IMPORTED_MODULE_13__["default"], _esm_components_autoplay_autoplay__WEBPACK_IMPORTED_MODULE_14__["default"], _esm_components_effect_fade_effect_fade__WEBPACK_IMPORTED_MODULE_15__["default"], _esm_components_effect_cube_effect_cube__WEBPACK_IMPORTED_MODULE_16__["default"], _esm_components_effect_flip_effect_flip__WEBPACK_IMPORTED_MODULE_17__["default"], _esm_components_effect_coverflow_effect_coverflow__WEBPACK_IMPORTED_MODULE_18__["default"], _esm_components_thumbs_thumbs__WEBPACK_IMPORTED_MODULE_19__["default"]];
_esm_components_core_core_class__WEBPACK_IMPORTED_MODULE_0__["default"].use(components);

/***/ }),

/***/ "./src/includes/components/atoms/backToTop/backToTop.js":
/*!**************************************************************!*\
  !*** ./src/includes/components/atoms/backToTop/backToTop.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

(() => {
  const ctaWrapper = document.querySelector('.c-back-to-top-cta');

  if (ctaWrapper) {
    window.addEventListener('scroll', () => {
      window.pageYOffset > 250 ? ctaWrapper.classList.add('is-visible') : ctaWrapper.classList.remove('is-visible');
    });
    const cta = document.querySelector('.js-back-to-top-cta__link');
    cta.addEventListener('click', () => {
      window.scrollTo({
        top: 0,
        behavior: 'smooth'
      });
    });
  }
})();

/***/ }),

/***/ "./src/includes/components/atoms/backToTop/backToTop.test.js":
/*!*******************************************************************!*\
  !*** ./src/includes/components/atoms/backToTop/backToTop.test.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ "./src/includes/components/atoms/progressiveImage/progressiveImage.js":
/*!****************************************************************************!*\
  !*** ./src/includes/components/atoms/progressiveImage/progressiveImage.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

(() => {
  window.ObserveImages = elem => {
    const imageObserver = new IntersectionObserver((entries, imgObserver) => {
      // eslint-disable-line
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const lazyPicture = entry.target;
          const pic = lazyPicture.querySelectorAll('source');
          pic.forEach(source => {
            source.srcset = source.getAttribute('data-srcset');
          });
          lazyPicture.classList.remove('is-loading');
          lazyPicture.classList.add('is-loaded');
          lazyPicture.style.height = 'auto';
          lazyPicture.style.backgroundImage = 'none';
        }
      });
    });
    elem.forEach(val => {
      imageObserver.observe(val);
    });
  };

  const elements = document.querySelectorAll('picture.lazyload-true.is-loading');
  window.ObserveImages(elements);
})();

/***/ }),

/***/ "./src/includes/components/molecules/mood-selector/mood-selector.js":
/*!**************************************************************************!*\
  !*** ./src/includes/components/molecules/mood-selector/mood-selector.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

(() => {
  const moods = document.querySelectorAll('.c-mood-selector_emoji_link');
  const articlePage = document.querySelector('.article-wrapper');

  if (moods.length && articlePage) {
    const articleId = articlePage.getAttribute('data-page-id');
    let preSelectedMood;
    let data;
    let moodData;
    let finalData; // Retain active mood of article from localstorage

    if (localStorage.sim) {
      data = JSON.parse(localStorage.sim);
      data.forEach(d => {
        d.article === articleId ? preSelectedMood = d.mood : '';
      });
      moods.forEach(el => {
        const smiley = el.getAttribute('title').toLowerCase();

        if (smiley === preSelectedMood) {
          el.classList.add('active');
        }
      });
    }

    moods.forEach(mood => {
      // adding click event on mood
      mood.addEventListener('click', elt => {
        moods.forEach(el => {
          el.classList.remove('active');
        });
        !elt.currentTarget.classList.contains('active') ? elt.currentTarget.classList.add('active') : elt.currentTarget.classList.remove('active'); // setting localstorage w.r.t. article
        // TODO articleID need to be picked from article detail page / component. update below line later

        const selectedMood = elt.currentTarget.getAttribute('title').toLowerCase();
        const finalVal = {
          article: articleId,
          mood: selectedMood
        };

        if (localStorage.sim) {
          moodData = JSON.parse(localStorage.sim);
          finalData = JSON.parse(localStorage.sim);
          finalData.filter((d, j) => {
            if (d.article === articleId) {
              finalData.splice(j, 1);
            }

            return null;
          });
          finalData.push(finalVal);

          if (moodData.length < 1) {
            localStorage.setItem('sim', `[ ${JSON.stringify(finalVal)} ]`);
          } else {
            localStorage.setItem('sim', JSON.stringify(finalData));
          }
        } else {
          localStorage.setItem('sim', []);
          localStorage.setItem('sim', `[ ${JSON.stringify(finalVal)} ]`);
        }
      });
    });
  }
})();

/***/ }),

/***/ "./src/includes/components/molecules/mood-selector/mood-selector.test.js":
/*!*******************************************************************************!*\
  !*** ./src/includes/components/molecules/mood-selector/mood-selector.test.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ "./src/includes/components/molecules/social-share/social-share.js":
/*!************************************************************************!*\
  !*** ./src/includes/components/molecules/social-share/social-share.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

(() => {
  const breakpoint = window.matchMedia('(min-width: 36em)');
  const whatsapp = document.querySelector('.js-social-share-whatsapp');
  const fb = document.querySelector('.js-social-share-facebook');
  const twitter = document.querySelector('.js-social-share-twitter');
  const page = document.URL; // whatsapp share

  if (whatsapp) {
    whatsapp.addEventListener('click', e => {
      if (breakpoint.matches === false) {
        e.currentTarget.href = `http://wa.me/?text=${page}`;
      } else if (breakpoint.matches === true) {
        e.currentTarget.href = `https://web.whatsapp.com/send?text=${page}`;
      }

      e.currentTarget.setAttribute('target', '_blank');
    });
  } // twitter share


  if (twitter) {
    twitter.addEventListener('click', e => {
      e.currentTarget.href = `https://twitter.com/intent/tweet?original_referer=${page}`;
      e.currentTarget.setAttribute('target', '_blank');
    });
  } // facebook share


  if (fb) {
    fb.addEventListener('click', e => {
      e.currentTarget.href = '#';
      const uri = `https://www.facebook.com/sharer/sharer.php?u=${page}`;
      window.open(uri, 'pop', 'width=350 , height=150, scrollbars=no');
      return false;
    });
  }
})();

/***/ }),

/***/ "./src/includes/components/molecules/social-share/social-share.test.js":
/*!*****************************************************************************!*\
  !*** ./src/includes/components/molecules/social-share/social-share.test.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ "./src/includes/components/organisms/articleDetails/articleDetails.js":
/*!****************************************************************************!*\
  !*** ./src/includes/components/organisms/articleDetails/articleDetails.js ***!
  \****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var swiper_bundle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! swiper/bundle */ "./node_modules/swiper/swiper-bundle.esm.js");


(() => {
  const breakpoint = window.matchMedia('(min-width: 62em)');
  const layoutType = document.querySelector('input[name="articleLayoutType"]') ? document.querySelector('input[name="articleLayoutType"]').value : '';
  let mySwiper;

  const showElements = show => {
    let contentStatus;
    let titleStatus;

    if (show) {
      contentStatus = 'block';
      titleStatus = 'none';

      if (document.querySelector('.article-detail__pagination')) {
        document.querySelector('.article-detail__pagination').classList.add('hidden');
      }
    } else {
      contentStatus = 'none';
      titleStatus = 'block';

      if (document.querySelector('.article-detail__pagination')) {
        document.querySelector('.article-detail__pagination').classList.remove('hidden');
      }
    }

    if (document.querySelector('.article-detail__heading')) {
      document.querySelector('.article-detail__heading').style.display = titleStatus;
    }

    if (document.querySelector('.article-detail__title')) {
      document.querySelector('.article-detail__title').style.display = contentStatus;
    }

    if (document.querySelector('footer')) {
      document.querySelector('footer').style.display = contentStatus;
    }

    if (document.querySelector('.c-mood-selector-wrapper')) {
      document.querySelector('.c-mood-selector-wrapper').style.display = contentStatus;
    }
  };

  const createHeadingElement = () => {
    let headingEl;

    if (document.querySelector('.article-detail__title')) {
      headingEl = document.querySelector('.article-detail__title');

      if (document.querySelector('.article-detail__heading')) {
        document.querySelector('.article-detail__heading').innerHTML = headingEl.innerHTML;
        headingEl.style.display = 'none';
      }
    }
  };

  const enableSwiper = () => {
    mySwiper = new swiper_bundle__WEBPACK_IMPORTED_MODULE_0__["default"]('.swiper-container', {
      loop: false,
      init: true,
      slidesPerView: 'auto',
      centeredSlides: false,
      direction: 'horizontal',
      pagination: {
        el: '.swiper-pagination',
        clickable: true
      },
      navigation: {
        nextEl: '.swiper-button-next-btn',
        prevEl: '.swiper-button-prev-btn'
      },
      scrollbar: {
        el: '.swiper-scrollbar'
      },
      on: {
        init: () => {
          showElements(false);
          createHeadingElement();
        }
      }
    });
  };

  const breakpointChecker = () => {
    if (layoutType !== undefined && layoutType === 'instaCard') {
      if (breakpoint.matches === true) {
        if (mySwiper !== undefined && mySwiper.initialized === true) {
          showElements(true);
          mySwiper.detachEvents();
          mySwiper.destroy(true, true);
          return null;
        }
      } else if (breakpoint.matches === false) {
        return enableSwiper();
      }
    }

    return null;
  };

  breakpoint.addListener(breakpointChecker);
  breakpointChecker();
})();

/***/ }),

/***/ "./src/includes/components/organisms/globalHeader/global-header.js":
/*!*************************************************************************!*\
  !*** ./src/includes/components/organisms/globalHeader/global-header.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

(() => {
  const navItem = document.querySelector('.navbar__list');
  const hamburger = document.querySelector('#hamburger');
  const search = document.querySelector('#searchicon');
  const body = document.querySelector('body');
  navItem.addEventListener('click', e => {
    !e.target.classList.contains('dropdown--open') ? e.target.classList.add('dropdown--open') : e.target.classList.remove('dropdown--open');
  });
  hamburger.addEventListener('click', () => {
    !body.classList.contains('menu--open') ? body.classList.add('menu--open') : body.classList.remove('menu--open');
  });
  search.addEventListener('click', () => {
    !body.classList.contains('modal--open') ? body.classList.add('modal--open') : body.classList.remove('modal--open');
  });
})();

/***/ }),

/***/ "./src/includes/components/organisms/imageCarousel/imageCarousel.js":
/*!**************************************************************************!*\
  !*** ./src/includes/components/organisms/imageCarousel/imageCarousel.js ***!
  \**************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var swiper_bundle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! swiper/bundle */ "./node_modules/swiper/swiper-bundle.esm.js");


(() => {
  const enableSwiper = () => {
    return new swiper_bundle__WEBPACK_IMPORTED_MODULE_0__["default"]('.imageCarousel', {
      loop: false,
      slidesPerView: 'auto',
      centeredSlides: false,
      autoplay: true,
      direction: 'horizontal',
      pagination: {
        el: '.imageCarousel__pagination',
        clickable: true
      },
      navigation: {
        nextEl: '.swiper-button-next',
        prevEl: '.swiper-button-prev',
        hideOnClick: true
      },
      scrollbar: {
        el: '.swiper-scrollbar'
      },
      on: {
        init: () => {}
      }
    });
  };

  enableSwiper();
})();

/***/ }),

/***/ "./src/includes/components/organisms/searchOverlay/search-overlay.js":
/*!***************************************************************************!*\
  !*** ./src/includes/components/organisms/searchOverlay/search-overlay.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

(() => {
  const modalCLose = document.querySelector('#modalCLose');
  const search = document.querySelector('#globalSearch');
  const body = document.querySelector('body');
  const searchInput = document.querySelector('#searchTerm');
  modalCLose.addEventListener('click', () => {
    !body.classList.contains('modal--open') ? body.classList.add('modal--open') : body.classList.remove('modal--open');
    searchInput.value = '';
  });
  search.addEventListener('submit', e => {
    e.preventDefault();
    const searchTerm = document.getElementById('searchTerm').value;
    let searchUrl = document.getElementById('searchUrl').value;

    if (searchTerm !== '') {
      searchUrl = searchUrl.replace('{{searchTerm}}', searchTerm);
      searchInput.value = '';
      window.open(searchUrl, '_self');
    }
  });
})();

/***/ }),

/***/ 4:

  !*** multi ./src/includes/components/atoms/backToTop/backToTop.js ./src/includes/components/atoms/backToTop/backToTop.test.js ./src/includes/components/atoms/progressiveImage/progressiveImage.js ./src/includes/components/molecules/mood-selector/mood-selector.js ./src/includes/components/molecules/mood-selector/mood-selector.test.js ./src/includes/components/molecules/social-share/social-share.js ./src/includes/components/molecules/social-share/social-share.test.js ./src/includes/components/organisms/articleDetails/articleDetails.js ./src/includes/components/organisms/globalHeader/global-header.js ./src/includes/components/organisms/imageCarousel/imageCarousel.js ./src/includes/components/organisms/searchOverlay/search-overlay.js ***!

/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./src/includes/components/atoms/backToTop/backToTop.js */"./src/includes/components/atoms/backToTop/backToTop.js");
__webpack_require__(/*! ./src/includes/components/atoms/backToTop/backToTop.test.js */"./src/includes/components/atoms/backToTop/backToTop.test.js");
__webpack_require__(/*! ./src/includes/components/atoms/progressiveImage/progressiveImage.js */"./src/includes/components/atoms/progressiveImage/progressiveImage.js");
__webpack_require__(/*! ./src/includes/components/molecules/mood-selector/mood-selector.js */"./src/includes/components/molecules/mood-selector/mood-selector.js");
__webpack_require__(/*! ./src/includes/components/molecules/mood-selector/mood-selector.test.js */"./src/includes/components/molecules/mood-selector/mood-selector.test.js");
__webpack_require__(/*! ./src/includes/components/molecules/social-share/social-share.js */"./src/includes/components/molecules/social-share/social-share.js");
__webpack_require__(/*! ./src/includes/components/molecules/social-share/social-share.test.js */"./src/includes/components/molecules/social-share/social-share.test.js");
__webpack_require__(/*! ./src/includes/components/organisms/articleDetails/articleDetails.js */"./src/includes/components/organisms/articleDetails/articleDetails.js");
__webpack_require__(/*! ./src/includes/components/organisms/globalHeader/global-header.js */"./src/includes/components/organisms/globalHeader/global-header.js");
__webpack_require__(/*! ./src/includes/components/organisms/imageCarousel/imageCarousel.js */"./src/includes/components/organisms/imageCarousel/imageCarousel.js");
module.exports = __webpack_require__(/*! ./src/includes/components/organisms/searchOverlay/search-overlay.js */"./src/includes/components/organisms/searchOverlay/search-overlay.js");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbTcvZG9tNy5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Nzci13aW5kb3cvc3NyLXdpbmRvdy5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9hMTF5L2ExMXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9hdXRvcGxheS9hdXRvcGxheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvbnRyb2xsZXIvY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvYnJlYWtwb2ludHMvZ2V0QnJlYWtwb2ludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvYnJlYWtwb2ludHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2JyZWFrcG9pbnRzL3NldEJyZWFrcG9pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2NoZWNrLW92ZXJmbG93L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9jbGFzc2VzL2FkZENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2NsYXNzZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2NsYXNzZXMvcmVtb3ZlQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvY29yZS1jbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2V2ZW50cy1lbWl0dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9ldmVudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2V2ZW50cy9vbkNsaWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9ldmVudHMvb25SZXNpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2V2ZW50cy9vblNjcm9sbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvZXZlbnRzL29uVG91Y2hFbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2V2ZW50cy9vblRvdWNoTW92ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvZXZlbnRzL29uVG91Y2hTdGFydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvZ3JhYi1jdXJzb3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2dyYWItY3Vyc29yL3NldEdyYWJDdXJzb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2dyYWItY3Vyc29yL3Vuc2V0R3JhYkN1cnNvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvaW1hZ2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9pbWFnZXMvbG9hZEltYWdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9pbWFnZXMvcHJlbG9hZEltYWdlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvbG9vcC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvbG9vcC9sb29wQ3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9sb29wL2xvb3BEZXN0cm95LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9sb29wL2xvb3BGaXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL21hbmlwdWxhdGlvbi9hZGRTbGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvbWFuaXB1bGF0aW9uL2FwcGVuZFNsaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9tYW5pcHVsYXRpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL21hbmlwdWxhdGlvbi9wcmVwZW5kU2xpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL21hbmlwdWxhdGlvbi9yZW1vdmVBbGxTbGlkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL21hbmlwdWxhdGlvbi9yZW1vdmVTbGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvbW9kdWxhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvc2xpZGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3NsaWRlL3NsaWRlTmV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvc2xpZGUvc2xpZGVQcmV2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9zbGlkZS9zbGlkZVJlc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9zbGlkZS9zbGlkZVRvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9zbGlkZS9zbGlkZVRvQ2xpY2tlZFNsaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9zbGlkZS9zbGlkZVRvQ2xvc2VzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvc2xpZGUvc2xpZGVUb0xvb3AuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3RyYW5zaXRpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3RyYW5zaXRpb24vc2V0VHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvdHJhbnNpdGlvbi90cmFuc2l0aW9uRW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS90cmFuc2l0aW9uL3RyYW5zaXRpb25TdGFydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvdHJhbnNsYXRlL2dldFRyYW5zbGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvdHJhbnNsYXRlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS90cmFuc2xhdGUvbWF4VHJhbnNsYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS90cmFuc2xhdGUvbWluVHJhbnNsYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS90cmFuc2xhdGUvc2V0VHJhbnNsYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS90cmFuc2xhdGUvdHJhbnNsYXRlVG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3VwZGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvdXBkYXRlL3VwZGF0ZUFjdGl2ZUluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS91cGRhdGUvdXBkYXRlQXV0b0hlaWdodC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvdXBkYXRlL3VwZGF0ZUNsaWNrZWRTbGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvdXBkYXRlL3VwZGF0ZVByb2dyZXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS91cGRhdGUvdXBkYXRlU2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvdXBkYXRlL3VwZGF0ZVNsaWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvdXBkYXRlL3VwZGF0ZVNsaWRlc0NsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3VwZGF0ZS91cGRhdGVTbGlkZXNPZmZzZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3VwZGF0ZS91cGRhdGVTbGlkZXNQcm9ncmVzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2VmZmVjdC1jb3ZlcmZsb3cvZWZmZWN0LWNvdmVyZmxvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2VmZmVjdC1jdWJlL2VmZmVjdC1jdWJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvZWZmZWN0LWZhZGUvZWZmZWN0LWZhZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9lZmZlY3QtZmxpcC9lZmZlY3QtZmxpcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2hhc2gtbmF2aWdhdGlvbi9oYXNoLW5hdmlnYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9oaXN0b3J5L2hpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9rZXlib2FyZC9rZXlib2FyZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2xhenkvbGF6eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL21vdXNld2hlZWwvbW91c2V3aGVlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL25hdmlnYXRpb24vbmF2aWdhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL3BhZ2luYXRpb24vcGFnaW5hdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL3BhcmFsbGF4L3BhcmFsbGF4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvc2Nyb2xsYmFyL3Njcm9sbGJhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL3RodW1icy90aHVtYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy92aXJ0dWFsL3ZpcnR1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy96b29tL3pvb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vbW9kdWxlcy9vYnNlcnZlci9vYnNlcnZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9tb2R1bGVzL3Jlc2l6ZS9yZXNpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vdXRpbHMvZG9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL3V0aWxzL2dldC1icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL3V0aWxzL2dldC1kZXZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vdXRpbHMvZ2V0LXN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vdXRpbHMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zd2lwZXItYnVuZGxlLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5jbHVkZXMvY29tcG9uZW50cy9hdG9tcy9iYWNrVG9Ub3AvYmFja1RvVG9wLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmNsdWRlcy9jb21wb25lbnRzL2F0b21zL3Byb2dyZXNzaXZlSW1hZ2UvcHJvZ3Jlc3NpdmVJbWFnZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5jbHVkZXMvY29tcG9uZW50cy9tb2xlY3VsZXMvbW9vZC1zZWxlY3Rvci9tb29kLXNlbGVjdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmNsdWRlcy9jb21wb25lbnRzL21vbGVjdWxlcy9zb2NpYWwtc2hhcmUvc29jaWFsLXNoYXJlLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmNsdWRlcy9jb21wb25lbnRzL29yZ2FuaXNtcy9hcnRpY2xlRGV0YWlscy9hcnRpY2xlRGV0YWlscy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5jbHVkZXMvY29tcG9uZW50cy9vcmdhbmlzbXMvZ2xvYmFsSGVhZGVyL2dsb2JhbC1oZWFkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luY2x1ZGVzL2NvbXBvbmVudHMvb3JnYW5pc21zL2ltYWdlQ2Fyb3VzZWwvaW1hZ2VDYXJvdXNlbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5jbHVkZXMvY29tcG9uZW50cy9vcmdhbmlzbXMvc2VhcmNoT3ZlcmxheS9zZWFyY2gtb3ZlcmxheS5qcyJdLCJuYW1lcyI6WyJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwiX19wcm90b19fIiwiX2dldFByb3RvdHlwZU9mIiwibyIsInNldFByb3RvdHlwZU9mIiwiZ2V0UHJvdG90eXBlT2YiLCJfc2V0UHJvdG90eXBlT2YiLCJwIiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJzaGFtIiwiUHJveHkiLCJEYXRlIiwidG9TdHJpbmciLCJjYWxsIiwiZSIsIl9jb25zdHJ1Y3QiLCJQYXJlbnQiLCJhcmdzIiwiQ2xhc3MiLCJhIiwicHVzaCIsImFwcGx5IiwiQ29uc3RydWN0b3IiLCJGdW5jdGlvbiIsImJpbmQiLCJpbnN0YW5jZSIsImFyZ3VtZW50cyIsIl9pc05hdGl2ZUZ1bmN0aW9uIiwiZm4iLCJpbmRleE9mIiwiX3dyYXBOYXRpdmVTdXBlciIsIl9jYWNoZSIsIk1hcCIsInVuZGVmaW5lZCIsIlR5cGVFcnJvciIsImhhcyIsImdldCIsInNldCIsIldyYXBwZXIiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJtYWtlUmVhY3RpdmUiLCJvYmoiLCJwcm90byIsImRlZmluZVByb3BlcnR5IiwiRG9tNyIsIl9BcnJheSIsIml0ZW1zIiwiX3RoaXMiLCJjb25jYXQiLCJBcnJheSIsImFycmF5RmxhdCIsImFyciIsInJlcyIsImZvckVhY2giLCJlbCIsImlzQXJyYXkiLCJhcnJheUZpbHRlciIsImNhbGxiYWNrIiwiZmlsdGVyIiwiYXJyYXlVbmlxdWUiLCJ1bmlxdWVBcnJheSIsImkiLCJsZW5ndGgiLCJ0b0NhbWVsQ2FzZSIsInN0cmluZyIsInRvTG93ZXJDYXNlIiwicmVwbGFjZSIsIm1hdGNoIiwiZ3JvdXAiLCJ0b1VwcGVyQ2FzZSIsInFzYSIsInNlbGVjdG9yIiwiY29udGV4dCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCIkIiwid2luZG93IiwiZ2V0V2luZG93IiwiZG9jdW1lbnQiLCJnZXREb2N1bWVudCIsImh0bWwiLCJ0cmltIiwidG9DcmVhdGUiLCJ0ZW1wUGFyZW50IiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsImNoaWxkTm9kZXMiLCJub2RlVHlwZSIsImFkZENsYXNzIiwiX2xlbiIsImNsYXNzZXMiLCJfa2V5IiwiY2xhc3NOYW1lcyIsIm1hcCIsImMiLCJzcGxpdCIsIl9lbCRjbGFzc0xpc3QiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmVDbGFzcyIsIl9sZW4yIiwiX2tleTIiLCJfZWwkY2xhc3NMaXN0MiIsInJlbW92ZSIsInRvZ2dsZUNsYXNzIiwiX2xlbjMiLCJfa2V5MyIsImNsYXNzTmFtZSIsInRvZ2dsZSIsImhhc0NsYXNzIiwiX2xlbjQiLCJfa2V5NCIsImNvbnRhaW5zIiwiYXR0ciIsImF0dHJzIiwiZ2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwiYXR0ck5hbWUiLCJyZW1vdmVBdHRyIiwicmVtb3ZlQXR0cmlidXRlIiwicHJvcCIsInByb3BzIiwicHJvcE5hbWUiLCJkYXRhIiwia2V5IiwiZG9tN0VsZW1lbnREYXRhU3RvcmFnZSIsImRhdGFLZXkiLCJyZW1vdmVEYXRhIiwiZGF0YXNldCIsImF0dHJpYnV0ZXMiLCJfYXR0ciIsIm5hbWUiLCJwYXJzZUZsb2F0IiwidmFsIiwibXVsdGlwbGUiLCJub2RlTmFtZSIsInZhbHVlcyIsInNlbGVjdGVkT3B0aW9ucyIsIl9pIiwiX2VsIiwiaiIsIm9wdGlvbnMiLCJzZWxlY3RlZCIsInRyYW5zZm9ybSIsInN0eWxlIiwidHJhbnNpdGlvbiIsImR1cmF0aW9uIiwib24iLCJfbGVuNSIsIl9rZXk1IiwiZXZlbnRUeXBlIiwidGFyZ2V0U2VsZWN0b3IiLCJsaXN0ZW5lciIsImNhcHR1cmUiLCJoYW5kbGVMaXZlRXZlbnQiLCJ0YXJnZXQiLCJldmVudERhdGEiLCJkb203RXZlbnREYXRhIiwidW5zaGlmdCIsImlzIiwiX3BhcmVudHMiLCJwYXJlbnRzIiwiayIsImhhbmRsZUV2ZW50IiwiZXZlbnRzIiwiZXZlbnQiLCJkb203TGlzdGVuZXJzIiwicHJveHlMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJfZXZlbnQiLCJkb203TGl2ZUxpc3RlbmVycyIsIm9mZiIsIl9sZW42IiwiX2tleTYiLCJoYW5kbGVycyIsImhhbmRsZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic3BsaWNlIiwiZG9tN3Byb3h5Iiwib25jZSIsImRvbSIsIl9sZW43IiwiX2tleTciLCJldmVudE5hbWUiLCJvbmNlSGFuZGxlciIsIl9sZW44IiwiZXZlbnRBcmdzIiwiX2tleTgiLCJ0cmlnZ2VyIiwiX2xlbjkiLCJfa2V5OSIsIkN1c3RvbUV2ZW50IiwiZXZ0IiwiZGV0YWlsIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJkYXRhSW5kZXgiLCJkaXNwYXRjaEV2ZW50IiwidHJhbnNpdGlvbkVuZCIsImZpcmVDYWxsQmFjayIsImFuaW1hdGlvbkVuZCIsIndpZHRoIiwiaW5uZXJXaWR0aCIsImNzcyIsIm91dGVyV2lkdGgiLCJpbmNsdWRlTWFyZ2lucyIsIl9zdHlsZXMiLCJzdHlsZXMiLCJvZmZzZXRXaWR0aCIsImdldFByb3BlcnR5VmFsdWUiLCJoZWlnaHQiLCJpbm5lckhlaWdodCIsIm91dGVySGVpZ2h0IiwiX3N0eWxlczIiLCJvZmZzZXRIZWlnaHQiLCJvZmZzZXQiLCJib3giLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJib2R5IiwiY2xpZW50VG9wIiwiY2xpZW50TGVmdCIsInNjcm9sbFRvcCIsInNjcm9sbFkiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsWCIsInRvcCIsImxlZnQiLCJoaWRlIiwiZGlzcGxheSIsInNob3ciLCJnZXRDb21wdXRlZFN0eWxlIiwiX3Byb3AiLCJlYWNoIiwiaW5kZXgiLCJyZXN1bHQiLCJ0ZXh0IiwidGV4dENvbnRlbnQiLCJjb21wYXJlV2l0aCIsIm1hdGNoZXMiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImNoaWxkIiwicHJldmlvdXNTaWJsaW5nIiwiZXEiLCJyZXR1cm5JbmRleCIsImFwcGVuZCIsIm5ld0NoaWxkIiwidGVtcERpdiIsImZpcnN0Q2hpbGQiLCJhcHBlbmRDaGlsZCIsImFwcGVuZFRvIiwicGFyZW50IiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsInByZXBlbmRUbyIsImJlZm9yZSIsInBhcmVudE5vZGUiLCJjbG9uZU5vZGUiLCJpbnNlcnRBZnRlciIsImFmdGVyIiwibmV4dFNpYmxpbmciLCJuZXh0IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwibmV4dEFsbCIsIm5leHRFbHMiLCJfbmV4dCIsInByZXYiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwicHJldkFsbCIsInByZXZFbHMiLCJfcHJldiIsInNpYmxpbmdzIiwiX3BhcmVudCIsImNsb3Nlc3QiLCJmaW5kIiwiZm91bmRFbGVtZW50cyIsImZvdW5kIiwiY2hpbGRyZW4iLCJyZW1vdmVDaGlsZCIsImRldGFjaCIsIl9sZW4xMCIsImVscyIsIl9rZXkxMCIsInRvQWRkIiwiZW1wdHkiLCJzY3JvbGxUbyIsImVhc2luZyIsImFuaW1hdGUiLCJjdXJyZW50VG9wIiwiY3VycmVudExlZnQiLCJtYXhUb3AiLCJtYXhMZWZ0IiwibmV3VG9wIiwibmV3TGVmdCIsImFuaW1hdGVUb3AiLCJhbmltYXRlTGVmdCIsInNjcm9sbEhlaWdodCIsIk1hdGgiLCJtYXgiLCJtaW4iLCJzY3JvbGxXaWR0aCIsInN0YXJ0VGltZSIsInJlbmRlciIsInRpbWUiLCJnZXRUaW1lIiwicHJvZ3Jlc3MiLCJlYXNlUHJvZ3Jlc3MiLCJjb3MiLCJQSSIsImRvbmUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJpbml0aWFsUHJvcHMiLCJpbml0aWFsUGFyYW1zIiwiYXNzaWduIiwicGFyYW1zIiwiZWxlbWVudHMiLCJhbmltYXRpbmciLCJxdWUiLCJlYXNpbmdQcm9ncmVzcyIsInN0b3AiLCJmcmFtZUlkIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJlbGVtZW50IiwiZG9tN0FuaW1hdGVJbnN0YW5jZSIsImNvbXBsZXRlIiwic2hpZnQiLCJpbml0aWFsRnVsbFZhbHVlIiwiaW5pdGlhbFZhbHVlIiwidW5pdCIsImZpbmFsVmFsdWUiLCJmaW5hbEZ1bGxWYWx1ZSIsImNvbnRhaW5lciIsImtleXMiLCJjdXJyZW50VmFsdWUiLCJlbGVtZW50c0RvbmUiLCJwcm9wc0RvbmUiLCJiZWdhbiIsImJlZ2luIiwiX2VsJHByb3AiLCJhbmltYXRlSW5zdGFuY2UiLCJub1RyaWdnZXIiLCJzaG9ydGN1dCIsImV2ZW50SGFuZGxlciIsImNsaWNrIiwiYmx1ciIsImZvY3VzIiwiZm9jdXNpbiIsImZvY3Vzb3V0Iiwia2V5dXAiLCJrZXlkb3duIiwia2V5cHJlc3MiLCJzdWJtaXQiLCJjaGFuZ2UiLCJtb3VzZWRvd24iLCJtb3VzZW1vdmUiLCJtb3VzZXVwIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJtb3VzZW91dCIsIm1vdXNlb3ZlciIsInRvdWNoc3RhcnQiLCJ0b3VjaGVuZCIsInRvdWNobW92ZSIsInJlc2l6ZSIsInNjcm9sbCIsImlzT2JqZWN0IiwiZXh0ZW5kIiwic3JjIiwic3NyRG9jdW1lbnQiLCJhY3RpdmVFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsImdldEVsZW1lbnRCeUlkIiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImNyZWF0ZUVsZW1lbnROUyIsImltcG9ydE5vZGUiLCJsb2NhdGlvbiIsImhhc2giLCJob3N0IiwiaG9zdG5hbWUiLCJocmVmIiwib3JpZ2luIiwicGF0aG5hbWUiLCJwcm90b2NvbCIsInNlYXJjaCIsImRvYyIsInNzcldpbmRvdyIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImhpc3RvcnkiLCJyZXBsYWNlU3RhdGUiLCJwdXNoU3RhdGUiLCJnbyIsImJhY2siLCJJbWFnZSIsInNjcmVlbiIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJtYXRjaE1lZGlhIiwiaWQiLCJ3aW4iLCJfZXh0ZW5kcyIsInNvdXJjZSIsImhhc093blByb3BlcnR5IiwiQTExeSIsIm1ha2VFbEZvY3VzYWJsZSIsIiRlbCIsIm1ha2VFbE5vdEZvY3VzYWJsZSIsImFkZEVsUm9sZSIsInJvbGUiLCJhZGRFbExhYmVsIiwibGFiZWwiLCJkaXNhYmxlRWwiLCJlbmFibGVFbCIsIm9uRW50ZXJLZXkiLCJzd2lwZXIiLCJhMTF5Iiwia2V5Q29kZSIsIiR0YXJnZXRFbCIsIm5hdmlnYXRpb24iLCIkbmV4dEVsIiwiaXNFbmQiLCJsb29wIiwic2xpZGVOZXh0Iiwibm90aWZ5IiwibGFzdFNsaWRlTWVzc2FnZSIsIm5leHRTbGlkZU1lc3NhZ2UiLCIkcHJldkVsIiwiaXNCZWdpbm5pbmciLCJzbGlkZVByZXYiLCJmaXJzdFNsaWRlTWVzc2FnZSIsInByZXZTbGlkZU1lc3NhZ2UiLCJwYWdpbmF0aW9uIiwiYnVsbGV0Q2xhc3MiLCJtZXNzYWdlIiwibm90aWZpY2F0aW9uIiwibGl2ZVJlZ2lvbiIsInVwZGF0ZU5hdmlnYXRpb24iLCJfc3dpcGVyJG5hdmlnYXRpb24iLCJ1cGRhdGVQYWdpbmF0aW9uIiwiY2xpY2thYmxlIiwiYnVsbGV0cyIsImJ1bGxldEVsIiwiJGJ1bGxldEVsIiwicGFnaW5hdGlvbkJ1bGxldE1lc3NhZ2UiLCJpbml0IiwiZGVzdHJveSIsImVuYWJsZWQiLCJub3RpZmljYXRpb25DbGFzcyIsImJpbmRNb2R1bGVNZXRob2RzIiwidG9FZGdlIiwiZnJvbUVkZ2UiLCJwYWdpbmF0aW9uVXBkYXRlIiwiQXV0b3BsYXkiLCJydW4iLCIkYWN0aXZlU2xpZGVFbCIsInNsaWRlcyIsImFjdGl2ZUluZGV4IiwiZGVsYXkiLCJhdXRvcGxheSIsInRpbWVvdXQiLCJuZXh0VGljayIsInJldmVyc2VEaXJlY3Rpb24iLCJsb29wRml4Iiwic3BlZWQiLCJlbWl0Iiwic3RvcE9uTGFzdFNsaWRlIiwic2xpZGVUbyIsImNzc01vZGUiLCJydW5uaW5nIiwic3RhcnQiLCJwYXVzZSIsInBhdXNlZCIsIndhaXRGb3JUcmFuc2l0aW9uIiwiJHdyYXBwZXJFbCIsIm9uVHJhbnNpdGlvbkVuZCIsIm9uVmlzaWJpbGl0eUNoYW5nZSIsInZpc2liaWxpdHlTdGF0ZSIsImRlc3Ryb3llZCIsImRpc2FibGVPbkludGVyYWN0aW9uIiwiYmVmb3JlVHJhbnNpdGlvblN0YXJ0IiwiaW50ZXJuYWwiLCJzbGlkZXJGaXJzdE1vdmUiLCJ0b3VjaEVuZCIsIkNvbnRyb2xsZXIiLCJMaW5lYXJTcGxpbmUiLCJ4IiwieSIsImJpbmFyeVNlYXJjaCIsIm1heEluZGV4IiwibWluSW5kZXgiLCJndWVzcyIsImFycmF5IiwibGFzdEluZGV4IiwiaTEiLCJpMyIsImludGVycG9sYXRlIiwieDIiLCJnZXRJbnRlcnBvbGF0ZUZ1bmN0aW9uIiwiY29udHJvbGxlciIsInNwbGluZSIsInNsaWRlc0dyaWQiLCJzbmFwR3JpZCIsInNldFRyYW5zbGF0ZSIsIl9zZXRUcmFuc2xhdGUiLCJieUNvbnRyb2xsZXIiLCJjb250cm9sbGVkIiwiY29udHJvbCIsIm11bHRpcGxpZXIiLCJjb250cm9sbGVkVHJhbnNsYXRlIiwiU3dpcGVyIiwic2V0Q29udHJvbGxlZFRyYW5zbGF0ZSIsInRyYW5zbGF0ZSIsInJ0bFRyYW5zbGF0ZSIsImJ5IiwibWF4VHJhbnNsYXRlIiwibWluVHJhbnNsYXRlIiwiaW52ZXJzZSIsInVwZGF0ZVByb2dyZXNzIiwidXBkYXRlQWN0aXZlSW5kZXgiLCJ1cGRhdGVTbGlkZXNDbGFzc2VzIiwic2V0VHJhbnNpdGlvbiIsInNldENvbnRyb2xsZWRUcmFuc2l0aW9uIiwidHJhbnNpdGlvblN0YXJ0IiwiYXV0b0hlaWdodCIsInVwZGF0ZUF1dG9IZWlnaHQiLCJ1cGRhdGUiLCJvYnNlcnZlclVwZGF0ZSIsImdldEJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludHMiLCJicmVha3BvaW50IiwicG9pbnRzIiwicG9pbnQiLCJtaW5SYXRpbyIsInN1YnN0ciIsInNvcnQiLCJiIiwicGFyc2VJbnQiLCJfcG9pbnRzJGkiLCJzZXRCcmVha3BvaW50IiwiZ2V0QnJlYWtwb2ludCIsImluaXRpYWxpemVkIiwiX3N3aXBlciRsb29wZWRTbGlkZXMiLCJsb29wZWRTbGlkZXMiLCJjdXJyZW50QnJlYWtwb2ludCIsImJyZWFrcG9pbnRPbmx5UGFyYW1zIiwicGFyYW0iLCJwYXJhbVZhbHVlIiwiYnJlYWtwb2ludFBhcmFtcyIsIm9yaWdpbmFsUGFyYW1zIiwid2FzTXVsdGlSb3ciLCJzbGlkZXNQZXJDb2x1bW4iLCJpc011bHRpUm93IiwiY29udGFpbmVyTW9kaWZpZXJDbGFzcyIsImVtaXRDb250YWluZXJDbGFzc2VzIiwic2xpZGVzUGVyQ29sdW1uRmlsbCIsImRpcmVjdGlvbkNoYW5nZWQiLCJkaXJlY3Rpb24iLCJuZWVkc1JlTG9vcCIsInNsaWRlc1BlclZpZXciLCJjaGFuZ2VEaXJlY3Rpb24iLCJhbGxvd1RvdWNoTW92ZSIsImFsbG93U2xpZGVOZXh0IiwiYWxsb3dTbGlkZVByZXYiLCJsb29wRGVzdHJveSIsImxvb3BDcmVhdGUiLCJ1cGRhdGVTbGlkZXMiLCJjaGVja092ZXJmbG93Iiwid2FzTG9ja2VkIiwiaXNMb2NrZWQiLCJsYXN0U2xpZGVQb3NpdGlvbiIsInNsaWRlc09mZnNldEJlZm9yZSIsInNwYWNlQmV0d2VlbiIsInNsaWRlc09mZnNldEFmdGVyIiwic2l6ZSIsImFkZENsYXNzZXMiLCJydGwiLCJkZXZpY2UiLCJzdWZmaXhlcyIsImZyZWVNb2RlIiwiYW5kcm9pZCIsImlvcyIsInN1ZmZpeCIsImpvaW4iLCJyZW1vdmVDbGFzc2VzIiwiX2RlZmluZVByb3BlcnRpZXMiLCJkZXNjcmlwdG9yIiwiX2NyZWF0ZUNsYXNzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwicHJvdG90eXBlcyIsIm1vZHVsYXIiLCJldmVudHNFbWl0dGVyIiwic2xpZGUiLCJncmFiQ3Vyc29yIiwibWFuaXB1bGF0aW9uIiwiaW1hZ2VzIiwiZXh0ZW5kZWREZWZhdWx0cyIsInN1cHBvcnQiLCJnZXRTdXBwb3J0IiwiZ2V0RGV2aWNlIiwiYnJvd3NlciIsImdldEJyb3dzZXIiLCJldmVudHNMaXN0ZW5lcnMiLCJldmVudHNBbnlMaXN0ZW5lcnMiLCJwcm90b3R5cGVHcm91cCIsInByb3RvTWV0aG9kIiwibW9kdWxlcyIsIm1vZHVsZU5hbWUiLCJtb2R1bGUiLCJtb2R1bGVQYXJhbU5hbWUiLCJtb2R1bGVQYXJhbXMiLCJzd2lwZXJQYXJhbXMiLCJkZWZhdWx0cyIsInVzZVBhcmFtcyIsInBhc3NlZFBhcmFtcyIsInN3aXBlcnMiLCJjb250YWluZXJFbCIsIm5ld1BhcmFtcyIsInNoYWRvd1Jvb3QiLCJ3cmFwcGVyQ2xhc3MiLCJ3cmFwcGVyRWwiLCJzbGlkZXNTaXplc0dyaWQiLCJpc0hvcml6b250YWwiLCJpc1ZlcnRpY2FsIiwiZGlyIiwid3JvbmdSVEwiLCJyZWFsSW5kZXgiLCJwcmV2aW91c1RyYW5zbGF0ZSIsInZlbG9jaXR5IiwidG91Y2hFdmVudHMiLCJ0b3VjaCIsImRlc2t0b3AiLCJwb2ludGVyRXZlbnRzIiwidG91Y2hFdmVudHNUb3VjaCIsIm1vdmUiLCJlbmQiLCJjYW5jZWwiLCJ0b3VjaEV2ZW50c0Rlc2t0b3AiLCJzaW11bGF0ZVRvdWNoIiwidG91Y2hFdmVudHNEYXRhIiwiaXNUb3VjaGVkIiwiaXNNb3ZlZCIsImFsbG93VG91Y2hDYWxsYmFja3MiLCJ0b3VjaFN0YXJ0VGltZSIsImlzU2Nyb2xsaW5nIiwiY3VycmVudFRyYW5zbGF0ZSIsInN0YXJ0VHJhbnNsYXRlIiwiYWxsb3dUaHJlc2hvbGRNb3ZlIiwiZm9ybUVsZW1lbnRzIiwibGFzdENsaWNrVGltZSIsIm5vdyIsImNsaWNrVGltZW91dCIsInZlbG9jaXRpZXMiLCJhbGxvd01vbWVudHVtQm91bmNlIiwiaXNUb3VjaEV2ZW50Iiwic3RhcnRNb3ZpbmciLCJhbGxvd0NsaWNrIiwidG91Y2hlcyIsInN0YXJ0WCIsInN0YXJ0WSIsImN1cnJlbnRYIiwiY3VycmVudFkiLCJkaWZmIiwiaW1hZ2VzVG9Mb2FkIiwiaW1hZ2VzTG9hZGVkIiwidXNlTW9kdWxlcyIsIl9wcm90byIsIl9lbWl0Q2xhc3NlcyIsImVtaXRTbGlkZXNDbGFzc2VzIiwic2xpZGVFbCIsInNsaWRlQ2xhc3MiLCJzbGlkZXNQZXJWaWV3RHluYW1pYyIsInN3aXBlclNpemUiLCJzcHYiLCJjZW50ZXJlZFNsaWRlcyIsInNsaWRlU2l6ZSIsInN3aXBlclNsaWRlU2l6ZSIsImJyZWFrTG9vcCIsIl9pMiIsInVwZGF0ZVNpemUiLCJ0cmFuc2xhdGVWYWx1ZSIsIm5ld1RyYW5zbGF0ZSIsInRyYW5zbGF0ZWQiLCJ3YXRjaE92ZXJmbG93IiwibmV3RGlyZWN0aW9uIiwibmVlZFVwZGF0ZSIsImN1cnJlbnREaXJlY3Rpb24iLCJzZXRHcmFiQ3Vyc29yIiwicHJlbG9hZEltYWdlcyIsImluaXRpYWxTbGlkZSIsInJ1bkNhbGxiYWNrc09uSW5pdCIsImF0dGFjaEV2ZW50cyIsImRlbGV0ZUluc3RhbmNlIiwiY2xlYW5TdHlsZXMiLCJkZXRhY2hFdmVudHMiLCJzbGlkZVZpc2libGVDbGFzcyIsInNsaWRlQWN0aXZlQ2xhc3MiLCJzbGlkZU5leHRDbGFzcyIsInNsaWRlUHJldkNsYXNzIiwiZGVsZXRlUHJvcHMiLCJleHRlbmREZWZhdWx0cyIsIm5ld0RlZmF1bHRzIiwiaW5zdGFsbE1vZHVsZSIsInVzZSIsIm0iLCJSZXNpemUiLCJPYnNlcnZlciIsInRvdWNoRXZlbnRzVGFyZ2V0IiwidXBkYXRlT25XaW5kb3dSZXNpemUiLCJwcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24iLCJ1cmwiLCJlZGdlU3dpcGVEZXRlY3Rpb24iLCJlZGdlU3dpcGVUaHJlc2hvbGQiLCJmcmVlTW9kZU1vbWVudHVtIiwiZnJlZU1vZGVNb21lbnR1bVJhdGlvIiwiZnJlZU1vZGVNb21lbnR1bUJvdW5jZSIsImZyZWVNb2RlTW9tZW50dW1Cb3VuY2VSYXRpbyIsImZyZWVNb2RlTW9tZW50dW1WZWxvY2l0eVJhdGlvIiwiZnJlZU1vZGVTdGlja3kiLCJmcmVlTW9kZU1pbmltdW1WZWxvY2l0eSIsInNldFdyYXBwZXJTaXplIiwidmlydHVhbFRyYW5zbGF0ZSIsImVmZmVjdCIsInNsaWRlc1Blckdyb3VwIiwic2xpZGVzUGVyR3JvdXBTa2lwIiwiY2VudGVyZWRTbGlkZXNCb3VuZHMiLCJub3JtYWxpemVTbGlkZUluZGV4IiwiY2VudGVySW5zdWZmaWNpZW50U2xpZGVzIiwicm91bmRMZW5ndGhzIiwidG91Y2hSYXRpbyIsInRvdWNoQW5nbGUiLCJzaG9ydFN3aXBlcyIsImxvbmdTd2lwZXMiLCJsb25nU3dpcGVzUmF0aW8iLCJsb25nU3dpcGVzTXMiLCJmb2xsb3dGaW5nZXIiLCJ0aHJlc2hvbGQiLCJ0b3VjaE1vdmVTdG9wUHJvcGFnYXRpb24iLCJ0b3VjaFN0YXJ0UHJldmVudERlZmF1bHQiLCJ0b3VjaFN0YXJ0Rm9yY2VQcmV2ZW50RGVmYXVsdCIsInRvdWNoUmVsZWFzZU9uRWRnZXMiLCJ1bmlxdWVOYXZFbGVtZW50cyIsInJlc2lzdGFuY2UiLCJyZXNpc3RhbmNlUmF0aW8iLCJ3YXRjaFNsaWRlc1Byb2dyZXNzIiwid2F0Y2hTbGlkZXNWaXNpYmlsaXR5IiwicHJldmVudENsaWNrcyIsInByZXZlbnRDbGlja3NQcm9wYWdhdGlvbiIsInNsaWRlVG9DbGlja2VkU2xpZGUiLCJ1cGRhdGVPbkltYWdlc1JlYWR5IiwibG9vcEFkZGl0aW9uYWxTbGlkZXMiLCJsb29wRmlsbEdyb3VwV2l0aEJsYW5rIiwibG9vcFByZXZlbnRzU2xpZGUiLCJzd2lwZUhhbmRsZXIiLCJub1N3aXBpbmciLCJub1N3aXBpbmdDbGFzcyIsIm5vU3dpcGluZ1NlbGVjdG9yIiwicGFzc2l2ZUxpc3RlbmVycyIsInNsaWRlQmxhbmtDbGFzcyIsInNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3MiLCJzbGlkZUR1cGxpY2F0ZUNsYXNzIiwic2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3MiLCJzbGlkZUR1cGxpY2F0ZVByZXZDbGFzcyIsInByaW9yaXR5IiwibWV0aG9kIiwiX19lbWl0dGVyUHJveHkiLCJvbkFueSIsIm9mZkFueSIsInNsaWNlIiwiZXZlbnRzQXJyYXkiLCJkdW1teUV2ZW50QXR0YWNoZWQiLCJkdW1teUV2ZW50TGlzdGVuZXIiLCJvblRvdWNoU3RhcnQiLCJvblRvdWNoTW92ZSIsIm9uVG91Y2hFbmQiLCJvblNjcm9sbCIsIm9uQ2xpY2siLCJuZXN0ZWQiLCJwYXNzaXZlTGlzdGVuZXIiLCJwYXNzaXZlIiwib25SZXNpemUiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIm5ld1Byb2dyZXNzIiwidHJhbnNsYXRlc0RpZmYiLCJvcmlnaW5hbEV2ZW50IiwidG91Y2hFbmRUaW1lIiwidGltZURpZmYiLCJ1cGRhdGVDbGlja2VkU2xpZGUiLCJzd2lwZURpcmVjdGlvbiIsImN1cnJlbnRQb3MiLCJsYXN0TW92ZUV2ZW50IiwicG9wIiwidmVsb2NpdHlFdmVudCIsImRpc3RhbmNlIiwicG9zaXRpb24iLCJhYnMiLCJtb21lbnR1bUR1cmF0aW9uIiwibW9tZW50dW1EaXN0YW5jZSIsIm5ld1Bvc2l0aW9uIiwiZG9Cb3VuY2UiLCJhZnRlckJvdW5jZVBvc2l0aW9uIiwiYm91bmNlQW1vdW50IiwibmVlZHNMb29wRml4IiwibmV4dFNsaWRlIiwibW92ZURpc3RhbmNlIiwiY3VycmVudFNsaWRlU2l6ZSIsInNsaWRlVG9DbG9zZXN0Iiwic3RvcEluZGV4IiwiZ3JvdXBTaXplIiwiX2luY3JlbWVudCIsInJhdGlvIiwiaW5jcmVtZW50IiwiaXNOYXZCdXR0b25UYXJnZXQiLCJuZXh0RWwiLCJwcmV2RWwiLCJ0eXBlIiwidGFyZ2V0VG91Y2giLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJwYWdlWCIsInBhZ2VZIiwicHJldmVudGVkQnlOZXN0ZWRTd2lwZXIiLCJkaWZmWCIsImRpZmZZIiwic3FydCIsInBvdyIsImF0YW4yIiwiZ2V0VHJhbnNsYXRlIiwiZGlzYWJsZVBhcmVudFN3aXBlciIsIndoaWNoIiwiYnV0dG9uIiwiaU9TRWRnZVN3aXBlRGV0ZWN0aW9uIiwiaU9TRWRnZVN3aXBlVGhyZXNob2xkIiwic2hvdWxkUHJldmVudERlZmF1bHQiLCJ1bnNldEdyYWJDdXJzb3IiLCJtb3ZpbmciLCJjdXJzb3IiLCJsb2FkSW1hZ2UiLCJpbWFnZUVsIiwic3Jjc2V0Iiwic2l6ZXMiLCJjaGVja0ZvckNvbXBsZXRlIiwiaW1hZ2UiLCJvblJlYWR5IiwiaXNQaWN0dXJlIiwib25sb2FkIiwib25lcnJvciIsImN1cnJlbnRTcmMiLCJibGFua1NsaWRlc051bSIsImJsYW5rTm9kZSIsImNlaWwiLCJwcmVwZW5kU2xpZGVzIiwiYXBwZW5kU2xpZGVzIiwibmV3SW5kZXgiLCJzbmFwVHJhbnNsYXRlIiwic2xpZGVDaGFuZ2VkIiwiX3NsaWRlQ2hhbmdlZCIsImFkZFNsaWRlIiwiYWN0aXZlSW5kZXhCdWZmZXIiLCJiYXNlTGVuZ3RoIiwicHJlcGVuZFNsaWRlIiwiYXBwZW5kU2xpZGUiLCJuZXdBY3RpdmVJbmRleCIsInNsaWRlc0J1ZmZlciIsImN1cnJlbnRTbGlkZSIsIm9ic2VydmVyIiwicmVtb3ZlU2xpZGUiLCJyZW1vdmVBbGxTbGlkZXMiLCJzbGlkZXNJbmRleGVzIiwiaW5kZXhUb1JlbW92ZSIsImluc3RhbmNlUGFyYW1zIiwibW9kdWxlc1BhcmFtcyIsIm1vZHVsZUV2ZW50TmFtZSIsInNsaWRlVG9Mb29wIiwic2xpZGVSZXNldCIsInJ1bkNhbGxiYWNrcyIsIl9jbGllbnRMZWZ0Iiwibm9ybWFsaXplIiwiZmxvb3IiLCJub3JtYWxpemVkVHJhbnNsYXRlIiwibm9ybWFsaXplZFNuYXBHcmlkIiwiY3VycmVudFNuYXAiLCJwcmV2U25hcCIsInNuYXAiLCJwcmV2SW5kZXgiLCJzbGlkZUluZGV4IiwicHJldmlvdXNJbmRleCIsInNraXAiLCJzbmFwSW5kZXgiLCJpc0giLCJ0IiwiX3dyYXBwZXJFbCRzY3JvbGxUbyIsImJlaGF2aW9yIiwib25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQiLCJzbGlkZVRvSW5kZXgiLCJjbGlja2VkSW5kZXgiLCJjbGlja2VkU2xpZGUiLCJuZXh0U25hcCIsIl9jdXJyZW50U25hcCIsImdldFN3aXBlclRyYW5zbGF0ZSIsImF4aXMiLCJ0cmFuc2xhdGVUbyIsInoiLCJ0cmFuc2xhdGVCb3VuZHMiLCJvblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQiLCJ1cGRhdGVTbGlkZXNPZmZzZXQiLCJ1cGRhdGVTbGlkZXNQcm9ncmVzcyIsInByZXZpb3VzUmVhbEluZGV4IiwicHJldmlvdXNTbmFwSW5kZXgiLCJhY3RpdmVTbGlkZXMiLCJuZXdIZWlnaHQiLCJ2aXNpYmxlU2xpZGVzIiwic2xpZGVGb3VuZCIsInZpcnR1YWwiLCJ3YXNCZWdpbm5pbmciLCJ3YXNFbmQiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsIk51bWJlciIsImlzTmFOIiwiaXNWaXJ0dWFsIiwicHJldmlvdXNTbGlkZXNMZW5ndGgiLCJzbGlkZXNMZW5ndGgiLCJzbGlkZXNGb3JNYXJnaW4iLCJvZmZzZXRCZWZvcmUiLCJvZmZzZXRBZnRlciIsInByZXZpb3VzU25hcEdyaWRMZW5ndGgiLCJwcmV2aW91c1NsaWRlc0dyaWRMZW5ndGgiLCJzbGlkZVBvc2l0aW9uIiwicHJldlNsaWRlU2l6ZSIsInZpcnR1YWxTaXplIiwibWFyZ2luTGVmdCIsIm1hcmdpblRvcCIsIm1hcmdpblJpZ2h0IiwibWFyZ2luQm90dG9tIiwic2xpZGVzTnVtYmVyRXZlblRvUm93cyIsInNsaWRlc1BlclJvdyIsIm51bUZ1bGxDb2x1bW5zIiwibmV3U2xpZGVPcmRlckluZGV4IiwiY29sdW1uIiwicm93IiwiZ3JvdXBJbmRleCIsInNsaWRlSW5kZXhJbkdyb3VwIiwiY29sdW1uc0luR3JvdXAiLCJvcmRlciIsInNsaWRlU3R5bGVzIiwiY3VycmVudFRyYW5zZm9ybSIsImN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0iLCJ3ZWJraXRUcmFuc2Zvcm0iLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsImJveFNpemluZyIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwiX2JveFNpemluZyIsIm5ld1NsaWRlc0dyaWQiLCJzbGlkZXNHcmlkSXRlbSIsIl9zbGlkZXNHcmlkSXRlbSIsImFsbFNsaWRlc1NpemUiLCJzbGlkZVNpemVWYWx1ZSIsIm1heFNuYXAiLCJfYWxsU2xpZGVzU2l6ZSIsImFsbFNsaWRlc09mZnNldCIsImFjdGl2ZVNsaWRlIiwicHJldlNsaWRlIiwic3dpcGVyU2xpZGVPZmZzZXQiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwib2Zmc2V0Q2VudGVyIiwidmlzaWJsZVNsaWRlc0luZGV4ZXMiLCJzbGlkZVByb2dyZXNzIiwic2xpZGVCZWZvcmUiLCJzbGlkZUFmdGVyIiwiaXNWaXNpYmxlIiwiQ292ZXJmbG93Iiwic3dpcGVyV2lkdGgiLCJzd2lwZXJIZWlnaHQiLCJjb3ZlcmZsb3dFZmZlY3QiLCJjZW50ZXIiLCJyb3RhdGUiLCJkZXB0aCIsIiRzbGlkZUVsIiwic2xpZGVPZmZzZXQiLCJvZmZzZXRNdWx0aXBsaWVyIiwibW9kaWZpZXIiLCJyb3RhdGVZIiwicm90YXRlWCIsInRyYW5zbGF0ZVoiLCJzdHJldGNoIiwidHJhbnNsYXRlWSIsInRyYW5zbGF0ZVgiLCJzY2FsZSIsInNsaWRlVHJhbnNmb3JtIiwiekluZGV4Iiwicm91bmQiLCJzbGlkZVNoYWRvd3MiLCIkc2hhZG93QmVmb3JlRWwiLCIkc2hhZG93QWZ0ZXJFbCIsIm9wYWNpdHkiLCJiZWZvcmVJbml0IiwiQ3ViZSIsImN1YmVFZmZlY3QiLCJ3cmFwcGVyUm90YXRlIiwiJGN1YmVTaGFkb3dFbCIsInNoYWRvdyIsInNsaWRlQW5nbGUiLCJ0eCIsInR5IiwidHoiLCJzaGFkb3dCZWZvcmUiLCJzaGFkb3dBZnRlciIsInNoYWRvd09mZnNldCIsInNoYWRvd1NjYWxlIiwic2hhZG93QW5nbGUiLCJzaW4iLCJzY2FsZTEiLCJzY2FsZTIiLCJ6RmFjdG9yIiwiaXNTYWZhcmkiLCJpc1dlYlZpZXciLCJvdmVyd3JpdGVQYXJhbXMiLCJGYWRlIiwic2xpZGVPcGFjaXR5IiwiZmFkZUVmZmVjdCIsImNyb3NzRmFkZSIsImV2ZW50VHJpZ2dlcmVkIiwidHJpZ2dlckV2ZW50cyIsIkZsaXAiLCJmbGlwRWZmZWN0IiwibGltaXRSb3RhdGlvbiIsIkhhc2hOYXZpZ2F0aW9uIiwib25IYXNoQ2FuZ2UiLCJuZXdIYXNoIiwiYWN0aXZlU2xpZGVIYXNoIiwic2V0SGFzaCIsImhhc2hOYXZpZ2F0aW9uIiwic2xpZGVIYXNoIiwid2F0Y2hTdGF0ZSIsInNsaWRlQ2hhbmdlIiwiSGlzdG9yeSIsInBhdGhzIiwiZ2V0UGF0aFZhbHVlcyIsInNjcm9sbFRvU2xpZGUiLCJzZXRIaXN0b3J5UG9wU3RhdGUiLCJ1cmxPdmVycmlkZSIsIlVSTCIsInBhdGhBcnJheSIsInBhcnQiLCJ0b3RhbCIsInNldEhpc3RvcnkiLCJzbHVnaWZ5IiwiaW5jbHVkZXMiLCJjdXJyZW50U3RhdGUiLCJzdGF0ZSIsInNsaWRlSGlzdG9yeSIsIktleWJvYXJkIiwiaGFuZGxlIiwia2MiLCJjaGFyQ29kZSIsInBhZ2VVcERvd24iLCJrZXlib2FyZCIsImlzUGFnZVVwIiwiaXNQYWdlRG93biIsImlzQXJyb3dMZWZ0IiwiaXNBcnJvd1JpZ2h0IiwiaXNBcnJvd1VwIiwiaXNBcnJvd0Rvd24iLCJzaGlmdEtleSIsImFsdEtleSIsImN0cmxLZXkiLCJtZXRhS2V5Iiwib25seUluVmlld3BvcnQiLCJpblZpZXciLCJ3aW5kb3dXaWR0aCIsIndpbmRvd0hlaWdodCIsInN3aXBlck9mZnNldCIsInN3aXBlckNvb3JkIiwicmV0dXJuVmFsdWUiLCJlbmFibGUiLCJkaXNhYmxlIiwiTGF6eSIsImxvYWRJblNsaWRlIiwibG9hZEluRHVwbGljYXRlIiwibGF6eSIsIiRpbWFnZXMiLCJlbGVtZW50Q2xhc3MiLCJsb2FkZWRDbGFzcyIsImxvYWRpbmdDbGFzcyIsIiRpbWFnZUVsIiwiYmFja2dyb3VuZCIsIiRwaWN0dXJlRWwiLCJzb3VyY2VFbCIsIiRzb3VyY2UiLCJwcmVsb2FkZXJDbGFzcyIsInNsaWRlT3JpZ2luYWxJbmRleCIsIm9yaWdpbmFsU2xpZGUiLCJkdXBsaWNhdGVkU2xpZGUiLCJsb2FkIiwic2xpZGVFeGlzdCIsImluaXRpYWxJbWFnZUxvYWRlZCIsImxvYWRQcmV2TmV4dCIsImxvYWRQcmV2TmV4dEFtb3VudCIsImFtb3VudCIsImxvYWRPblRyYW5zaXRpb25TdGFydCIsInNjcm9sbGJhckRyYWdNb3ZlIiwiaXNFdmVudFN1cHBvcnRlZCIsImlzU3VwcG9ydGVkIiwiaW1wbGVtZW50YXRpb24iLCJoYXNGZWF0dXJlIiwiTW91c2V3aGVlbCIsImxhc3RTY3JvbGxUaW1lIiwibGFzdEV2ZW50QmVmb3JlU25hcCIsInJlY2VudFdoZWVsRXZlbnRzIiwiUElYRUxfU1RFUCIsIkxJTkVfSEVJR0hUIiwiUEFHRV9IRUlHSFQiLCJzWCIsInNZIiwicFgiLCJwWSIsIndoZWVsRGVsdGEiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGFYIiwiSE9SSVpPTlRBTF9BWElTIiwiZGVsdGFZIiwiZGVsdGFYIiwiZGVsdGFNb2RlIiwic3BpblgiLCJzcGluWSIsInBpeGVsWCIsInBpeGVsWSIsImhhbmRsZU1vdXNlRW50ZXIiLCJtb3VzZUVudGVyZWQiLCJoYW5kbGVNb3VzZUxlYXZlIiwibW91c2V3aGVlbCIsImV2ZW50c1RhcmdldCIsInJlbGVhc2VPbkVkZ2VzIiwiZGVsdGEiLCJydGxGYWN0b3IiLCJmb3JjZVRvQXhpcyIsImludmVydCIsIm5ld0V2ZW50Iiwic2lnbiIsInJhdyIsInByZXZFdmVudCIsImFuaW1hdGVTbGlkZXIiLCJyZWxlYXNlU2Nyb2xsIiwiX25ld0V2ZW50IiwiaWdub3JlV2hlZWxFdmVudHMiLCJzZW5zaXRpdml0eSIsIl9yZWNlbnRXaGVlbEV2ZW50cyIsIl9wcmV2RXZlbnQiLCJmaXJzdEV2ZW50Iiwic25hcFRvVGhyZXNob2xkIiwiYXV0b3BsYXlEaXNhYmxlT25JbnRlcmFjdGlvbiIsInRocmVzaG9sZERlbHRhIiwidGhyZXNob2xkVGltZSIsIk5hdmlnYXRpb24iLCJkaXNhYmxlZENsYXNzIiwibG9ja0NsYXNzIiwib25QcmV2Q2xpY2siLCJvbk5leHRDbGljayIsIl9zd2lwZXIkbmF2aWdhdGlvbjIiLCJoaWRlT25DbGljayIsImhpZGRlbkNsYXNzIiwiX3N3aXBlciRuYXZpZ2F0aW9uMyIsImlzSGlkZGVuIiwiUGFnaW5hdGlvbiIsImN1cnJlbnQiLCJwYWdpbmF0aW9uVHlwZSIsImZpcnN0SW5kZXgiLCJtaWRJbmRleCIsImR5bmFtaWNCdWxsZXRzIiwiYnVsbGV0U2l6ZSIsImR5bmFtaWNNYWluQnVsbGV0cyIsImR5bmFtaWNCdWxsZXRJbmRleCIsImJ1bGxldEFjdGl2ZUNsYXNzIiwiYnVsbGV0IiwiJGJ1bGxldCIsImJ1bGxldEluZGV4IiwiJGZpcnN0RGlzcGxheWVkQnVsbGV0IiwiJGxhc3REaXNwbGF5ZWRCdWxsZXQiLCJkeW5hbWljQnVsbGV0c0xlbmd0aCIsImJ1bGxldHNPZmZzZXQiLCJvZmZzZXRQcm9wIiwiY3VycmVudENsYXNzIiwiZm9ybWF0RnJhY3Rpb25DdXJyZW50IiwidG90YWxDbGFzcyIsImZvcm1hdEZyYWN0aW9uVG90YWwiLCJwcm9ncmVzc2JhckRpcmVjdGlvbiIsInByb2dyZXNzYmFyT3Bwb3NpdGUiLCJzY2FsZVgiLCJzY2FsZVkiLCJwcm9ncmVzc2JhckZpbGxDbGFzcyIsInJlbmRlckN1c3RvbSIsInBhZ2luYXRpb25IVE1MIiwibnVtYmVyT2ZCdWxsZXRzIiwicmVuZGVyQnVsbGV0IiwiYnVsbGV0RWxlbWVudCIsInJlbmRlckZyYWN0aW9uIiwicmVuZGVyUHJvZ3Jlc3NiYXIiLCJjbGlja2FibGVDbGFzcyIsIm1vZGlmaWVyQ2xhc3MiLCJwcm9ncmVzc2Jhck9wcG9zaXRlQ2xhc3MiLCJudW1iZXIiLCJhY3RpdmVJbmRleENoYW5nZSIsInNuYXBJbmRleENoYW5nZSIsInNsaWRlc0xlbmd0aENoYW5nZSIsInNuYXBHcmlkTGVuZ3RoQ2hhbmdlIiwiUGFyYWxsYXgiLCJzZXRUcmFuc2Zvcm0iLCJjdXJyZW50T3BhY2l0eSIsImN1cnJlbnRTY2FsZSIsInBhcmFsbGF4IiwicGFyYWxsYXhFbCIsIiRwYXJhbGxheEVsIiwicGFyYWxsYXhEdXJhdGlvbiIsIlNjcm9sbGJhciIsInNjcm9sbGJhciIsImRyYWdTaXplIiwidHJhY2tTaXplIiwiJGRyYWdFbCIsIm5ld1NpemUiLCJuZXdQb3MiLCJkaXZpZGVyIiwibW92ZURpdmlkZXIiLCJnZXRQb2ludGVyUG9zaXRpb24iLCJjbGllbnRYIiwiY2xpZW50WSIsInNldERyYWdQb3NpdGlvbiIsImRyYWdTdGFydFBvcyIsInBvc2l0aW9uUmF0aW8iLCJvbkRyYWdTdGFydCIsImRyYWdUaW1lb3V0Iiwib25EcmFnTW92ZSIsIm9uRHJhZ0VuZCIsInNuYXBPblJlbGVhc2UiLCJlbmFibGVEcmFnZ2FibGUiLCJhY3RpdmVMaXN0ZW5lciIsImRpc2FibGVEcmFnZ2FibGUiLCIkc3dpcGVyRWwiLCJkcmFnQ2xhc3MiLCJkcmFnRWwiLCJkcmFnZ2FibGUiLCJUaHVtYnMiLCJ0aHVtYnNQYXJhbXMiLCJ0aHVtYnMiLCJTd2lwZXJDbGFzcyIsInN3aXBlckNyZWF0ZWQiLCJ0aHVtYnNDb250YWluZXJDbGFzcyIsIm9uVGh1bWJDbGljayIsInRodW1ic1N3aXBlciIsInNsaWRlVGh1bWJBY3RpdmVDbGFzcyIsImN1cnJlbnRJbmRleCIsIm5leHRJbmRleCIsImluaXRpYWwiLCJhdXRvU2Nyb2xsT2Zmc2V0IiwidXNlT2Zmc2V0IiwiY3VycmVudFRodW1ic0luZGV4IiwibmV3VGh1bWJzSW5kZXgiLCJwcmV2VGh1bWJzSW5kZXgiLCJuZXh0VGh1bWJzSW5kZXgiLCJ0aHVtYnNUb0FjdGl2YXRlIiwidGh1bWJBY3RpdmVDbGFzcyIsIm11bHRpcGxlQWN0aXZlVGh1bWJzIiwiYmVmb3JlRGVzdHJveSIsIlZpcnR1YWwiLCJmb3JjZSIsIl9zd2lwZXIkcGFyYW1zIiwiX3N3aXBlciRwYXJhbXMkdmlydHVhIiwiYWRkU2xpZGVzQmVmb3JlIiwiYWRkU2xpZGVzQWZ0ZXIiLCJfc3dpcGVyJHZpcnR1YWwiLCJwcmV2aW91c0Zyb20iLCJmcm9tIiwicHJldmlvdXNUbyIsInRvIiwicHJldmlvdXNTbGlkZXNHcmlkIiwicmVuZGVyU2xpZGUiLCJwcmV2aW91c09mZnNldCIsInNsaWRlc0FmdGVyIiwic2xpZGVzQmVmb3JlIiwib25SZW5kZXJlZCIsInJlbmRlckV4dGVybmFsIiwiZ2V0U2xpZGVzIiwic2xpZGVzVG9SZW5kZXIiLCJyZW5kZXJFeHRlcm5hbFVwZGF0ZSIsInByZXBlbmRJbmRleGVzIiwiYXBwZW5kSW5kZXhlcyIsImNhY2hlIiwibnVtYmVyT2ZOZXdTbGlkZXMiLCJuZXdDYWNoZSIsImNhY2hlZEluZGV4IiwiJGNhY2hlZEVsIiwiY2FjaGVkRWxJbmRleCIsIlpvb20iLCJnZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzIiwieDEiLCJ5MSIsInkyIiwib25HZXN0dXJlU3RhcnQiLCJ6b29tIiwiZ2VzdHVyZSIsImZha2VHZXN0dXJlVG91Y2hlZCIsImZha2VHZXN0dXJlTW92ZWQiLCJnZXN0dXJlcyIsInNjYWxlU3RhcnQiLCIkaW1hZ2VXcmFwRWwiLCJjb250YWluZXJDbGFzcyIsIm1heFJhdGlvIiwiaXNTY2FsaW5nIiwib25HZXN0dXJlQ2hhbmdlIiwic2NhbGVNb3ZlIiwib25HZXN0dXJlRW5kIiwidG91Y2hlc1N0YXJ0Iiwic2xpZGVXaWR0aCIsInNsaWRlSGVpZ2h0Iiwic2NhbGVkV2lkdGgiLCJzY2FsZWRIZWlnaHQiLCJtaW5YIiwibWF4WCIsIm1pblkiLCJtYXhZIiwidG91Y2hlc0N1cnJlbnQiLCJwcmV2UG9zaXRpb25YIiwicHJldlBvc2l0aW9uWSIsInByZXZUaW1lIiwibW9tZW50dW1EdXJhdGlvblgiLCJtb21lbnR1bUR1cmF0aW9uWSIsIm1vbWVudHVtRGlzdGFuY2VYIiwibmV3UG9zaXRpb25YIiwibW9tZW50dW1EaXN0YW5jZVkiLCJuZXdQb3NpdGlvblkiLCJvdXQiLCJpbiIsIl9pbiIsInpvb21lZFNsaWRlQ2xhc3MiLCJ0b3VjaFgiLCJ0b3VjaFkiLCJvZmZzZXRYIiwib2Zmc2V0WSIsImltYWdlV2lkdGgiLCJpbWFnZUhlaWdodCIsInRyYW5zbGF0ZU1pblgiLCJ0cmFuc2xhdGVNaW5ZIiwidHJhbnNsYXRlTWF4WCIsInRyYW5zbGF0ZU1heFkiLCJ0b2dnbGVHZXN0dXJlcyIsInNsaWRlU2VsZWN0b3IiLCJlbmFibGVHZXN0dXJlcyIsImdlc3R1cmVzRW5hYmxlZCIsImRpc2FibGVHZXN0dXJlcyIsImFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmUiLCJ0b3VjaFN0YXJ0IiwiZG91YmxlVGFwIiwiYXR0YWNoIiwiT2JzZXJ2ZXJGdW5jIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYmtpdE11dGF0aW9uT2JzZXJ2ZXIiLCJtdXRhdGlvbnMiLCJvYnNlcnZlIiwiY2hpbGRMaXN0IiwiY2hhcmFjdGVyRGF0YSIsIm9ic2VydmVycyIsIm9ic2VydmVQYXJlbnRzIiwiY29udGFpbmVyUGFyZW50cyIsIm9ic2VydmVTbGlkZUNoaWxkcmVuIiwiZGlzY29ubmVjdCIsInJlc2l6ZUhhbmRsZXIiLCJvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIiLCJNZXRob2RzIiwibWV0aG9kTmFtZSIsImNhbGNCcm93c2VyIiwidWEiLCJpc0VkZ2UiLCJ0ZXN0IiwiY2FsY0RldmljZSIsIl90ZW1wIiwiX3JlZiIsInBsYXRmb3JtIiwic2NyZWVuV2lkdGgiLCJzY3JlZW5IZWlnaHQiLCJpcGFkIiwiaXBvZCIsImlwaG9uZSIsIndpbmRvd3MiLCJtYWNvcyIsImlQYWRTY3JlZW5zIiwib3MiLCJvdmVycmlkZXMiLCJjYWxjU3VwcG9ydCIsIkRvY3VtZW50VG91Y2giLCJQb2ludGVyRXZlbnQiLCJtYXhUb3VjaFBvaW50cyIsImNoZWNrT2JzZXJ2ZXIiLCJjaGVja1Bhc3NpdmVMaXN0ZW5lciIsInN1cHBvcnRzUGFzc2l2ZSIsIm9wdHMiLCJjaGVja0dlc3R1cmVzIiwib2JqZWN0IiwibWF0cml4IiwiY3VyVHJhbnNmb3JtIiwidHJhbnNmb3JtTWF0cml4IiwiY3VyU3R5bGUiLCJXZWJLaXRDU1NNYXRyaXgiLCJNb3pUcmFuc2Zvcm0iLCJPVHJhbnNmb3JtIiwiTXNUcmFuc2Zvcm0iLCJtc1RyYW5zZm9ybSIsIm00MSIsIm00MiIsIm5leHRTb3VyY2UiLCJrZXlzQXJyYXkiLCJsZW4iLCJuZXh0S2V5IiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInN1YktleSIsImNvbXBvbmVudHMiLCJFZmZlY3RGYWRlIiwiRWZmZWN0Q3ViZSIsIkVmZmVjdEZsaXAiLCJFZmZlY3RDb3ZlcmZsb3ciLCJjdGFXcmFwcGVyIiwicGFnZVlPZmZzZXQiLCJjdGEiLCJPYnNlcnZlSW1hZ2VzIiwiZWxlbSIsImltYWdlT2JzZXJ2ZXIiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsImVudHJpZXMiLCJpbWdPYnNlcnZlciIsImVudHJ5IiwiaXNJbnRlcnNlY3RpbmciLCJsYXp5UGljdHVyZSIsInBpYyIsImJhY2tncm91bmRJbWFnZSIsIm1vb2RzIiwiYXJ0aWNsZVBhZ2UiLCJhcnRpY2xlSWQiLCJwcmVTZWxlY3RlZE1vb2QiLCJtb29kRGF0YSIsImZpbmFsRGF0YSIsImxvY2FsU3RvcmFnZSIsInNpbSIsIkpTT04iLCJwYXJzZSIsImQiLCJhcnRpY2xlIiwibW9vZCIsInNtaWxleSIsImVsdCIsImN1cnJlbnRUYXJnZXQiLCJzZWxlY3RlZE1vb2QiLCJmaW5hbFZhbCIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJ3aGF0c2FwcCIsImZiIiwidHdpdHRlciIsInBhZ2UiLCJ1cmkiLCJvcGVuIiwibGF5b3V0VHlwZSIsIm15U3dpcGVyIiwic2hvd0VsZW1lbnRzIiwiY29udGVudFN0YXR1cyIsInRpdGxlU3RhdHVzIiwiY3JlYXRlSGVhZGluZ0VsZW1lbnQiLCJoZWFkaW5nRWwiLCJlbmFibGVTd2lwZXIiLCJicmVha3BvaW50Q2hlY2tlciIsImFkZExpc3RlbmVyIiwibmF2SXRlbSIsImhhbWJ1cmdlciIsIm1vZGFsQ0xvc2UiLCJzZWFyY2hJbnB1dCIsInNlYXJjaFRlcm0iLCJzZWFyY2hVcmwiXSwibWFwcGluZ3MiOiI7UUFBQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTs7O1FBR0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLDBDQUEwQyxnQ0FBZ0M7UUFDMUU7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSx3REFBd0Qsa0JBQWtCO1FBQzFFO1FBQ0EsaURBQWlELGNBQWM7UUFDL0Q7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBLHlDQUF5QyxpQ0FBaUM7UUFDMUUsZ0hBQWdILG1CQUFtQixFQUFFO1FBQ3JJO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0EsMkJBQTJCLDBCQUEwQixFQUFFO1FBQ3ZELGlDQUFpQyxlQUFlO1FBQ2hEO1FBQ0E7UUFDQTs7UUFFQTtRQUNBLHNEQUFzRCwrREFBK0Q7O1FBRXJIO1FBQ0E7OztRQUdBO1FBQ0E7Ozs7Ozs7Ozs7Ozs7QUNsRkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7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QUM4MkMsSUFBUCxDQUFZZ0IsU0FBWixFQUF1QixPQUF2QjtBQUNEO0FBQ0YsR0FWRDtBQVdELENBeEJELEkiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDQpO1xuIiwiLyoqXG4gKiBEb203IDMuMC4wLWFscGhhLjlcbiAqIE1pbmltYWxpc3RpYyBKYXZhU2NyaXB0IGxpYnJhcnkgZm9yIERPTSBtYW5pcHVsYXRpb24sIHdpdGggYSBqUXVlcnktY29tcGF0aWJsZSBBUElcbiAqIGh0dHBzOi8vZnJhbWV3b3JrNy5pby9kb2NzL2RvbTcuaHRtbFxuICpcbiAqIENvcHlyaWdodCAyMDIwLCBWbGFkaW1pciBLaGFybGFtcGlkaVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVFxuICpcbiAqIFJlbGVhc2VkIG9uOiBBdWd1c3QgMjUsIDIwMjBcbiAqL1xuaW1wb3J0IHsgZ2V0V2luZG93LCBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTtcbiAgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTtcbiAgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTtcblxuICB0cnkge1xuICAgIERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7XG4gIGlmIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkpIHtcbiAgICBfY29uc3RydWN0ID0gUmVmbGVjdC5jb25zdHJ1Y3Q7XG4gIH0gZWxzZSB7XG4gICAgX2NvbnN0cnVjdCA9IGZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykge1xuICAgICAgdmFyIGEgPSBbbnVsbF07XG4gICAgICBhLnB1c2guYXBwbHkoYSwgYXJncyk7XG4gICAgICB2YXIgQ29uc3RydWN0b3IgPSBGdW5jdGlvbi5iaW5kLmFwcGx5KFBhcmVudCwgYSk7XG4gICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTtcbiAgICAgIGlmIChDbGFzcykgX3NldFByb3RvdHlwZU9mKGluc3RhbmNlLCBDbGFzcy5wcm90b3R5cGUpO1xuICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX2NvbnN0cnVjdC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVGdW5jdGlvbihmbikge1xuICByZXR1cm4gRnVuY3Rpb24udG9TdHJpbmcuY2FsbChmbikuaW5kZXhPZihcIltuYXRpdmUgY29kZV1cIikgIT09IC0xO1xufVxuXG5mdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7XG4gIHZhciBfY2FjaGUgPSB0eXBlb2YgTWFwID09PSBcImZ1bmN0aW9uXCIgPyBuZXcgTWFwKCkgOiB1bmRlZmluZWQ7XG5cbiAgX3dyYXBOYXRpdmVTdXBlciA9IGZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHtcbiAgICBpZiAoQ2xhc3MgPT09IG51bGwgfHwgIV9pc05hdGl2ZUZ1bmN0aW9uKENsYXNzKSkgcmV0dXJuIENsYXNzO1xuXG4gICAgaWYgKHR5cGVvZiBDbGFzcyAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBfY2FjaGUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGlmIChfY2FjaGUuaGFzKENsYXNzKSkgcmV0dXJuIF9jYWNoZS5nZXQoQ2xhc3MpO1xuXG4gICAgICBfY2FjaGUuc2V0KENsYXNzLCBXcmFwcGVyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBXcmFwcGVyKCkge1xuICAgICAgcmV0dXJuIF9jb25zdHJ1Y3QoQ2xhc3MsIGFyZ3VtZW50cywgX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yKTtcbiAgICB9XG5cbiAgICBXcmFwcGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogV3JhcHBlcixcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gX3NldFByb3RvdHlwZU9mKFdyYXBwZXIsIENsYXNzKTtcbiAgfTtcblxuICByZXR1cm4gX3dyYXBOYXRpdmVTdXBlcihDbGFzcyk7XG59XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5mdW5jdGlvbiBtYWtlUmVhY3RpdmUob2JqKSB7XG4gIHZhciBwcm90byA9IG9iai5fX3Byb3RvX187XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosICdfX3Byb3RvX18nLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gcHJvdG87XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgcHJvdG8uX19wcm90b19fID0gdmFsdWU7XG4gICAgfVxuICB9KTtcbn1cblxudmFyIERvbTcgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9BcnJheSkge1xuICBfaW5oZXJpdHNMb29zZShEb203LCBfQXJyYXkpO1xuXG4gIGZ1bmN0aW9uIERvbTcoaXRlbXMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9BcnJheS5jYWxsLmFwcGx5KF9BcnJheSwgW3RoaXNdLmNvbmNhdChpdGVtcykpIHx8IHRoaXM7XG4gICAgbWFrZVJlYWN0aXZlKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICByZXR1cm4gRG9tNztcbn0oIC8qI19fUFVSRV9fKi9fd3JhcE5hdGl2ZVN1cGVyKEFycmF5KSk7XG5cbmZ1bmN0aW9uIGFycmF5RmxhdChhcnIpIHtcbiAgaWYgKGFyciA9PT0gdm9pZCAwKSB7XG4gICAgYXJyID0gW107XG4gIH1cblxuICB2YXIgcmVzID0gW107XG4gIGFyci5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGVsKSkge1xuICAgICAgcmVzLnB1c2guYXBwbHkocmVzLCBhcnJheUZsYXQoZWwpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzLnB1c2goZWwpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBhcnJheUZpbHRlcihhcnIsIGNhbGxiYWNrKSB7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoYXJyLCBjYWxsYmFjayk7XG59XG5mdW5jdGlvbiBhcnJheVVuaXF1ZShhcnIpIHtcbiAgdmFyIHVuaXF1ZUFycmF5ID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAodW5pcXVlQXJyYXkuaW5kZXhPZihhcnJbaV0pID09PSAtMSkgdW5pcXVlQXJyYXkucHVzaChhcnJbaV0pO1xuICB9XG5cbiAgcmV0dXJuIHVuaXF1ZUFycmF5O1xufVxuZnVuY3Rpb24gdG9DYW1lbENhc2Uoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8tKC4pL2csIGZ1bmN0aW9uIChtYXRjaCwgZ3JvdXApIHtcbiAgICByZXR1cm4gZ3JvdXAudG9VcHBlckNhc2UoKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHFzYShzZWxlY3RvciwgY29udGV4dCkge1xuICBpZiAodHlwZW9mIHNlbGVjdG9yICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBbc2VsZWN0b3JdO1xuICB9XG5cbiAgdmFyIGEgPSBbXTtcbiAgdmFyIHJlcyA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBhLnB1c2gocmVzW2ldKTtcbiAgfVxuXG4gIHJldHVybiBhO1xufVxuXG5mdW5jdGlvbiAkKHNlbGVjdG9yLCBjb250ZXh0KSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgdmFyIGFyciA9IFtdO1xuXG4gIGlmICghY29udGV4dCAmJiBzZWxlY3RvciBpbnN0YW5jZW9mIERvbTcpIHtcbiAgICByZXR1cm4gc2VsZWN0b3I7XG4gIH1cblxuICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIG5ldyBEb203KGFycik7XG4gIH1cblxuICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAnc3RyaW5nJykge1xuICAgIHZhciBodG1sID0gc2VsZWN0b3IudHJpbSgpO1xuXG4gICAgaWYgKGh0bWwuaW5kZXhPZignPCcpID49IDAgJiYgaHRtbC5pbmRleE9mKCc+JykgPj0gMCkge1xuICAgICAgdmFyIHRvQ3JlYXRlID0gJ2Rpdic7XG4gICAgICBpZiAoaHRtbC5pbmRleE9mKCc8bGknKSA9PT0gMCkgdG9DcmVhdGUgPSAndWwnO1xuICAgICAgaWYgKGh0bWwuaW5kZXhPZignPHRyJykgPT09IDApIHRvQ3JlYXRlID0gJ3Rib2R5JztcbiAgICAgIGlmIChodG1sLmluZGV4T2YoJzx0ZCcpID09PSAwIHx8IGh0bWwuaW5kZXhPZignPHRoJykgPT09IDApIHRvQ3JlYXRlID0gJ3RyJztcbiAgICAgIGlmIChodG1sLmluZGV4T2YoJzx0Ym9keScpID09PSAwKSB0b0NyZWF0ZSA9ICd0YWJsZSc7XG4gICAgICBpZiAoaHRtbC5pbmRleE9mKCc8b3B0aW9uJykgPT09IDApIHRvQ3JlYXRlID0gJ3NlbGVjdCc7XG4gICAgICB2YXIgdGVtcFBhcmVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodG9DcmVhdGUpO1xuICAgICAgdGVtcFBhcmVudC5pbm5lckhUTUwgPSBodG1sO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRlbXBQYXJlbnQuY2hpbGROb2Rlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBhcnIucHVzaCh0ZW1wUGFyZW50LmNoaWxkTm9kZXNbaV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBhcnIgPSBxc2Eoc2VsZWN0b3IudHJpbSgpLCBjb250ZXh0IHx8IGRvY3VtZW50KTtcbiAgICB9IC8vIGFyciA9IHFzYShzZWxlY3RvciwgZG9jdW1lbnQpO1xuXG4gIH0gZWxzZSBpZiAoc2VsZWN0b3Iubm9kZVR5cGUgfHwgc2VsZWN0b3IgPT09IHdpbmRvdyB8fCBzZWxlY3RvciA9PT0gZG9jdW1lbnQpIHtcbiAgICBhcnIucHVzaChzZWxlY3Rvcik7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShzZWxlY3RvcikpIHtcbiAgICBpZiAoc2VsZWN0b3IgaW5zdGFuY2VvZiBEb203KSByZXR1cm4gc2VsZWN0b3I7XG4gICAgYXJyID0gc2VsZWN0b3I7XG4gIH1cblxuICByZXR1cm4gbmV3IERvbTcoYXJyYXlVbmlxdWUoYXJyKSk7XG59XG5cbiQuZm4gPSBEb203LnByb3RvdHlwZTtcblxuZnVuY3Rpb24gYWRkQ2xhc3MoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBjbGFzc2VzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGNsYXNzZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgY2xhc3NOYW1lcyA9IGFycmF5RmxhdChjbGFzc2VzLm1hcChmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiBjLnNwbGl0KCcgJyk7XG4gIH0pKTtcbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgIHZhciBfZWwkY2xhc3NMaXN0O1xuXG4gICAgKF9lbCRjbGFzc0xpc3QgPSBlbC5jbGFzc0xpc3QpLmFkZC5hcHBseShfZWwkY2xhc3NMaXN0LCBjbGFzc05hbWVzKTtcbiAgfSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDbGFzcygpIHtcbiAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBjbGFzc2VzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgY2xhc3Nlc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICB9XG5cbiAgdmFyIGNsYXNzTmFtZXMgPSBhcnJheUZsYXQoY2xhc3Nlcy5tYXAoZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gYy5zcGxpdCgnICcpO1xuICB9KSk7XG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICB2YXIgX2VsJGNsYXNzTGlzdDI7XG5cbiAgICAoX2VsJGNsYXNzTGlzdDIgPSBlbC5jbGFzc0xpc3QpLnJlbW92ZS5hcHBseShfZWwkY2xhc3NMaXN0MiwgY2xhc3NOYW1lcyk7XG4gIH0pO1xuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gdG9nZ2xlQ2xhc3MoKSB7XG4gIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgY2xhc3NlcyA9IG5ldyBBcnJheShfbGVuMyksIF9rZXkzID0gMDsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgIGNsYXNzZXNbX2tleTNdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgfVxuXG4gIHZhciBjbGFzc05hbWVzID0gYXJyYXlGbGF0KGNsYXNzZXMubWFwKGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIGMuc3BsaXQoJyAnKTtcbiAgfSkpO1xuICB0aGlzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgY2xhc3NOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgIGVsLmNsYXNzTGlzdC50b2dnbGUoY2xhc3NOYW1lKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGhhc0NsYXNzKCkge1xuICBmb3IgKHZhciBfbGVuNCA9IGFyZ3VtZW50cy5sZW5ndGgsIGNsYXNzZXMgPSBuZXcgQXJyYXkoX2xlbjQpLCBfa2V5NCA9IDA7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICBjbGFzc2VzW19rZXk0XSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gIH1cblxuICB2YXIgY2xhc3NOYW1lcyA9IGFycmF5RmxhdChjbGFzc2VzLm1hcChmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiBjLnNwbGl0KCcgJyk7XG4gIH0pKTtcbiAgcmV0dXJuIGFycmF5RmlsdGVyKHRoaXMsIGZ1bmN0aW9uIChlbCkge1xuICAgIHJldHVybiBjbGFzc05hbWVzLmZpbHRlcihmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgICByZXR1cm4gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSk7XG4gICAgfSkubGVuZ3RoID4gMDtcbiAgfSkubGVuZ3RoID4gMDtcbn1cblxuZnVuY3Rpb24gYXR0cihhdHRycywgdmFsdWUpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIGF0dHJzID09PSAnc3RyaW5nJykge1xuICAgIC8vIEdldCBhdHRyXG4gICAgaWYgKHRoaXNbMF0pIHJldHVybiB0aGlzWzBdLmdldEF0dHJpYnV0ZShhdHRycyk7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSAvLyBTZXQgYXR0cnNcblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAvLyBTdHJpbmdcbiAgICAgIHRoaXNbaV0uc2V0QXR0cmlidXRlKGF0dHJzLCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9iamVjdFxuICAgICAgZm9yICh2YXIgYXR0ck5hbWUgaW4gYXR0cnMpIHtcbiAgICAgICAgdGhpc1tpXVthdHRyTmFtZV0gPSBhdHRyc1thdHRyTmFtZV07XG4gICAgICAgIHRoaXNbaV0uc2V0QXR0cmlidXRlKGF0dHJOYW1lLCBhdHRyc1thdHRyTmFtZV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiByZW1vdmVBdHRyKGF0dHIpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhpc1tpXS5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gcHJvcChwcm9wcywgdmFsdWUpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIHByb3BzID09PSAnc3RyaW5nJykge1xuICAgIC8vIEdldCBwcm9wXG4gICAgaWYgKHRoaXNbMF0pIHJldHVybiB0aGlzWzBdW3Byb3BzXTtcbiAgfSBlbHNlIHtcbiAgICAvLyBTZXQgcHJvcHNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIC8vIFN0cmluZ1xuICAgICAgICB0aGlzW2ldW3Byb3BzXSA9IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gT2JqZWN0XG4gICAgICAgIGZvciAodmFyIHByb3BOYW1lIGluIHByb3BzKSB7XG4gICAgICAgICAgdGhpc1tpXVtwcm9wTmFtZV0gPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBkYXRhKGtleSwgdmFsdWUpIHtcbiAgdmFyIGVsO1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZWwgPSB0aGlzWzBdO1xuICAgIGlmICghZWwpIHJldHVybiB1bmRlZmluZWQ7IC8vIEdldCB2YWx1ZVxuXG4gICAgaWYgKGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2UgJiYga2V5IGluIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2UpIHtcbiAgICAgIHJldHVybiBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlW2tleV07XG4gICAgfVxuXG4gICAgdmFyIGRhdGFLZXkgPSBlbC5nZXRBdHRyaWJ1dGUoXCJkYXRhLVwiICsga2V5KTtcblxuICAgIGlmIChkYXRhS2V5KSB7XG4gICAgICByZXR1cm4gZGF0YUtleTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9IC8vIFNldCB2YWx1ZVxuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgZWwgPSB0aGlzW2ldO1xuICAgIGlmICghZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZSkgZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZSA9IHt9O1xuICAgIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2Vba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZURhdGEoa2V5KSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBlbCA9IHRoaXNbaV07XG5cbiAgICBpZiAoZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZSAmJiBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlW2tleV0pIHtcbiAgICAgIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2Vba2V5XSA9IG51bGw7XG4gICAgICBkZWxldGUgZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZVtrZXldO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkYXRhc2V0KCkge1xuICB2YXIgZWwgPSB0aGlzWzBdO1xuICBpZiAoIWVsKSByZXR1cm4gdW5kZWZpbmVkO1xuICB2YXIgZGF0YXNldCA9IHt9OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgaWYgKGVsLmRhdGFzZXQpIHtcbiAgICBmb3IgKHZhciBkYXRhS2V5IGluIGVsLmRhdGFzZXQpIHtcbiAgICAgIGRhdGFzZXRbZGF0YUtleV0gPSBlbC5kYXRhc2V0W2RhdGFLZXldO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsLmF0dHJpYnV0ZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHZhciBfYXR0ciA9IGVsLmF0dHJpYnV0ZXNbaV07XG5cbiAgICAgIGlmIChfYXR0ci5uYW1lLmluZGV4T2YoJ2RhdGEtJykgPj0gMCkge1xuICAgICAgICBkYXRhc2V0W3RvQ2FtZWxDYXNlKF9hdHRyLm5hbWUuc3BsaXQoJ2RhdGEtJylbMV0pXSA9IF9hdHRyLnZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGtleSBpbiBkYXRhc2V0KSB7XG4gICAgaWYgKGRhdGFzZXRba2V5XSA9PT0gJ2ZhbHNlJykgZGF0YXNldFtrZXldID0gZmFsc2U7ZWxzZSBpZiAoZGF0YXNldFtrZXldID09PSAndHJ1ZScpIGRhdGFzZXRba2V5XSA9IHRydWU7ZWxzZSBpZiAocGFyc2VGbG9hdChkYXRhc2V0W2tleV0pID09PSBkYXRhc2V0W2tleV0gKiAxKSBkYXRhc2V0W2tleV0gKj0gMTtcbiAgfVxuXG4gIHJldHVybiBkYXRhc2V0O1xufVxuXG5mdW5jdGlvbiB2YWwodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBnZXQgdmFsdWVcbiAgICB2YXIgZWwgPSB0aGlzWzBdO1xuICAgIGlmICghZWwpIHJldHVybiB1bmRlZmluZWQ7XG5cbiAgICBpZiAoZWwubXVsdGlwbGUgJiYgZWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbC5zZWxlY3RlZE9wdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFsdWVzLnB1c2goZWwuc2VsZWN0ZWRPcHRpb25zW2ldLnZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9XG5cbiAgICByZXR1cm4gZWwudmFsdWU7XG4gIH0gLy8gc2V0IHZhbHVlXG5cblxuICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgdGhpcy5sZW5ndGg7IF9pICs9IDEpIHtcbiAgICB2YXIgX2VsID0gdGhpc1tfaV07XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgX2VsLm11bHRpcGxlICYmIF9lbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnc2VsZWN0Jykge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBfZWwub3B0aW9ucy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBfZWwub3B0aW9uc1tqXS5zZWxlY3RlZCA9IHZhbHVlLmluZGV4T2YoX2VsLm9wdGlvbnNbal0udmFsdWUpID49IDA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIF9lbC52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB2YWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gdGhpcy52YWwodmFsdWUpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm0odHJhbnNmb3JtKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoaXNbaV0uc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhpc1tpXS5zdHlsZS50cmFuc2l0aW9uID0gdHlwZW9mIGR1cmF0aW9uICE9PSAnc3RyaW5nJyA/IGR1cmF0aW9uICsgXCJtc1wiIDogZHVyYXRpb247XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gb24oKSB7XG4gIGZvciAodmFyIF9sZW41ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNSksIF9rZXk1ID0gMDsgX2tleTUgPCBfbGVuNTsgX2tleTUrKykge1xuICAgIGFyZ3NbX2tleTVdID0gYXJndW1lbnRzW19rZXk1XTtcbiAgfVxuXG4gIHZhciBldmVudFR5cGUgPSBhcmdzWzBdLFxuICAgICAgdGFyZ2V0U2VsZWN0b3IgPSBhcmdzWzFdLFxuICAgICAgbGlzdGVuZXIgPSBhcmdzWzJdLFxuICAgICAgY2FwdHVyZSA9IGFyZ3NbM107XG5cbiAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZXZlbnRUeXBlID0gYXJnc1swXTtcbiAgICBsaXN0ZW5lciA9IGFyZ3NbMV07XG4gICAgY2FwdHVyZSA9IGFyZ3NbMl07XG4gICAgdGFyZ2V0U2VsZWN0b3IgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAoIWNhcHR1cmUpIGNhcHR1cmUgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBoYW5kbGVMaXZlRXZlbnQoZSkge1xuICAgIHZhciB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICBpZiAoIXRhcmdldCkgcmV0dXJuO1xuICAgIHZhciBldmVudERhdGEgPSBlLnRhcmdldC5kb203RXZlbnREYXRhIHx8IFtdO1xuXG4gICAgaWYgKGV2ZW50RGF0YS5pbmRleE9mKGUpIDwgMCkge1xuICAgICAgZXZlbnREYXRhLnVuc2hpZnQoZSk7XG4gICAgfVxuXG4gICAgaWYgKCQodGFyZ2V0KS5pcyh0YXJnZXRTZWxlY3RvcikpIGxpc3RlbmVyLmFwcGx5KHRhcmdldCwgZXZlbnREYXRhKTtlbHNlIHtcbiAgICAgIHZhciBfcGFyZW50cyA9ICQodGFyZ2V0KS5wYXJlbnRzKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuXG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IF9wYXJlbnRzLmxlbmd0aDsgayArPSAxKSB7XG4gICAgICAgIGlmICgkKF9wYXJlbnRzW2tdKS5pcyh0YXJnZXRTZWxlY3RvcikpIGxpc3RlbmVyLmFwcGx5KF9wYXJlbnRzW2tdLCBldmVudERhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUV2ZW50KGUpIHtcbiAgICB2YXIgZXZlbnREYXRhID0gZSAmJiBlLnRhcmdldCA/IGUudGFyZ2V0LmRvbTdFdmVudERhdGEgfHwgW10gOiBbXTtcblxuICAgIGlmIChldmVudERhdGEuaW5kZXhPZihlKSA8IDApIHtcbiAgICAgIGV2ZW50RGF0YS51bnNoaWZ0KGUpO1xuICAgIH1cblxuICAgIGxpc3RlbmVyLmFwcGx5KHRoaXMsIGV2ZW50RGF0YSk7XG4gIH1cblxuICB2YXIgZXZlbnRzID0gZXZlbnRUeXBlLnNwbGl0KCcgJyk7XG4gIHZhciBqO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBlbCA9IHRoaXNbaV07XG5cbiAgICBpZiAoIXRhcmdldFNlbGVjdG9yKSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgZXZlbnRzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIHZhciBldmVudCA9IGV2ZW50c1tqXTtcbiAgICAgICAgaWYgKCFlbC5kb203TGlzdGVuZXJzKSBlbC5kb203TGlzdGVuZXJzID0ge307XG4gICAgICAgIGlmICghZWwuZG9tN0xpc3RlbmVyc1tldmVudF0pIGVsLmRvbTdMaXN0ZW5lcnNbZXZlbnRdID0gW107XG4gICAgICAgIGVsLmRvbTdMaXN0ZW5lcnNbZXZlbnRdLnB1c2goe1xuICAgICAgICAgIGxpc3RlbmVyOiBsaXN0ZW5lcixcbiAgICAgICAgICBwcm94eUxpc3RlbmVyOiBoYW5kbGVFdmVudFxuICAgICAgICB9KTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlRXZlbnQsIGNhcHR1cmUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMaXZlIGV2ZW50c1xuICAgICAgZm9yIChqID0gMDsgaiA8IGV2ZW50cy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICB2YXIgX2V2ZW50ID0gZXZlbnRzW2pdO1xuICAgICAgICBpZiAoIWVsLmRvbTdMaXZlTGlzdGVuZXJzKSBlbC5kb203TGl2ZUxpc3RlbmVycyA9IHt9O1xuICAgICAgICBpZiAoIWVsLmRvbTdMaXZlTGlzdGVuZXJzW19ldmVudF0pIGVsLmRvbTdMaXZlTGlzdGVuZXJzW19ldmVudF0gPSBbXTtcblxuICAgICAgICBlbC5kb203TGl2ZUxpc3RlbmVyc1tfZXZlbnRdLnB1c2goe1xuICAgICAgICAgIGxpc3RlbmVyOiBsaXN0ZW5lcixcbiAgICAgICAgICBwcm94eUxpc3RlbmVyOiBoYW5kbGVMaXZlRXZlbnRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihfZXZlbnQsIGhhbmRsZUxpdmVFdmVudCwgY2FwdHVyZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIG9mZigpIHtcbiAgZm9yICh2YXIgX2xlbjYgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW42KSwgX2tleTYgPSAwOyBfa2V5NiA8IF9sZW42OyBfa2V5NisrKSB7XG4gICAgYXJnc1tfa2V5Nl0gPSBhcmd1bWVudHNbX2tleTZdO1xuICB9XG5cbiAgdmFyIGV2ZW50VHlwZSA9IGFyZ3NbMF0sXG4gICAgICB0YXJnZXRTZWxlY3RvciA9IGFyZ3NbMV0sXG4gICAgICBsaXN0ZW5lciA9IGFyZ3NbMl0sXG4gICAgICBjYXB0dXJlID0gYXJnc1szXTtcblxuICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICBldmVudFR5cGUgPSBhcmdzWzBdO1xuICAgIGxpc3RlbmVyID0gYXJnc1sxXTtcbiAgICBjYXB0dXJlID0gYXJnc1syXTtcbiAgICB0YXJnZXRTZWxlY3RvciA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICghY2FwdHVyZSkgY2FwdHVyZSA9IGZhbHNlO1xuICB2YXIgZXZlbnRzID0gZXZlbnRUeXBlLnNwbGl0KCcgJyk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgZXZlbnQgPSBldmVudHNbaV07XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRoaXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgIHZhciBlbCA9IHRoaXNbal07XG4gICAgICB2YXIgaGFuZGxlcnMgPSB2b2lkIDA7XG5cbiAgICAgIGlmICghdGFyZ2V0U2VsZWN0b3IgJiYgZWwuZG9tN0xpc3RlbmVycykge1xuICAgICAgICBoYW5kbGVycyA9IGVsLmRvbTdMaXN0ZW5lcnNbZXZlbnRdO1xuICAgICAgfSBlbHNlIGlmICh0YXJnZXRTZWxlY3RvciAmJiBlbC5kb203TGl2ZUxpc3RlbmVycykge1xuICAgICAgICBoYW5kbGVycyA9IGVsLmRvbTdMaXZlTGlzdGVuZXJzW2V2ZW50XTtcbiAgICAgIH1cblxuICAgICAgaWYgKGhhbmRsZXJzICYmIGhhbmRsZXJzLmxlbmd0aCkge1xuICAgICAgICBmb3IgKHZhciBrID0gaGFuZGxlcnMubGVuZ3RoIC0gMTsgayA+PSAwOyBrIC09IDEpIHtcbiAgICAgICAgICB2YXIgaGFuZGxlciA9IGhhbmRsZXJzW2tdO1xuXG4gICAgICAgICAgaWYgKGxpc3RlbmVyICYmIGhhbmRsZXIubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLnByb3h5TGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgICAgICAgICAgaGFuZGxlcnMuc3BsaWNlKGssIDEpO1xuICAgICAgICAgIH0gZWxzZSBpZiAobGlzdGVuZXIgJiYgaGFuZGxlci5saXN0ZW5lciAmJiBoYW5kbGVyLmxpc3RlbmVyLmRvbTdwcm94eSAmJiBoYW5kbGVyLmxpc3RlbmVyLmRvbTdwcm94eSA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIucHJveHlMaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgICAgICAgICBoYW5kbGVycy5zcGxpY2UoaywgMSk7XG4gICAgICAgICAgfSBlbHNlIGlmICghbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIucHJveHlMaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgICAgICAgICBoYW5kbGVycy5zcGxpY2UoaywgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIG9uY2UoKSB7XG4gIHZhciBkb20gPSB0aGlzO1xuXG4gIGZvciAodmFyIF9sZW43ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNyksIF9rZXk3ID0gMDsgX2tleTcgPCBfbGVuNzsgX2tleTcrKykge1xuICAgIGFyZ3NbX2tleTddID0gYXJndW1lbnRzW19rZXk3XTtcbiAgfVxuXG4gIHZhciBldmVudE5hbWUgPSBhcmdzWzBdLFxuICAgICAgdGFyZ2V0U2VsZWN0b3IgPSBhcmdzWzFdLFxuICAgICAgbGlzdGVuZXIgPSBhcmdzWzJdLFxuICAgICAgY2FwdHVyZSA9IGFyZ3NbM107XG5cbiAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZXZlbnROYW1lID0gYXJnc1swXTtcbiAgICBsaXN0ZW5lciA9IGFyZ3NbMV07XG4gICAgY2FwdHVyZSA9IGFyZ3NbMl07XG4gICAgdGFyZ2V0U2VsZWN0b3IgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBvbmNlSGFuZGxlcigpIHtcbiAgICBmb3IgKHZhciBfbGVuOCA9IGFyZ3VtZW50cy5sZW5ndGgsIGV2ZW50QXJncyA9IG5ldyBBcnJheShfbGVuOCksIF9rZXk4ID0gMDsgX2tleTggPCBfbGVuODsgX2tleTgrKykge1xuICAgICAgZXZlbnRBcmdzW19rZXk4XSA9IGFyZ3VtZW50c1tfa2V5OF07XG4gICAgfVxuXG4gICAgbGlzdGVuZXIuYXBwbHkodGhpcywgZXZlbnRBcmdzKTtcbiAgICBkb20ub2ZmKGV2ZW50TmFtZSwgdGFyZ2V0U2VsZWN0b3IsIG9uY2VIYW5kbGVyLCBjYXB0dXJlKTtcblxuICAgIGlmIChvbmNlSGFuZGxlci5kb203cHJveHkpIHtcbiAgICAgIGRlbGV0ZSBvbmNlSGFuZGxlci5kb203cHJveHk7XG4gICAgfVxuICB9XG5cbiAgb25jZUhhbmRsZXIuZG9tN3Byb3h5ID0gbGlzdGVuZXI7XG4gIHJldHVybiBkb20ub24oZXZlbnROYW1lLCB0YXJnZXRTZWxlY3Rvciwgb25jZUhhbmRsZXIsIGNhcHR1cmUpO1xufVxuXG5mdW5jdGlvbiB0cmlnZ2VyKCkge1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG5cbiAgZm9yICh2YXIgX2xlbjkgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW45KSwgX2tleTkgPSAwOyBfa2V5OSA8IF9sZW45OyBfa2V5OSsrKSB7XG4gICAgYXJnc1tfa2V5OV0gPSBhcmd1bWVudHNbX2tleTldO1xuICB9XG5cbiAgdmFyIGV2ZW50cyA9IGFyZ3NbMF0uc3BsaXQoJyAnKTtcbiAgdmFyIGV2ZW50RGF0YSA9IGFyZ3NbMV07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgZXZlbnQgPSBldmVudHNbaV07XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRoaXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgIHZhciBlbCA9IHRoaXNbal07XG5cbiAgICAgIGlmICh3aW5kb3cuQ3VzdG9tRXZlbnQpIHtcbiAgICAgICAgdmFyIGV2dCA9IG5ldyB3aW5kb3cuQ3VzdG9tRXZlbnQoZXZlbnQsIHtcbiAgICAgICAgICBkZXRhaWw6IGV2ZW50RGF0YSxcbiAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIGVsLmRvbTdFdmVudERhdGEgPSBhcmdzLmZpbHRlcihmdW5jdGlvbiAoZGF0YSwgZGF0YUluZGV4KSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGFJbmRleCA+IDA7XG4gICAgICAgIH0pO1xuICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KGV2dCk7XG4gICAgICAgIGVsLmRvbTdFdmVudERhdGEgPSBbXTtcbiAgICAgICAgZGVsZXRlIGVsLmRvbTdFdmVudERhdGE7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoY2FsbGJhY2spIHtcbiAgdmFyIGRvbSA9IHRoaXM7XG5cbiAgZnVuY3Rpb24gZmlyZUNhbGxCYWNrKGUpIHtcbiAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjtcbiAgICBjYWxsYmFjay5jYWxsKHRoaXMsIGUpO1xuICAgIGRvbS5vZmYoJ3RyYW5zaXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG5cbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgZG9tLm9uKCd0cmFuc2l0aW9uZW5kJywgZmlyZUNhbGxCYWNrKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBhbmltYXRpb25FbmQoY2FsbGJhY2spIHtcbiAgdmFyIGRvbSA9IHRoaXM7XG5cbiAgZnVuY3Rpb24gZmlyZUNhbGxCYWNrKGUpIHtcbiAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjtcbiAgICBjYWxsYmFjay5jYWxsKHRoaXMsIGUpO1xuICAgIGRvbS5vZmYoJ2FuaW1hdGlvbmVuZCcsIGZpcmVDYWxsQmFjayk7XG4gIH1cblxuICBpZiAoY2FsbGJhY2spIHtcbiAgICBkb20ub24oJ2FuaW1hdGlvbmVuZCcsIGZpcmVDYWxsQmFjayk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gd2lkdGgoKSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcblxuICBpZiAodGhpc1swXSA9PT0gd2luZG93KSB7XG4gICAgcmV0dXJuIHdpbmRvdy5pbm5lcldpZHRoO1xuICB9XG5cbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KHRoaXMuY3NzKCd3aWR0aCcpKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBvdXRlcldpZHRoKGluY2x1ZGVNYXJnaW5zKSB7XG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBpZiAoaW5jbHVkZU1hcmdpbnMpIHtcbiAgICAgIHZhciBfc3R5bGVzID0gdGhpcy5zdHlsZXMoKTtcblxuICAgICAgcmV0dXJuIHRoaXNbMF0ub2Zmc2V0V2lkdGggKyBwYXJzZUZsb2F0KF9zdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLXJpZ2h0JykpICsgcGFyc2VGbG9hdChfc3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1sZWZ0JykpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzWzBdLm9mZnNldFdpZHRoO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGhlaWdodCgpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuXG4gIGlmICh0aGlzWzBdID09PSB3aW5kb3cpIHtcbiAgICByZXR1cm4gd2luZG93LmlubmVySGVpZ2h0O1xuICB9XG5cbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KHRoaXMuY3NzKCdoZWlnaHQnKSk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gb3V0ZXJIZWlnaHQoaW5jbHVkZU1hcmdpbnMpIHtcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIGlmIChpbmNsdWRlTWFyZ2lucykge1xuICAgICAgdmFyIF9zdHlsZXMyID0gdGhpcy5zdHlsZXMoKTtcblxuICAgICAgcmV0dXJuIHRoaXNbMF0ub2Zmc2V0SGVpZ2h0ICsgcGFyc2VGbG9hdChfc3R5bGVzMi5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tdG9wJykpICsgcGFyc2VGbG9hdChfc3R5bGVzMi5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tYm90dG9tJykpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzWzBdLm9mZnNldEhlaWdodDtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBvZmZzZXQoKSB7XG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICB2YXIgZWwgPSB0aGlzWzBdO1xuICAgIHZhciBib3ggPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gICAgdmFyIGNsaWVudFRvcCA9IGVsLmNsaWVudFRvcCB8fCBib2R5LmNsaWVudFRvcCB8fCAwO1xuICAgIHZhciBjbGllbnRMZWZ0ID0gZWwuY2xpZW50TGVmdCB8fCBib2R5LmNsaWVudExlZnQgfHwgMDtcbiAgICB2YXIgc2Nyb2xsVG9wID0gZWwgPT09IHdpbmRvdyA/IHdpbmRvdy5zY3JvbGxZIDogZWwuc2Nyb2xsVG9wO1xuICAgIHZhciBzY3JvbGxMZWZ0ID0gZWwgPT09IHdpbmRvdyA/IHdpbmRvdy5zY3JvbGxYIDogZWwuc2Nyb2xsTGVmdDtcbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiBib3gudG9wICsgc2Nyb2xsVG9wIC0gY2xpZW50VG9wLFxuICAgICAgbGVmdDogYm94LmxlZnQgKyBzY3JvbGxMZWZ0IC0gY2xpZW50TGVmdFxuICAgIH07XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gaGlkZSgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhpc1tpXS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHNob3coKSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgZWwgPSB0aGlzW2ldO1xuXG4gICAgaWYgKGVsLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJykge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICcnO1xuICAgIH1cblxuICAgIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZSgnZGlzcGxheScpID09PSAnbm9uZScpIHtcbiAgICAgIC8vIFN0aWxsIG5vdCB2aXNpYmxlXG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gc3R5bGVzKCkge1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGlmICh0aGlzWzBdKSByZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpc1swXSwgbnVsbCk7XG4gIHJldHVybiB7fTtcbn1cblxuZnVuY3Rpb24gY3NzKHByb3BzLCB2YWx1ZSkge1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIHZhciBpO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgaWYgKHR5cGVvZiBwcm9wcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIC5jc3MoJ3dpZHRoJylcbiAgICAgIGlmICh0aGlzWzBdKSByZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpc1swXSwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShwcm9wcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIC5jc3MoeyB3aWR0aDogJzEwMHB4JyB9KVxuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgZm9yICh2YXIgX3Byb3AgaW4gcHJvcHMpIHtcbiAgICAgICAgICB0aGlzW2ldLnN0eWxlW19wcm9wXSA9IHByb3BzW19wcm9wXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH1cblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMiAmJiB0eXBlb2YgcHJvcHMgPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gLmNzcygnd2lkdGgnLCAnMTAwcHgnKVxuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB0aGlzW2ldLnN0eWxlW3Byb3BzXSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGVhY2goY2FsbGJhY2spIHtcbiAgaWYgKCFjYWxsYmFjaykgcmV0dXJuIHRoaXM7XG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbiAoZWwsIGluZGV4KSB7XG4gICAgY2FsbGJhY2suYXBwbHkoZWwsIFtlbCwgaW5kZXhdKTtcbiAgfSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2spIHtcbiAgdmFyIHJlc3VsdCA9IGFycmF5RmlsdGVyKHRoaXMsIGNhbGxiYWNrKTtcbiAgcmV0dXJuICQocmVzdWx0KTtcbn1cblxuZnVuY3Rpb24gaHRtbChodG1sKSB7XG4gIGlmICh0eXBlb2YgaHRtbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gdGhpc1swXSA/IHRoaXNbMF0uaW5uZXJIVE1MIDogbnVsbDtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoaXNbaV0uaW5uZXJIVE1MID0gaHRtbDtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB0ZXh0KHRleHQpIHtcbiAgaWYgKHR5cGVvZiB0ZXh0ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiB0aGlzWzBdID8gdGhpc1swXS50ZXh0Q29udGVudC50cmltKCkgOiBudWxsO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhpc1tpXS50ZXh0Q29udGVudCA9IHRleHQ7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gaXMoc2VsZWN0b3IpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICB2YXIgZWwgPSB0aGlzWzBdO1xuICB2YXIgY29tcGFyZVdpdGg7XG4gIHZhciBpO1xuICBpZiAoIWVsIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiBmYWxzZTtcblxuICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAnc3RyaW5nJykge1xuICAgIGlmIChlbC5tYXRjaGVzKSByZXR1cm4gZWwubWF0Y2hlcyhzZWxlY3Rvcik7XG4gICAgaWYgKGVsLndlYmtpdE1hdGNoZXNTZWxlY3RvcikgcmV0dXJuIGVsLndlYmtpdE1hdGNoZXNTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgaWYgKGVsLm1zTWF0Y2hlc1NlbGVjdG9yKSByZXR1cm4gZWwubXNNYXRjaGVzU2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgIGNvbXBhcmVXaXRoID0gJChzZWxlY3Rvcik7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgY29tcGFyZVdpdGgubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChjb21wYXJlV2l0aFtpXSA9PT0gZWwpIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChzZWxlY3RvciA9PT0gZG9jdW1lbnQpIHtcbiAgICByZXR1cm4gZWwgPT09IGRvY3VtZW50O1xuICB9XG5cbiAgaWYgKHNlbGVjdG9yID09PSB3aW5kb3cpIHtcbiAgICByZXR1cm4gZWwgPT09IHdpbmRvdztcbiAgfVxuXG4gIGlmIChzZWxlY3Rvci5ub2RlVHlwZSB8fCBzZWxlY3RvciBpbnN0YW5jZW9mIERvbTcpIHtcbiAgICBjb21wYXJlV2l0aCA9IHNlbGVjdG9yLm5vZGVUeXBlID8gW3NlbGVjdG9yXSA6IHNlbGVjdG9yO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGNvbXBhcmVXaXRoLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoY29tcGFyZVdpdGhbaV0gPT09IGVsKSByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGluZGV4KCkge1xuICB2YXIgY2hpbGQgPSB0aGlzWzBdO1xuICB2YXIgaTtcblxuICBpZiAoY2hpbGQpIHtcbiAgICBpID0gMDsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cbiAgICB3aGlsZSAoKGNoaWxkID0gY2hpbGQucHJldmlvdXNTaWJsaW5nKSAhPT0gbnVsbCkge1xuICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSAxKSBpICs9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIGk7XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBlcShpbmRleCkge1xuICBpZiAodHlwZW9mIGluZGV4ID09PSAndW5kZWZpbmVkJykgcmV0dXJuIHRoaXM7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aDtcblxuICBpZiAoaW5kZXggPiBsZW5ndGggLSAxKSB7XG4gICAgcmV0dXJuICQoW10pO1xuICB9XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHZhciByZXR1cm5JbmRleCA9IGxlbmd0aCArIGluZGV4O1xuICAgIGlmIChyZXR1cm5JbmRleCA8IDApIHJldHVybiAkKFtdKTtcbiAgICByZXR1cm4gJChbdGhpc1tyZXR1cm5JbmRleF1dKTtcbiAgfVxuXG4gIHJldHVybiAkKFt0aGlzW2luZGV4XV0pO1xufVxuXG5mdW5jdGlvbiBhcHBlbmQoKSB7XG4gIHZhciBuZXdDaGlsZDtcbiAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcblxuICBmb3IgKHZhciBrID0gMDsgayA8IGFyZ3VtZW50cy5sZW5ndGg7IGsgKz0gMSkge1xuICAgIG5ld0NoaWxkID0gayA8IDAgfHwgYXJndW1lbnRzLmxlbmd0aCA8PSBrID8gdW5kZWZpbmVkIDogYXJndW1lbnRzW2tdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAodHlwZW9mIG5ld0NoaWxkID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgdGVtcERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0ZW1wRGl2LmlubmVySFRNTCA9IG5ld0NoaWxkO1xuXG4gICAgICAgIHdoaWxlICh0ZW1wRGl2LmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICB0aGlzW2ldLmFwcGVuZENoaWxkKHRlbXBEaXYuZmlyc3RDaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobmV3Q2hpbGQgaW5zdGFuY2VvZiBEb203KSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbmV3Q2hpbGQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICB0aGlzW2ldLmFwcGVuZENoaWxkKG5ld0NoaWxkW2pdKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpc1tpXS5hcHBlbmRDaGlsZChuZXdDaGlsZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZFRvKHBhcmVudCkge1xuICAkKHBhcmVudCkuYXBwZW5kKHRoaXMpO1xuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gcHJlcGVuZChuZXdDaGlsZCkge1xuICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICB2YXIgaTtcbiAgdmFyIGo7XG5cbiAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAodHlwZW9mIG5ld0NoaWxkID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIHRlbXBEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHRlbXBEaXYuaW5uZXJIVE1MID0gbmV3Q2hpbGQ7XG5cbiAgICAgIGZvciAoaiA9IHRlbXBEaXYuY2hpbGROb2Rlcy5sZW5ndGggLSAxOyBqID49IDA7IGogLT0gMSkge1xuICAgICAgICB0aGlzW2ldLmluc2VydEJlZm9yZSh0ZW1wRGl2LmNoaWxkTm9kZXNbal0sIHRoaXNbaV0uY2hpbGROb2Rlc1swXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuZXdDaGlsZCBpbnN0YW5jZW9mIERvbTcpIHtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBuZXdDaGlsZC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICB0aGlzW2ldLmluc2VydEJlZm9yZShuZXdDaGlsZFtqXSwgdGhpc1tpXS5jaGlsZE5vZGVzWzBdKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpc1tpXS5pbnNlcnRCZWZvcmUobmV3Q2hpbGQsIHRoaXNbaV0uY2hpbGROb2Rlc1swXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHByZXBlbmRUbyhwYXJlbnQpIHtcbiAgJChwYXJlbnQpLnByZXBlbmQodGhpcyk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRCZWZvcmUoc2VsZWN0b3IpIHtcbiAgdmFyIGJlZm9yZSA9ICQoc2VsZWN0b3IpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChiZWZvcmUubGVuZ3RoID09PSAxKSB7XG4gICAgICBiZWZvcmVbMF0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpc1tpXSwgYmVmb3JlWzBdKTtcbiAgICB9IGVsc2UgaWYgKGJlZm9yZS5sZW5ndGggPiAxKSB7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGJlZm9yZS5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBiZWZvcmVbal0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpc1tpXS5jbG9uZU5vZGUodHJ1ZSksIGJlZm9yZVtqXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGluc2VydEFmdGVyKHNlbGVjdG9yKSB7XG4gIHZhciBhZnRlciA9ICQoc2VsZWN0b3IpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChhZnRlci5sZW5ndGggPT09IDEpIHtcbiAgICAgIGFmdGVyWzBdLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXNbaV0sIGFmdGVyWzBdLm5leHRTaWJsaW5nKTtcbiAgICB9IGVsc2UgaWYgKGFmdGVyLmxlbmd0aCA+IDEpIHtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgYWZ0ZXIubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgYWZ0ZXJbal0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpc1tpXS5jbG9uZU5vZGUodHJ1ZSksIGFmdGVyW2pdLm5leHRTaWJsaW5nKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbmV4dChzZWxlY3Rvcikge1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBpZiAodGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmcgJiYgJCh0aGlzWzBdLm5leHRFbGVtZW50U2libGluZykuaXMoc2VsZWN0b3IpKSB7XG4gICAgICAgIHJldHVybiAkKFt0aGlzWzBdLm5leHRFbGVtZW50U2libGluZ10pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJChbXSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nKSByZXR1cm4gJChbdGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmddKTtcbiAgICByZXR1cm4gJChbXSk7XG4gIH1cblxuICByZXR1cm4gJChbXSk7XG59XG5cbmZ1bmN0aW9uIG5leHRBbGwoc2VsZWN0b3IpIHtcbiAgdmFyIG5leHRFbHMgPSBbXTtcbiAgdmFyIGVsID0gdGhpc1swXTtcbiAgaWYgKCFlbCkgcmV0dXJuICQoW10pO1xuXG4gIHdoaWxlIChlbC5uZXh0RWxlbWVudFNpYmxpbmcpIHtcbiAgICB2YXIgX25leHQgPSBlbC5uZXh0RWxlbWVudFNpYmxpbmc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKCQoX25leHQpLmlzKHNlbGVjdG9yKSkgbmV4dEVscy5wdXNoKF9uZXh0KTtcbiAgICB9IGVsc2UgbmV4dEVscy5wdXNoKF9uZXh0KTtcblxuICAgIGVsID0gX25leHQ7XG4gIH1cblxuICByZXR1cm4gJChuZXh0RWxzKTtcbn1cblxuZnVuY3Rpb24gcHJldihzZWxlY3Rvcikge1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgdmFyIGVsID0gdGhpc1swXTtcblxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgJiYgJChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKS5pcyhzZWxlY3RvcikpIHtcbiAgICAgICAgcmV0dXJuICQoW2VsLnByZXZpb3VzRWxlbWVudFNpYmxpbmddKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICQoW10pO1xuICAgIH1cblxuICAgIGlmIChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSByZXR1cm4gJChbZWwucHJldmlvdXNFbGVtZW50U2libGluZ10pO1xuICAgIHJldHVybiAkKFtdKTtcbiAgfVxuXG4gIHJldHVybiAkKFtdKTtcbn1cblxuZnVuY3Rpb24gcHJldkFsbChzZWxlY3Rvcikge1xuICB2YXIgcHJldkVscyA9IFtdO1xuICB2YXIgZWwgPSB0aGlzWzBdO1xuICBpZiAoIWVsKSByZXR1cm4gJChbXSk7XG5cbiAgd2hpbGUgKGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHtcbiAgICB2YXIgX3ByZXYgPSBlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmICgkKF9wcmV2KS5pcyhzZWxlY3RvcikpIHByZXZFbHMucHVzaChfcHJldik7XG4gICAgfSBlbHNlIHByZXZFbHMucHVzaChfcHJldik7XG5cbiAgICBlbCA9IF9wcmV2O1xuICB9XG5cbiAgcmV0dXJuICQocHJldkVscyk7XG59XG5cbmZ1bmN0aW9uIHNpYmxpbmdzKHNlbGVjdG9yKSB7XG4gIHJldHVybiB0aGlzLm5leHRBbGwoc2VsZWN0b3IpLmFkZCh0aGlzLnByZXZBbGwoc2VsZWN0b3IpKTtcbn1cblxuZnVuY3Rpb24gcGFyZW50KHNlbGVjdG9yKSB7XG4gIHZhciBwYXJlbnRzID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAodGhpc1tpXS5wYXJlbnROb2RlICE9PSBudWxsKSB7XG4gICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgaWYgKCQodGhpc1tpXS5wYXJlbnROb2RlKS5pcyhzZWxlY3RvcikpIHBhcmVudHMucHVzaCh0aGlzW2ldLnBhcmVudE5vZGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyZW50cy5wdXNoKHRoaXNbaV0ucGFyZW50Tm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICQocGFyZW50cyk7XG59XG5cbmZ1bmN0aW9uIHBhcmVudHMoc2VsZWN0b3IpIHtcbiAgdmFyIHBhcmVudHMgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBfcGFyZW50ID0gdGhpc1tpXS5wYXJlbnROb2RlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICB3aGlsZSAoX3BhcmVudCkge1xuICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIGlmICgkKF9wYXJlbnQpLmlzKHNlbGVjdG9yKSkgcGFyZW50cy5wdXNoKF9wYXJlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyZW50cy5wdXNoKF9wYXJlbnQpO1xuICAgICAgfVxuXG4gICAgICBfcGFyZW50ID0gX3BhcmVudC5wYXJlbnROb2RlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAkKHBhcmVudHMpO1xufVxuXG5mdW5jdGlvbiBjbG9zZXN0KHNlbGVjdG9yKSB7XG4gIHZhciBjbG9zZXN0ID0gdGhpczsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuICQoW10pO1xuICB9XG5cbiAgaWYgKCFjbG9zZXN0LmlzKHNlbGVjdG9yKSkge1xuICAgIGNsb3Nlc3QgPSBjbG9zZXN0LnBhcmVudHMoc2VsZWN0b3IpLmVxKDApO1xuICB9XG5cbiAgcmV0dXJuIGNsb3Nlc3Q7XG59XG5cbmZ1bmN0aW9uIGZpbmQoc2VsZWN0b3IpIHtcbiAgdmFyIGZvdW5kRWxlbWVudHMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgZm91bmQgPSB0aGlzW2ldLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBmb3VuZC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgZm91bmRFbGVtZW50cy5wdXNoKGZvdW5kW2pdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gJChmb3VuZEVsZW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gY2hpbGRyZW4oc2VsZWN0b3IpIHtcbiAgdmFyIGNoaWxkcmVuID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHRoaXNbaV0uY2hpbGRyZW47XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGNoaWxkTm9kZXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgIGlmICghc2VsZWN0b3IgfHwgJChjaGlsZE5vZGVzW2pdKS5pcyhzZWxlY3RvcikpIHtcbiAgICAgICAgY2hpbGRyZW4ucHVzaChjaGlsZE5vZGVzW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gJChjaGlsZHJlbik7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHRoaXNbaV0ucGFyZW50Tm9kZSkgdGhpc1tpXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGRldGFjaCgpIHtcbiAgcmV0dXJuIHRoaXMucmVtb3ZlKCk7XG59XG5cbmZ1bmN0aW9uIGFkZCgpIHtcbiAgdmFyIGRvbSA9IHRoaXM7XG4gIHZhciBpO1xuICB2YXIgajtcblxuICBmb3IgKHZhciBfbGVuMTAgPSBhcmd1bWVudHMubGVuZ3RoLCBlbHMgPSBuZXcgQXJyYXkoX2xlbjEwKSwgX2tleTEwID0gMDsgX2tleTEwIDwgX2xlbjEwOyBfa2V5MTArKykge1xuICAgIGVsc1tfa2V5MTBdID0gYXJndW1lbnRzW19rZXkxMF07XG4gIH1cblxuICBmb3IgKGkgPSAwOyBpIDwgZWxzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIHRvQWRkID0gJChlbHNbaV0pO1xuXG4gICAgZm9yIChqID0gMDsgaiA8IHRvQWRkLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICBkb20ucHVzaCh0b0FkZFtqXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRvbTtcbn1cblxuZnVuY3Rpb24gZW1wdHkoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBlbCA9IHRoaXNbaV07XG5cbiAgICBpZiAoZWwubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZWwuY2hpbGROb2Rlcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBpZiAoZWwuY2hpbGROb2Rlc1tqXS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgZWwuY2hpbGROb2Rlc1tqXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsLmNoaWxkTm9kZXNbal0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGVsLnRleHRDb250ZW50ID0gJyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHNjcm9sbFRvKCkge1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG5cbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciBsZWZ0ID0gYXJnc1swXSxcbiAgICAgIHRvcCA9IGFyZ3NbMV0sXG4gICAgICBkdXJhdGlvbiA9IGFyZ3NbMl0sXG4gICAgICBlYXNpbmcgPSBhcmdzWzNdLFxuICAgICAgY2FsbGJhY2sgPSBhcmdzWzRdO1xuXG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gNCAmJiB0eXBlb2YgZWFzaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBlYXNpbmc7XG4gICAgbGVmdCA9IGFyZ3NbMF07XG4gICAgdG9wID0gYXJnc1sxXTtcbiAgICBkdXJhdGlvbiA9IGFyZ3NbMl07XG4gICAgY2FsbGJhY2sgPSBhcmdzWzNdO1xuICAgIGVhc2luZyA9IGFyZ3NbNF07XG4gIH1cblxuICBpZiAodHlwZW9mIGVhc2luZyA9PT0gJ3VuZGVmaW5lZCcpIGVhc2luZyA9ICdzd2luZyc7XG4gIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gYW5pbWF0ZSgpIHtcbiAgICB2YXIgZWwgPSB0aGlzO1xuICAgIHZhciBjdXJyZW50VG9wO1xuICAgIHZhciBjdXJyZW50TGVmdDtcbiAgICB2YXIgbWF4VG9wO1xuICAgIHZhciBtYXhMZWZ0O1xuICAgIHZhciBuZXdUb3A7XG4gICAgdmFyIG5ld0xlZnQ7XG4gICAgdmFyIHNjcm9sbFRvcDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgdmFyIHNjcm9sbExlZnQ7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIHZhciBhbmltYXRlVG9wID0gdG9wID4gMCB8fCB0b3AgPT09IDA7XG4gICAgdmFyIGFuaW1hdGVMZWZ0ID0gbGVmdCA+IDAgfHwgbGVmdCA9PT0gMDtcblxuICAgIGlmICh0eXBlb2YgZWFzaW5nID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZWFzaW5nID0gJ3N3aW5nJztcbiAgICB9XG5cbiAgICBpZiAoYW5pbWF0ZVRvcCkge1xuICAgICAgY3VycmVudFRvcCA9IGVsLnNjcm9sbFRvcDtcblxuICAgICAgaWYgKCFkdXJhdGlvbikge1xuICAgICAgICBlbC5zY3JvbGxUb3AgPSB0b3A7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGFuaW1hdGVMZWZ0KSB7XG4gICAgICBjdXJyZW50TGVmdCA9IGVsLnNjcm9sbExlZnQ7XG5cbiAgICAgIGlmICghZHVyYXRpb24pIHtcbiAgICAgICAgZWwuc2Nyb2xsTGVmdCA9IGxlZnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFkdXJhdGlvbikgcmV0dXJuO1xuXG4gICAgaWYgKGFuaW1hdGVUb3ApIHtcbiAgICAgIG1heFRvcCA9IGVsLnNjcm9sbEhlaWdodCAtIGVsLm9mZnNldEhlaWdodDtcbiAgICAgIG5ld1RvcCA9IE1hdGgubWF4KE1hdGgubWluKHRvcCwgbWF4VG9wKSwgMCk7XG4gICAgfVxuXG4gICAgaWYgKGFuaW1hdGVMZWZ0KSB7XG4gICAgICBtYXhMZWZ0ID0gZWwuc2Nyb2xsV2lkdGggLSBlbC5vZmZzZXRXaWR0aDtcbiAgICAgIG5ld0xlZnQgPSBNYXRoLm1heChNYXRoLm1pbihsZWZ0LCBtYXhMZWZ0KSwgMCk7XG4gICAgfVxuXG4gICAgdmFyIHN0YXJ0VGltZSA9IG51bGw7XG4gICAgaWYgKGFuaW1hdGVUb3AgJiYgbmV3VG9wID09PSBjdXJyZW50VG9wKSBhbmltYXRlVG9wID0gZmFsc2U7XG4gICAgaWYgKGFuaW1hdGVMZWZ0ICYmIG5ld0xlZnQgPT09IGN1cnJlbnRMZWZ0KSBhbmltYXRlTGVmdCA9IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gcmVuZGVyKHRpbWUpIHtcbiAgICAgIGlmICh0aW1lID09PSB2b2lkIDApIHtcbiAgICAgICAgdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhcnRUaW1lID09PSBudWxsKSB7XG4gICAgICAgIHN0YXJ0VGltZSA9IHRpbWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcm9ncmVzcyA9IE1hdGgubWF4KE1hdGgubWluKCh0aW1lIC0gc3RhcnRUaW1lKSAvIGR1cmF0aW9uLCAxKSwgMCk7XG4gICAgICB2YXIgZWFzZVByb2dyZXNzID0gZWFzaW5nID09PSAnbGluZWFyJyA/IHByb2dyZXNzIDogMC41IC0gTWF0aC5jb3MocHJvZ3Jlc3MgKiBNYXRoLlBJKSAvIDI7XG4gICAgICB2YXIgZG9uZTtcbiAgICAgIGlmIChhbmltYXRlVG9wKSBzY3JvbGxUb3AgPSBjdXJyZW50VG9wICsgZWFzZVByb2dyZXNzICogKG5ld1RvcCAtIGN1cnJlbnRUb3ApO1xuICAgICAgaWYgKGFuaW1hdGVMZWZ0KSBzY3JvbGxMZWZ0ID0gY3VycmVudExlZnQgKyBlYXNlUHJvZ3Jlc3MgKiAobmV3TGVmdCAtIGN1cnJlbnRMZWZ0KTtcblxuICAgICAgaWYgKGFuaW1hdGVUb3AgJiYgbmV3VG9wID4gY3VycmVudFRvcCAmJiBzY3JvbGxUb3AgPj0gbmV3VG9wKSB7XG4gICAgICAgIGVsLnNjcm9sbFRvcCA9IG5ld1RvcDtcbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChhbmltYXRlVG9wICYmIG5ld1RvcCA8IGN1cnJlbnRUb3AgJiYgc2Nyb2xsVG9wIDw9IG5ld1RvcCkge1xuICAgICAgICBlbC5zY3JvbGxUb3AgPSBuZXdUb3A7XG4gICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoYW5pbWF0ZUxlZnQgJiYgbmV3TGVmdCA+IGN1cnJlbnRMZWZ0ICYmIHNjcm9sbExlZnQgPj0gbmV3TGVmdCkge1xuICAgICAgICBlbC5zY3JvbGxMZWZ0ID0gbmV3TGVmdDtcbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChhbmltYXRlTGVmdCAmJiBuZXdMZWZ0IDwgY3VycmVudExlZnQgJiYgc2Nyb2xsTGVmdCA8PSBuZXdMZWZ0KSB7XG4gICAgICAgIGVsLnNjcm9sbExlZnQgPSBuZXdMZWZ0O1xuICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChhbmltYXRlVG9wKSBlbC5zY3JvbGxUb3AgPSBzY3JvbGxUb3A7XG4gICAgICBpZiAoYW5pbWF0ZUxlZnQpIGVsLnNjcm9sbExlZnQgPSBzY3JvbGxMZWZ0O1xuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpO1xuICAgIH1cblxuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgfSk7XG59IC8vIHNjcm9sbFRvcCh0b3AsIGR1cmF0aW9uLCBlYXNpbmcsIGNhbGxiYWNrKSB7XG5cblxuZnVuY3Rpb24gc2Nyb2xsVG9wKCkge1xuICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gIH1cblxuICB2YXIgdG9wID0gYXJnc1swXSxcbiAgICAgIGR1cmF0aW9uID0gYXJnc1sxXSxcbiAgICAgIGVhc2luZyA9IGFyZ3NbMl0sXG4gICAgICBjYWxsYmFjayA9IGFyZ3NbM107XG5cbiAgaWYgKGFyZ3MubGVuZ3RoID09PSAzICYmIHR5cGVvZiBlYXNpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICB0b3AgPSBhcmdzWzBdO1xuICAgIGR1cmF0aW9uID0gYXJnc1sxXTtcbiAgICBjYWxsYmFjayA9IGFyZ3NbMl07XG4gICAgZWFzaW5nID0gYXJnc1szXTtcbiAgfVxuXG4gIHZhciBkb20gPSB0aGlzO1xuXG4gIGlmICh0eXBlb2YgdG9wID09PSAndW5kZWZpbmVkJykge1xuICAgIGlmIChkb20ubGVuZ3RoID4gMCkgcmV0dXJuIGRvbVswXS5zY3JvbGxUb3A7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gZG9tLnNjcm9sbFRvKHVuZGVmaW5lZCwgdG9wLCBkdXJhdGlvbiwgZWFzaW5nLCBjYWxsYmFjayk7XG59XG5cbmZ1bmN0aW9uIHNjcm9sbExlZnQoKSB7XG4gIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMyksIF9rZXkzID0gMDsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgIGFyZ3NbX2tleTNdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgfVxuXG4gIHZhciBsZWZ0ID0gYXJnc1swXSxcbiAgICAgIGR1cmF0aW9uID0gYXJnc1sxXSxcbiAgICAgIGVhc2luZyA9IGFyZ3NbMl0sXG4gICAgICBjYWxsYmFjayA9IGFyZ3NbM107XG5cbiAgaWYgKGFyZ3MubGVuZ3RoID09PSAzICYmIHR5cGVvZiBlYXNpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBsZWZ0ID0gYXJnc1swXTtcbiAgICBkdXJhdGlvbiA9IGFyZ3NbMV07XG4gICAgY2FsbGJhY2sgPSBhcmdzWzJdO1xuICAgIGVhc2luZyA9IGFyZ3NbM107XG4gIH1cblxuICB2YXIgZG9tID0gdGhpcztcblxuICBpZiAodHlwZW9mIGxlZnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKGRvbS5sZW5ndGggPiAwKSByZXR1cm4gZG9tWzBdLnNjcm9sbExlZnQ7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gZG9tLnNjcm9sbFRvKGxlZnQsIHVuZGVmaW5lZCwgZHVyYXRpb24sIGVhc2luZywgY2FsbGJhY2spO1xufVxuXG5mdW5jdGlvbiBhbmltYXRlKGluaXRpYWxQcm9wcywgaW5pdGlhbFBhcmFtcykge1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIHZhciBlbHMgPSB0aGlzO1xuICB2YXIgYSA9IHtcbiAgICBwcm9wczogT2JqZWN0LmFzc2lnbih7fSwgaW5pdGlhbFByb3BzKSxcbiAgICBwYXJhbXM6IE9iamVjdC5hc3NpZ24oe1xuICAgICAgZHVyYXRpb246IDMwMCxcbiAgICAgIGVhc2luZzogJ3N3aW5nJyAvLyBvciAnbGluZWFyJ1xuXG4gICAgICAvKiBDYWxsYmFja3NcbiAgICAgIGJlZ2luKGVsZW1lbnRzKVxuICAgICAgY29tcGxldGUoZWxlbWVudHMpXG4gICAgICBwcm9ncmVzcyhlbGVtZW50cywgY29tcGxldGUsIHJlbWFpbmluZywgc3RhcnQsIHR3ZWVuVmFsdWUpXG4gICAgICAqL1xuXG4gICAgfSwgaW5pdGlhbFBhcmFtcyksXG4gICAgZWxlbWVudHM6IGVscyxcbiAgICBhbmltYXRpbmc6IGZhbHNlLFxuICAgIHF1ZTogW10sXG4gICAgZWFzaW5nUHJvZ3Jlc3M6IGZ1bmN0aW9uIGVhc2luZ1Byb2dyZXNzKGVhc2luZywgcHJvZ3Jlc3MpIHtcbiAgICAgIGlmIChlYXNpbmcgPT09ICdzd2luZycpIHtcbiAgICAgICAgcmV0dXJuIDAuNSAtIE1hdGguY29zKHByb2dyZXNzICogTWF0aC5QSSkgLyAyO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGVhc2luZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gZWFzaW5nKHByb2dyZXNzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByb2dyZXNzO1xuICAgIH0sXG4gICAgc3RvcDogZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgIGlmIChhLmZyYW1lSWQpIHtcbiAgICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKGEuZnJhbWVJZCk7XG4gICAgICB9XG5cbiAgICAgIGEuYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICBhLmVsZW1lbnRzLmVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gZWw7XG4gICAgICAgIGRlbGV0ZSBlbGVtZW50LmRvbTdBbmltYXRlSW5zdGFuY2U7XG4gICAgICB9KTtcbiAgICAgIGEucXVlID0gW107XG4gICAgfSxcbiAgICBkb25lOiBmdW5jdGlvbiBkb25lKGNvbXBsZXRlKSB7XG4gICAgICBhLmFuaW1hdGluZyA9IGZhbHNlO1xuICAgICAgYS5lbGVtZW50cy5lYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IGVsO1xuICAgICAgICBkZWxldGUgZWxlbWVudC5kb203QW5pbWF0ZUluc3RhbmNlO1xuICAgICAgfSk7XG4gICAgICBpZiAoY29tcGxldGUpIGNvbXBsZXRlKGVscyk7XG5cbiAgICAgIGlmIChhLnF1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciBxdWUgPSBhLnF1ZS5zaGlmdCgpO1xuICAgICAgICBhLmFuaW1hdGUocXVlWzBdLCBxdWVbMV0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgYW5pbWF0ZTogZnVuY3Rpb24gYW5pbWF0ZShwcm9wcywgcGFyYW1zKSB7XG4gICAgICBpZiAoYS5hbmltYXRpbmcpIHtcbiAgICAgICAgYS5xdWUucHVzaChbcHJvcHMsIHBhcmFtc10pO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH1cblxuICAgICAgdmFyIGVsZW1lbnRzID0gW107IC8vIERlZmluZSAmIENhY2hlIEluaXRpYWxzICYgVW5pdHNcblxuICAgICAgYS5lbGVtZW50cy5lYWNoKGZ1bmN0aW9uIChlbCwgaW5kZXgpIHtcbiAgICAgICAgdmFyIGluaXRpYWxGdWxsVmFsdWU7XG4gICAgICAgIHZhciBpbml0aWFsVmFsdWU7XG4gICAgICAgIHZhciB1bml0O1xuICAgICAgICB2YXIgZmluYWxWYWx1ZTtcbiAgICAgICAgdmFyIGZpbmFsRnVsbFZhbHVlO1xuICAgICAgICBpZiAoIWVsLmRvbTdBbmltYXRlSW5zdGFuY2UpIGEuZWxlbWVudHNbaW5kZXhdLmRvbTdBbmltYXRlSW5zdGFuY2UgPSBhO1xuICAgICAgICBlbGVtZW50c1tpbmRleF0gPSB7XG4gICAgICAgICAgY29udGFpbmVyOiBlbFxuICAgICAgICB9O1xuICAgICAgICBPYmplY3Qua2V5cyhwcm9wcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgIGluaXRpYWxGdWxsVmFsdWUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShwcm9wKS5yZXBsYWNlKCcsJywgJy4nKTtcbiAgICAgICAgICBpbml0aWFsVmFsdWUgPSBwYXJzZUZsb2F0KGluaXRpYWxGdWxsVmFsdWUpO1xuICAgICAgICAgIHVuaXQgPSBpbml0aWFsRnVsbFZhbHVlLnJlcGxhY2UoaW5pdGlhbFZhbHVlLCAnJyk7XG4gICAgICAgICAgZmluYWxWYWx1ZSA9IHBhcnNlRmxvYXQocHJvcHNbcHJvcF0pO1xuICAgICAgICAgIGZpbmFsRnVsbFZhbHVlID0gcHJvcHNbcHJvcF0gKyB1bml0O1xuICAgICAgICAgIGVsZW1lbnRzW2luZGV4XVtwcm9wXSA9IHtcbiAgICAgICAgICAgIGluaXRpYWxGdWxsVmFsdWU6IGluaXRpYWxGdWxsVmFsdWUsXG4gICAgICAgICAgICBpbml0aWFsVmFsdWU6IGluaXRpYWxWYWx1ZSxcbiAgICAgICAgICAgIHVuaXQ6IHVuaXQsXG4gICAgICAgICAgICBmaW5hbFZhbHVlOiBmaW5hbFZhbHVlLFxuICAgICAgICAgICAgZmluYWxGdWxsVmFsdWU6IGZpbmFsRnVsbFZhbHVlLFxuICAgICAgICAgICAgY3VycmVudFZhbHVlOiBpbml0aWFsVmFsdWVcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgdmFyIHN0YXJ0VGltZSA9IG51bGw7XG4gICAgICB2YXIgdGltZTtcbiAgICAgIHZhciBlbGVtZW50c0RvbmUgPSAwO1xuICAgICAgdmFyIHByb3BzRG9uZSA9IDA7XG4gICAgICB2YXIgZG9uZTtcbiAgICAgIHZhciBiZWdhbiA9IGZhbHNlO1xuICAgICAgYS5hbmltYXRpbmcgPSB0cnVlO1xuXG4gICAgICBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgdmFyIHByb2dyZXNzO1xuICAgICAgICB2YXIgZWFzZVByb2dyZXNzOyAvLyBsZXQgZWw7XG5cbiAgICAgICAgaWYgKCFiZWdhbikge1xuICAgICAgICAgIGJlZ2FuID0gdHJ1ZTtcbiAgICAgICAgICBpZiAocGFyYW1zLmJlZ2luKSBwYXJhbXMuYmVnaW4oZWxzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGFydFRpbWUgPT09IG51bGwpIHtcbiAgICAgICAgICBzdGFydFRpbWUgPSB0aW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcmFtcy5wcm9ncmVzcykge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgIHBhcmFtcy5wcm9ncmVzcyhlbHMsIE1hdGgubWF4KE1hdGgubWluKCh0aW1lIC0gc3RhcnRUaW1lKSAvIHBhcmFtcy5kdXJhdGlvbiwgMSksIDApLCBzdGFydFRpbWUgKyBwYXJhbXMuZHVyYXRpb24gLSB0aW1lIDwgMCA/IDAgOiBzdGFydFRpbWUgKyBwYXJhbXMuZHVyYXRpb24gLSB0aW1lLCBzdGFydFRpbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgIHZhciBlbCA9IGVsZW1lbnQ7XG4gICAgICAgICAgaWYgKGRvbmUgfHwgZWwuZG9uZSkgcmV0dXJuO1xuICAgICAgICAgIE9iamVjdC5rZXlzKHByb3BzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgICAgICBpZiAoZG9uZSB8fCBlbC5kb25lKSByZXR1cm47XG4gICAgICAgICAgICBwcm9ncmVzcyA9IE1hdGgubWF4KE1hdGgubWluKCh0aW1lIC0gc3RhcnRUaW1lKSAvIHBhcmFtcy5kdXJhdGlvbiwgMSksIDApO1xuICAgICAgICAgICAgZWFzZVByb2dyZXNzID0gYS5lYXNpbmdQcm9ncmVzcyhwYXJhbXMuZWFzaW5nLCBwcm9ncmVzcyk7XG4gICAgICAgICAgICB2YXIgX2VsJHByb3AgPSBlbFtwcm9wXSxcbiAgICAgICAgICAgICAgICBpbml0aWFsVmFsdWUgPSBfZWwkcHJvcC5pbml0aWFsVmFsdWUsXG4gICAgICAgICAgICAgICAgZmluYWxWYWx1ZSA9IF9lbCRwcm9wLmZpbmFsVmFsdWUsXG4gICAgICAgICAgICAgICAgdW5pdCA9IF9lbCRwcm9wLnVuaXQ7XG4gICAgICAgICAgICBlbFtwcm9wXS5jdXJyZW50VmFsdWUgPSBpbml0aWFsVmFsdWUgKyBlYXNlUHJvZ3Jlc3MgKiAoZmluYWxWYWx1ZSAtIGluaXRpYWxWYWx1ZSk7XG4gICAgICAgICAgICB2YXIgY3VycmVudFZhbHVlID0gZWxbcHJvcF0uY3VycmVudFZhbHVlO1xuXG4gICAgICAgICAgICBpZiAoZmluYWxWYWx1ZSA+IGluaXRpYWxWYWx1ZSAmJiBjdXJyZW50VmFsdWUgPj0gZmluYWxWYWx1ZSB8fCBmaW5hbFZhbHVlIDwgaW5pdGlhbFZhbHVlICYmIGN1cnJlbnRWYWx1ZSA8PSBmaW5hbFZhbHVlKSB7XG4gICAgICAgICAgICAgIGVsLmNvbnRhaW5lci5zdHlsZVtwcm9wXSA9IGZpbmFsVmFsdWUgKyB1bml0O1xuICAgICAgICAgICAgICBwcm9wc0RvbmUgKz0gMTtcblxuICAgICAgICAgICAgICBpZiAocHJvcHNEb25lID09PSBPYmplY3Qua2V5cyhwcm9wcykubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZWwuZG9uZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgZWxlbWVudHNEb25lICs9IDE7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoZWxlbWVudHNEb25lID09PSBlbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICBhLmRvbmUocGFyYW1zLmNvbXBsZXRlKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlbC5jb250YWluZXIuc3R5bGVbcHJvcF0gPSBjdXJyZW50VmFsdWUgKyB1bml0O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGRvbmUpIHJldHVybjsgLy8gVGhlbiBjYWxsXG5cbiAgICAgICAgYS5mcmFtZUlkID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpO1xuICAgICAgfVxuXG4gICAgICBhLmZyYW1lSWQgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XG4gICAgICByZXR1cm4gYTtcbiAgICB9XG4gIH07XG5cbiAgaWYgKGEuZWxlbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGVscztcbiAgfVxuXG4gIHZhciBhbmltYXRlSW5zdGFuY2U7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmVsZW1lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGEuZWxlbWVudHNbaV0uZG9tN0FuaW1hdGVJbnN0YW5jZSkge1xuICAgICAgYW5pbWF0ZUluc3RhbmNlID0gYS5lbGVtZW50c1tpXS5kb203QW5pbWF0ZUluc3RhbmNlO1xuICAgIH0gZWxzZSBhLmVsZW1lbnRzW2ldLmRvbTdBbmltYXRlSW5zdGFuY2UgPSBhO1xuICB9XG5cbiAgaWYgKCFhbmltYXRlSW5zdGFuY2UpIHtcbiAgICBhbmltYXRlSW5zdGFuY2UgPSBhO1xuICB9XG5cbiAgaWYgKGluaXRpYWxQcm9wcyA9PT0gJ3N0b3AnKSB7XG4gICAgYW5pbWF0ZUluc3RhbmNlLnN0b3AoKTtcbiAgfSBlbHNlIHtcbiAgICBhbmltYXRlSW5zdGFuY2UuYW5pbWF0ZShhLnByb3BzLCBhLnBhcmFtcyk7XG4gIH1cblxuICByZXR1cm4gZWxzO1xufVxuXG5mdW5jdGlvbiBzdG9wKCkge1xuICB2YXIgZWxzID0gdGhpcztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGVscy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChlbHNbaV0uZG9tN0FuaW1hdGVJbnN0YW5jZSkge1xuICAgICAgZWxzW2ldLmRvbTdBbmltYXRlSW5zdGFuY2Uuc3RvcCgpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgbm9UcmlnZ2VyID0gJ3Jlc2l6ZSBzY3JvbGwnLnNwbGl0KCcgJyk7XG5cbmZ1bmN0aW9uIHNob3J0Y3V0KG5hbWUpIHtcbiAgZnVuY3Rpb24gZXZlbnRIYW5kbGVyKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKG5vVHJpZ2dlci5pbmRleE9mKG5hbWUpIDwgMCkge1xuICAgICAgICAgIGlmIChuYW1lIGluIHRoaXNbaV0pIHRoaXNbaV1bbmFtZV0oKTtlbHNlIHtcbiAgICAgICAgICAgICQodGhpc1tpXSkudHJpZ2dlcihuYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMub24uYXBwbHkodGhpcywgW25hbWVdLmNvbmNhdChhcmdzKSk7XG4gIH1cblxuICByZXR1cm4gZXZlbnRIYW5kbGVyO1xufVxuXG52YXIgY2xpY2sgPSBzaG9ydGN1dCgnY2xpY2snKTtcbnZhciBibHVyID0gc2hvcnRjdXQoJ2JsdXInKTtcbnZhciBmb2N1cyA9IHNob3J0Y3V0KCdmb2N1cycpO1xudmFyIGZvY3VzaW4gPSBzaG9ydGN1dCgnZm9jdXNpbicpO1xudmFyIGZvY3Vzb3V0ID0gc2hvcnRjdXQoJ2ZvY3Vzb3V0Jyk7XG52YXIga2V5dXAgPSBzaG9ydGN1dCgna2V5dXAnKTtcbnZhciBrZXlkb3duID0gc2hvcnRjdXQoJ2tleWRvd24nKTtcbnZhciBrZXlwcmVzcyA9IHNob3J0Y3V0KCdrZXlwcmVzcycpO1xudmFyIHN1Ym1pdCA9IHNob3J0Y3V0KCdzdWJtaXQnKTtcbnZhciBjaGFuZ2UgPSBzaG9ydGN1dCgnY2hhbmdlJyk7XG52YXIgbW91c2Vkb3duID0gc2hvcnRjdXQoJ21vdXNlZG93bicpO1xudmFyIG1vdXNlbW92ZSA9IHNob3J0Y3V0KCdtb3VzZW1vdmUnKTtcbnZhciBtb3VzZXVwID0gc2hvcnRjdXQoJ21vdXNldXAnKTtcbnZhciBtb3VzZWVudGVyID0gc2hvcnRjdXQoJ21vdXNlZW50ZXInKTtcbnZhciBtb3VzZWxlYXZlID0gc2hvcnRjdXQoJ21vdXNlbGVhdmUnKTtcbnZhciBtb3VzZW91dCA9IHNob3J0Y3V0KCdtb3VzZW91dCcpO1xudmFyIG1vdXNlb3ZlciA9IHNob3J0Y3V0KCdtb3VzZW92ZXInKTtcbnZhciB0b3VjaHN0YXJ0ID0gc2hvcnRjdXQoJ3RvdWNoc3RhcnQnKTtcbnZhciB0b3VjaGVuZCA9IHNob3J0Y3V0KCd0b3VjaGVuZCcpO1xudmFyIHRvdWNobW92ZSA9IHNob3J0Y3V0KCd0b3VjaG1vdmUnKTtcbnZhciByZXNpemUgPSBzaG9ydGN1dCgncmVzaXplJyk7XG52YXIgc2Nyb2xsID0gc2hvcnRjdXQoJ3Njcm9sbCcpO1xuXG5leHBvcnQgZGVmYXVsdCAkO1xuZXhwb3J0IHsgJCwgYWRkLCBhZGRDbGFzcywgYW5pbWF0ZSwgYW5pbWF0aW9uRW5kLCBhcHBlbmQsIGFwcGVuZFRvLCBhdHRyLCBibHVyLCBjaGFuZ2UsIGNoaWxkcmVuLCBjbGljaywgY2xvc2VzdCwgY3NzLCBkYXRhLCBkYXRhc2V0LCBkZXRhY2gsIGVhY2gsIGVtcHR5LCBlcSwgZmlsdGVyLCBmaW5kLCBmb2N1cywgZm9jdXNpbiwgZm9jdXNvdXQsIGhhc0NsYXNzLCBoZWlnaHQsIGhpZGUsIGh0bWwsIGluZGV4LCBpbnNlcnRBZnRlciwgaW5zZXJ0QmVmb3JlLCBpcywga2V5ZG93biwga2V5cHJlc3MsIGtleXVwLCBtb3VzZWRvd24sIG1vdXNlZW50ZXIsIG1vdXNlbGVhdmUsIG1vdXNlbW92ZSwgbW91c2VvdXQsIG1vdXNlb3ZlciwgbW91c2V1cCwgbmV4dCwgbmV4dEFsbCwgb2ZmLCBvZmZzZXQsIG9uLCBvbmNlLCBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aCwgcGFyZW50LCBwYXJlbnRzLCBwcmVwZW5kLCBwcmVwZW5kVG8sIHByZXYsIHByZXZBbGwsIHByb3AsIHJlbW92ZSwgcmVtb3ZlQXR0ciwgcmVtb3ZlQ2xhc3MsIHJlbW92ZURhdGEsIHJlc2l6ZSwgc2Nyb2xsLCBzY3JvbGxMZWZ0LCBzY3JvbGxUbywgc2Nyb2xsVG9wLCBzaG93LCBzaWJsaW5ncywgc3RvcCwgc3R5bGVzLCBzdWJtaXQsIHRleHQsIHRvZ2dsZUNsYXNzLCB0b3VjaGVuZCwgdG91Y2htb3ZlLCB0b3VjaHN0YXJ0LCB0cmFuc2Zvcm0sIHRyYW5zaXRpb24sIHRyYW5zaXRpb25FbmQsIHRyaWdnZXIsIHZhbCwgdmFsdWUsIHdpZHRoIH07XG4iLCIvKipcbiAqIFNTUiBXaW5kb3cgMy4wLjAtYWxwaGEuNFxuICogQmV0dGVyIGhhbmRsaW5nIGZvciB3aW5kb3cgb2JqZWN0IGluIFNTUiBlbnZpcm9ubWVudFxuICogaHR0cHM6Ly9naXRodWIuY29tL25vbGltaXRzNHdlYi9zc3Itd2luZG93XG4gKlxuICogQ29weXJpZ2h0IDIwMjAsIFZsYWRpbWlyIEtoYXJsYW1waWRpXG4gKlxuICogTGljZW5zZWQgdW5kZXIgTUlUXG4gKlxuICogUmVsZWFzZWQgb246IE1heSAyMCwgMjAyMFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuZnVuY3Rpb24gaXNPYmplY3Qob2JqKSB7XG4gICAgcmV0dXJuIChvYmogIT09IG51bGwgJiZcbiAgICAgICAgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgJ2NvbnN0cnVjdG9yJyBpbiBvYmogJiZcbiAgICAgICAgb2JqLmNvbnN0cnVjdG9yID09PSBPYmplY3QpO1xufVxuZnVuY3Rpb24gZXh0ZW5kKHRhcmdldCwgc3JjKSB7XG4gICAgaWYgKHRhcmdldCA9PT0gdm9pZCAwKSB7IHRhcmdldCA9IHt9OyB9XG4gICAgaWYgKHNyYyA9PT0gdm9pZCAwKSB7IHNyYyA9IHt9OyB9XG4gICAgT2JqZWN0LmtleXMoc3JjKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXRba2V5XSA9PT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICB0YXJnZXRba2V5XSA9IHNyY1trZXldO1xuICAgICAgICBlbHNlIGlmIChpc09iamVjdChzcmNba2V5XSkgJiZcbiAgICAgICAgICAgIGlzT2JqZWN0KHRhcmdldFtrZXldKSAmJlxuICAgICAgICAgICAgT2JqZWN0LmtleXMoc3JjW2tleV0pLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGV4dGVuZCh0YXJnZXRba2V5XSwgc3JjW2tleV0pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbnZhciBzc3JEb2N1bWVudCA9IHtcbiAgICBib2R5OiB7fSxcbiAgICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKCkgeyB9LFxuICAgIGFjdGl2ZUVsZW1lbnQ6IHtcbiAgICAgICAgYmx1cjogZnVuY3Rpb24gKCkgeyB9LFxuICAgICAgICBub2RlTmFtZTogJycsXG4gICAgfSxcbiAgICBxdWVyeVNlbGVjdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgcXVlcnlTZWxlY3RvckFsbDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfSxcbiAgICBnZXRFbGVtZW50QnlJZDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIGNyZWF0ZUV2ZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbml0RXZlbnQ6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGNyZWF0ZUVsZW1lbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgICAgICAgIGNoaWxkTm9kZXM6IFtdLFxuICAgICAgICAgICAgc3R5bGU6IHt9LFxuICAgICAgICAgICAgc2V0QXR0cmlidXRlOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgICAgICBnZXRFbGVtZW50c0J5VGFnTmFtZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBjcmVhdGVFbGVtZW50TlM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH0sXG4gICAgaW1wb3J0Tm9kZTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIGxvY2F0aW9uOiB7XG4gICAgICAgIGhhc2g6ICcnLFxuICAgICAgICBob3N0OiAnJyxcbiAgICAgICAgaG9zdG5hbWU6ICcnLFxuICAgICAgICBocmVmOiAnJyxcbiAgICAgICAgb3JpZ2luOiAnJyxcbiAgICAgICAgcGF0aG5hbWU6ICcnLFxuICAgICAgICBwcm90b2NvbDogJycsXG4gICAgICAgIHNlYXJjaDogJycsXG4gICAgfSxcbn07XG5mdW5jdGlvbiBnZXREb2N1bWVudCgpIHtcbiAgICB2YXIgZG9jID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50IDoge307XG4gICAgZXh0ZW5kKGRvYywgc3NyRG9jdW1lbnQpO1xuICAgIHJldHVybiBkb2M7XG59XG5cbnZhciBzc3JXaW5kb3cgPSB7XG4gICAgZG9jdW1lbnQ6IHNzckRvY3VtZW50LFxuICAgIG5hdmlnYXRvcjoge1xuICAgICAgICB1c2VyQWdlbnQ6ICcnLFxuICAgIH0sXG4gICAgbG9jYXRpb246IHtcbiAgICAgICAgaGFzaDogJycsXG4gICAgICAgIGhvc3Q6ICcnLFxuICAgICAgICBob3N0bmFtZTogJycsXG4gICAgICAgIGhyZWY6ICcnLFxuICAgICAgICBvcmlnaW46ICcnLFxuICAgICAgICBwYXRobmFtZTogJycsXG4gICAgICAgIHByb3RvY29sOiAnJyxcbiAgICAgICAgc2VhcmNoOiAnJyxcbiAgICB9LFxuICAgIGhpc3Rvcnk6IHtcbiAgICAgICAgcmVwbGFjZVN0YXRlOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgIHB1c2hTdGF0ZTogZnVuY3Rpb24gKCkgeyB9LFxuICAgICAgICBnbzogZnVuY3Rpb24gKCkgeyB9LFxuICAgICAgICBiYWNrOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgfSxcbiAgICBDdXN0b21FdmVudDogZnVuY3Rpb24gQ3VzdG9tRXZlbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKCkgeyB9LFxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICBnZXRDb21wdXRlZFN0eWxlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnZXRQcm9wZXJ0eVZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIEltYWdlOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgRGF0ZTogZnVuY3Rpb24gKCkgeyB9LFxuICAgIHNjcmVlbjoge30sXG4gICAgc2V0VGltZW91dDogZnVuY3Rpb24gKCkgeyB9LFxuICAgIGNsZWFyVGltZW91dDogZnVuY3Rpb24gKCkgeyB9LFxuICAgIG1hdGNoTWVkaWE6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH0sXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGNhbGxiYWNrLCAwKTtcbiAgICB9LFxuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lOiBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNsZWFyVGltZW91dChpZCk7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBnZXRXaW5kb3coKSB7XG4gICAgdmFyIHdpbiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDoge307XG4gICAgZXh0ZW5kKHdpbiwgc3NyV2luZG93KTtcbiAgICByZXR1cm4gd2luO1xufVxuXG5leHBvcnQgeyBleHRlbmQsIGdldERvY3VtZW50LCBnZXRXaW5kb3csIHNzckRvY3VtZW50LCBzc3JXaW5kb3cgfTtcbiIsImZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmltcG9ydCAkIGZyb20gJy4uLy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQgeyBiaW5kTW9kdWxlTWV0aG9kcyB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbnZhciBBMTF5ID0ge1xuICBtYWtlRWxGb2N1c2FibGU6IGZ1bmN0aW9uIG1ha2VFbEZvY3VzYWJsZSgkZWwpIHtcbiAgICAkZWwuYXR0cigndGFiSW5kZXgnLCAnMCcpO1xuICAgIHJldHVybiAkZWw7XG4gIH0sXG4gIG1ha2VFbE5vdEZvY3VzYWJsZTogZnVuY3Rpb24gbWFrZUVsTm90Rm9jdXNhYmxlKCRlbCkge1xuICAgICRlbC5hdHRyKCd0YWJJbmRleCcsICctMScpO1xuICAgIHJldHVybiAkZWw7XG4gIH0sXG4gIGFkZEVsUm9sZTogZnVuY3Rpb24gYWRkRWxSb2xlKCRlbCwgcm9sZSkge1xuICAgICRlbC5hdHRyKCdyb2xlJywgcm9sZSk7XG4gICAgcmV0dXJuICRlbDtcbiAgfSxcbiAgYWRkRWxMYWJlbDogZnVuY3Rpb24gYWRkRWxMYWJlbCgkZWwsIGxhYmVsKSB7XG4gICAgJGVsLmF0dHIoJ2FyaWEtbGFiZWwnLCBsYWJlbCk7XG4gICAgcmV0dXJuICRlbDtcbiAgfSxcbiAgZGlzYWJsZUVsOiBmdW5jdGlvbiBkaXNhYmxlRWwoJGVsKSB7XG4gICAgJGVsLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCB0cnVlKTtcbiAgICByZXR1cm4gJGVsO1xuICB9LFxuICBlbmFibGVFbDogZnVuY3Rpb24gZW5hYmxlRWwoJGVsKSB7XG4gICAgJGVsLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCBmYWxzZSk7XG4gICAgcmV0dXJuICRlbDtcbiAgfSxcbiAgb25FbnRlcktleTogZnVuY3Rpb24gb25FbnRlcktleShlKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuYTExeTtcbiAgICBpZiAoZS5rZXlDb2RlICE9PSAxMykgcmV0dXJuO1xuICAgIHZhciAkdGFyZ2V0RWwgPSAkKGUudGFyZ2V0KTtcblxuICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kbmV4dEVsICYmICR0YXJnZXRFbC5pcyhzd2lwZXIubmF2aWdhdGlvbi4kbmV4dEVsKSkge1xuICAgICAgaWYgKCEoc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLmxvb3ApKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZU5leHQoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN3aXBlci5pc0VuZCkge1xuICAgICAgICBzd2lwZXIuYTExeS5ub3RpZnkocGFyYW1zLmxhc3RTbGlkZU1lc3NhZ2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLmExMXkubm90aWZ5KHBhcmFtcy5uZXh0U2xpZGVNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgc3dpcGVyLm5hdmlnYXRpb24uJHByZXZFbCAmJiAkdGFyZ2V0RWwuaXMoc3dpcGVyLm5hdmlnYXRpb24uJHByZXZFbCkpIHtcbiAgICAgIGlmICghKHN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5sb29wKSkge1xuICAgICAgICBzd2lwZXIuc2xpZGVQcmV2KCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICAgICAgc3dpcGVyLmExMXkubm90aWZ5KHBhcmFtcy5maXJzdFNsaWRlTWVzc2FnZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuYTExeS5ub3RpZnkocGFyYW1zLnByZXZTbGlkZU1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbiAmJiAkdGFyZ2V0RWwuaXMoXCIuXCIgKyBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MpKSB7XG4gICAgICAkdGFyZ2V0RWxbMF0uY2xpY2soKTtcbiAgICB9XG4gIH0sXG4gIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KG1lc3NhZ2UpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgbm90aWZpY2F0aW9uID0gc3dpcGVyLmExMXkubGl2ZVJlZ2lvbjtcbiAgICBpZiAobm90aWZpY2F0aW9uLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIG5vdGlmaWNhdGlvbi5odG1sKCcnKTtcbiAgICBub3RpZmljYXRpb24uaHRtbChtZXNzYWdlKTtcbiAgfSxcbiAgdXBkYXRlTmF2aWdhdGlvbjogZnVuY3Rpb24gdXBkYXRlTmF2aWdhdGlvbigpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wIHx8ICFzd2lwZXIubmF2aWdhdGlvbikgcmV0dXJuO1xuICAgIHZhciBfc3dpcGVyJG5hdmlnYXRpb24gPSBzd2lwZXIubmF2aWdhdGlvbixcbiAgICAgICAgJG5leHRFbCA9IF9zd2lwZXIkbmF2aWdhdGlvbi4kbmV4dEVsLFxuICAgICAgICAkcHJldkVsID0gX3N3aXBlciRuYXZpZ2F0aW9uLiRwcmV2RWw7XG5cbiAgICBpZiAoJHByZXZFbCAmJiAkcHJldkVsLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICAgICAgc3dpcGVyLmExMXkuZGlzYWJsZUVsKCRwcmV2RWwpO1xuICAgICAgICBzd2lwZXIuYTExeS5tYWtlRWxOb3RGb2N1c2FibGUoJHByZXZFbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuYTExeS5lbmFibGVFbCgkcHJldkVsKTtcbiAgICAgICAgc3dpcGVyLmExMXkubWFrZUVsRm9jdXNhYmxlKCRwcmV2RWwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICgkbmV4dEVsICYmICRuZXh0RWwubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHN3aXBlci5pc0VuZCkge1xuICAgICAgICBzd2lwZXIuYTExeS5kaXNhYmxlRWwoJG5leHRFbCk7XG4gICAgICAgIHN3aXBlci5hMTF5Lm1ha2VFbE5vdEZvY3VzYWJsZSgkbmV4dEVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5hMTF5LmVuYWJsZUVsKCRuZXh0RWwpO1xuICAgICAgICBzd2lwZXIuYTExeS5tYWtlRWxGb2N1c2FibGUoJG5leHRFbCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICB1cGRhdGVQYWdpbmF0aW9uOiBmdW5jdGlvbiB1cGRhdGVQYWdpbmF0aW9uKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmExMXk7XG5cbiAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24gJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZSAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMubGVuZ3RoKSB7XG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmVhY2goZnVuY3Rpb24gKGJ1bGxldEVsKSB7XG4gICAgICAgIHZhciAkYnVsbGV0RWwgPSAkKGJ1bGxldEVsKTtcbiAgICAgICAgc3dpcGVyLmExMXkubWFrZUVsRm9jdXNhYmxlKCRidWxsZXRFbCk7XG4gICAgICAgIHN3aXBlci5hMTF5LmFkZEVsUm9sZSgkYnVsbGV0RWwsICdidXR0b24nKTtcbiAgICAgICAgc3dpcGVyLmExMXkuYWRkRWxMYWJlbCgkYnVsbGV0RWwsIHBhcmFtcy5wYWdpbmF0aW9uQnVsbGV0TWVzc2FnZS5yZXBsYWNlKC9cXHtcXHtpbmRleFxcfVxcfS8sICRidWxsZXRFbC5pbmRleCgpICsgMSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LFxuICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci4kZWwuYXBwZW5kKHN3aXBlci5hMTF5LmxpdmVSZWdpb24pOyAvLyBOYXZpZ2F0aW9uXG5cbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5hMTF5O1xuICAgIHZhciAkbmV4dEVsO1xuICAgIHZhciAkcHJldkVsO1xuXG4gICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIHN3aXBlci5uYXZpZ2F0aW9uLiRuZXh0RWwpIHtcbiAgICAgICRuZXh0RWwgPSBzd2lwZXIubmF2aWdhdGlvbi4kbmV4dEVsO1xuICAgIH1cblxuICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsKSB7XG4gICAgICAkcHJldkVsID0gc3dpcGVyLm5hdmlnYXRpb24uJHByZXZFbDtcbiAgICB9XG5cbiAgICBpZiAoJG5leHRFbCkge1xuICAgICAgc3dpcGVyLmExMXkubWFrZUVsRm9jdXNhYmxlKCRuZXh0RWwpO1xuICAgICAgc3dpcGVyLmExMXkuYWRkRWxSb2xlKCRuZXh0RWwsICdidXR0b24nKTtcbiAgICAgIHN3aXBlci5hMTF5LmFkZEVsTGFiZWwoJG5leHRFbCwgcGFyYW1zLm5leHRTbGlkZU1lc3NhZ2UpO1xuICAgICAgJG5leHRFbC5vbigna2V5ZG93bicsIHN3aXBlci5hMTF5Lm9uRW50ZXJLZXkpO1xuICAgIH1cblxuICAgIGlmICgkcHJldkVsKSB7XG4gICAgICBzd2lwZXIuYTExeS5tYWtlRWxGb2N1c2FibGUoJHByZXZFbCk7XG4gICAgICBzd2lwZXIuYTExeS5hZGRFbFJvbGUoJHByZXZFbCwgJ2J1dHRvbicpO1xuICAgICAgc3dpcGVyLmExMXkuYWRkRWxMYWJlbCgkcHJldkVsLCBwYXJhbXMucHJldlNsaWRlTWVzc2FnZSk7XG4gICAgICAkcHJldkVsLm9uKCdrZXlkb3duJywgc3dpcGVyLmExMXkub25FbnRlcktleSk7XG4gICAgfSAvLyBQYWdpbmF0aW9uXG5cblxuICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbiAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uY2xpY2thYmxlICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5sZW5ndGgpIHtcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uLiRlbC5vbigna2V5ZG93bicsIFwiLlwiICsgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldENsYXNzLCBzd2lwZXIuYTExeS5vbkVudGVyS2V5KTtcbiAgICB9XG4gIH0sXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5hMTF5LmxpdmVSZWdpb24gJiYgc3dpcGVyLmExMXkubGl2ZVJlZ2lvbi5sZW5ndGggPiAwKSBzd2lwZXIuYTExeS5saXZlUmVnaW9uLnJlbW92ZSgpO1xuICAgIHZhciAkbmV4dEVsO1xuICAgIHZhciAkcHJldkVsO1xuXG4gICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIHN3aXBlci5uYXZpZ2F0aW9uLiRuZXh0RWwpIHtcbiAgICAgICRuZXh0RWwgPSBzd2lwZXIubmF2aWdhdGlvbi4kbmV4dEVsO1xuICAgIH1cblxuICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsKSB7XG4gICAgICAkcHJldkVsID0gc3dpcGVyLm5hdmlnYXRpb24uJHByZXZFbDtcbiAgICB9XG5cbiAgICBpZiAoJG5leHRFbCkge1xuICAgICAgJG5leHRFbC5vZmYoJ2tleWRvd24nLCBzd2lwZXIuYTExeS5vbkVudGVyS2V5KTtcbiAgICB9XG5cbiAgICBpZiAoJHByZXZFbCkge1xuICAgICAgJHByZXZFbC5vZmYoJ2tleWRvd24nLCBzd2lwZXIuYTExeS5vbkVudGVyS2V5KTtcbiAgICB9IC8vIFBhZ2luYXRpb25cblxuXG4gICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5jbGlja2FibGUgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmxlbmd0aCkge1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uJGVsLm9mZigna2V5ZG93bicsIFwiLlwiICsgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldENsYXNzLCBzd2lwZXIuYTExeS5vbkVudGVyS2V5KTtcbiAgICB9XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdhMTF5JyxcbiAgcGFyYW1zOiB7XG4gICAgYTExeToge1xuICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgIG5vdGlmaWNhdGlvbkNsYXNzOiAnc3dpcGVyLW5vdGlmaWNhdGlvbicsXG4gICAgICBwcmV2U2xpZGVNZXNzYWdlOiAnUHJldmlvdXMgc2xpZGUnLFxuICAgICAgbmV4dFNsaWRlTWVzc2FnZTogJ05leHQgc2xpZGUnLFxuICAgICAgZmlyc3RTbGlkZU1lc3NhZ2U6ICdUaGlzIGlzIHRoZSBmaXJzdCBzbGlkZScsXG4gICAgICBsYXN0U2xpZGVNZXNzYWdlOiAnVGhpcyBpcyB0aGUgbGFzdCBzbGlkZScsXG4gICAgICBwYWdpbmF0aW9uQnVsbGV0TWVzc2FnZTogJ0dvIHRvIHNsaWRlIHt7aW5kZXh9fSdcbiAgICB9XG4gIH0sXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGJpbmRNb2R1bGVNZXRob2RzKHN3aXBlciwge1xuICAgICAgYTExeTogX2V4dGVuZHMoX2V4dGVuZHMoe30sIEExMXkpLCB7fSwge1xuICAgICAgICBsaXZlUmVnaW9uOiAkKFwiPHNwYW4gY2xhc3M9XFxcIlwiICsgc3dpcGVyLnBhcmFtcy5hMTF5Lm5vdGlmaWNhdGlvbkNsYXNzICsgXCJcXFwiIGFyaWEtbGl2ZT1cXFwiYXNzZXJ0aXZlXFxcIiBhcmlhLWF0b21pYz1cXFwidHJ1ZVxcXCI+PC9zcGFuPlwiKVxuICAgICAgfSlcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHN3aXBlcikge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLmExMXkuaW5pdCgpO1xuICAgICAgc3dpcGVyLmExMXkudXBkYXRlTmF2aWdhdGlvbigpO1xuICAgIH0sXG4gICAgdG9FZGdlOiBmdW5jdGlvbiB0b0VkZ2Uoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSByZXR1cm47XG4gICAgICBzd2lwZXIuYTExeS51cGRhdGVOYXZpZ2F0aW9uKCk7XG4gICAgfSxcbiAgICBmcm9tRWRnZTogZnVuY3Rpb24gZnJvbUVkZ2Uoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSByZXR1cm47XG4gICAgICBzd2lwZXIuYTExeS51cGRhdGVOYXZpZ2F0aW9uKCk7XG4gICAgfSxcbiAgICBwYWdpbmF0aW9uVXBkYXRlOiBmdW5jdGlvbiBwYWdpbmF0aW9uVXBkYXRlKHN3aXBlcikge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLmExMXkudXBkYXRlUGFnaW5hdGlvbigpO1xuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveShzd2lwZXIpIHtcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5hMTF5LmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci5hMTF5LmRlc3Ryb3koKTtcbiAgICB9XG4gIH1cbn07IiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuLyogZXNsaW50IG5vLXVuZGVyc2NvcmUtZGFuZ2xlOiBcIm9mZlwiICovXG5pbXBvcnQgeyBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0IHsgbmV4dFRpY2ssIGJpbmRNb2R1bGVNZXRob2RzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xudmFyIEF1dG9wbGF5ID0ge1xuICBydW46IGZ1bmN0aW9uIHJ1bigpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgJGFjdGl2ZVNsaWRlRWwgPSBzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgdmFyIGRlbGF5ID0gc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kZWxheTtcblxuICAgIGlmICgkYWN0aXZlU2xpZGVFbC5hdHRyKCdkYXRhLXN3aXBlci1hdXRvcGxheScpKSB7XG4gICAgICBkZWxheSA9ICRhY3RpdmVTbGlkZUVsLmF0dHIoJ2RhdGEtc3dpcGVyLWF1dG9wbGF5JykgfHwgc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kZWxheTtcbiAgICB9XG5cbiAgICBjbGVhclRpbWVvdXQoc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQpO1xuICAgIHN3aXBlci5hdXRvcGxheS50aW1lb3V0ID0gbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkucmV2ZXJzZURpcmVjdGlvbikge1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVQcmV2KHN3aXBlci5wYXJhbXMuc3BlZWQsIHRydWUsIHRydWUpO1xuICAgICAgICAgIHN3aXBlci5lbWl0KCdhdXRvcGxheScpO1xuICAgICAgICB9IGVsc2UgaWYgKCFzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVQcmV2KHN3aXBlci5wYXJhbXMuc3BlZWQsIHRydWUsIHRydWUpO1xuICAgICAgICAgIHN3aXBlci5lbWl0KCdhdXRvcGxheScpO1xuICAgICAgICB9IGVsc2UgaWYgKCFzd2lwZXIucGFyYW1zLmF1dG9wbGF5LnN0b3BPbkxhc3RTbGlkZSkge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSwgc3dpcGVyLnBhcmFtcy5zcGVlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgc3dpcGVyLnNsaWRlTmV4dChzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICB9IGVsc2UgaWYgKCFzd2lwZXIuaXNFbmQpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlTmV4dChzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICB9IGVsc2UgaWYgKCFzd2lwZXIucGFyYW1zLmF1dG9wbGF5LnN0b3BPbkxhc3RTbGlkZSkge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbygwLCBzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuYXV0b3BsYXkuc3RvcCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlICYmIHN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSBzd2lwZXIuYXV0b3BsYXkucnVuKCk7XG4gICAgfSwgZGVsYXkpO1xuICB9LFxuICBzdGFydDogZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiBzd2lwZXIuYXV0b3BsYXkudGltZW91dCAhPT0gJ3VuZGVmaW5lZCcpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHJldHVybiBmYWxzZTtcbiAgICBzd2lwZXIuYXV0b3BsYXkucnVubmluZyA9IHRydWU7XG4gICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5U3RhcnQnKTtcbiAgICBzd2lwZXIuYXV0b3BsYXkucnVuKCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIHN0b3A6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIuYXV0b3BsYXkucnVubmluZykgcmV0dXJuIGZhbHNlO1xuICAgIGlmICh0eXBlb2Ygc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dChzd2lwZXIuYXV0b3BsYXkudGltZW91dCk7XG4gICAgICBzd2lwZXIuYXV0b3BsYXkudGltZW91dCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBzd2lwZXIuYXV0b3BsYXkucnVubmluZyA9IGZhbHNlO1xuICAgIHN3aXBlci5lbWl0KCdhdXRvcGxheVN0b3AnKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgcGF1c2U6IGZ1bmN0aW9uIHBhdXNlKHNwZWVkKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIuYXV0b3BsYXkucnVubmluZykgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIuYXV0b3BsYXkucGF1c2VkKSByZXR1cm47XG4gICAgaWYgKHN3aXBlci5hdXRvcGxheS50aW1lb3V0KSBjbGVhclRpbWVvdXQoc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQpO1xuICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZWQgPSB0cnVlO1xuXG4gICAgaWYgKHNwZWVkID09PSAwIHx8ICFzd2lwZXIucGFyYW1zLmF1dG9wbGF5LndhaXRGb3JUcmFuc2l0aW9uKSB7XG4gICAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2VkID0gZmFsc2U7XG4gICAgICBzd2lwZXIuYXV0b3BsYXkucnVuKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIuYXV0b3BsYXkub25UcmFuc2l0aW9uRW5kKTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBzd2lwZXIuYXV0b3BsYXkub25UcmFuc2l0aW9uRW5kKTtcbiAgICB9XG4gIH0sXG4gIG9uVmlzaWJpbGl0eUNoYW5nZTogZnVuY3Rpb24gb25WaXNpYmlsaXR5Q2hhbmdlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG5cbiAgICBpZiAoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSAnaGlkZGVuJyAmJiBzd2lwZXIuYXV0b3BsYXkucnVubmluZykge1xuICAgICAgc3dpcGVyLmF1dG9wbGF5LnBhdXNlKCk7XG4gICAgfVxuXG4gICAgaWYgKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gJ3Zpc2libGUnICYmIHN3aXBlci5hdXRvcGxheS5wYXVzZWQpIHtcbiAgICAgIHN3aXBlci5hdXRvcGxheS5ydW4oKTtcbiAgICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZWQgPSBmYWxzZTtcbiAgICB9XG4gIH0sXG4gIG9uVHJhbnNpdGlvbkVuZDogZnVuY3Rpb24gb25UcmFuc2l0aW9uRW5kKGUpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuJHdyYXBwZXJFbCkgcmV0dXJuO1xuICAgIGlmIChlLnRhcmdldCAhPT0gc3dpcGVyLiR3cmFwcGVyRWxbMF0pIHJldHVybjtcbiAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLmF1dG9wbGF5Lm9uVHJhbnNpdGlvbkVuZCk7XG4gICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2Via2l0VHJhbnNpdGlvbkVuZCcsIHN3aXBlci5hdXRvcGxheS5vblRyYW5zaXRpb25FbmQpO1xuICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZWQgPSBmYWxzZTtcblxuICAgIGlmICghc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHtcbiAgICAgIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5hdXRvcGxheS5ydW4oKTtcbiAgICB9XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdhdXRvcGxheScsXG4gIHBhcmFtczoge1xuICAgIGF1dG9wbGF5OiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIGRlbGF5OiAzMDAwLFxuICAgICAgd2FpdEZvclRyYW5zaXRpb246IHRydWUsXG4gICAgICBkaXNhYmxlT25JbnRlcmFjdGlvbjogdHJ1ZSxcbiAgICAgIHN0b3BPbkxhc3RTbGlkZTogZmFsc2UsXG4gICAgICByZXZlcnNlRGlyZWN0aW9uOiBmYWxzZVxuICAgIH1cbiAgfSxcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICBhdXRvcGxheTogX2V4dGVuZHMoX2V4dGVuZHMoe30sIEF1dG9wbGF5KSwge30sIHtcbiAgICAgICAgcnVubmluZzogZmFsc2UsXG4gICAgICAgIHBhdXNlZDogZmFsc2VcbiAgICAgIH0pXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdDogZnVuY3Rpb24gaW5pdChzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmVuYWJsZWQpIHtcbiAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnN0YXJ0KCk7XG4gICAgICAgIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBzd2lwZXIuYXV0b3BsYXkub25WaXNpYmlsaXR5Q2hhbmdlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGJlZm9yZVRyYW5zaXRpb25TdGFydDogZnVuY3Rpb24gYmVmb3JlVHJhbnNpdGlvblN0YXJ0KHN3aXBlciwgc3BlZWQsIGludGVybmFsKSB7XG4gICAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHtcbiAgICAgICAgaWYgKGludGVybmFsIHx8ICFzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRpc2FibGVPbkludGVyYWN0aW9uKSB7XG4gICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnBhdXNlKHNwZWVkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkuc3RvcCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBzbGlkZXJGaXJzdE1vdmU6IGZ1bmN0aW9uIHNsaWRlckZpcnN0TW92ZShzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIuYXV0b3BsYXkucnVubmluZykge1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kaXNhYmxlT25JbnRlcmFjdGlvbikge1xuICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnBhdXNlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHRvdWNoRW5kOiBmdW5jdGlvbiB0b3VjaEVuZChzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUgJiYgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCAmJiAhc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kaXNhYmxlT25JbnRlcmFjdGlvbikge1xuICAgICAgICBzd2lwZXIuYXV0b3BsYXkucnVuKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSB7XG4gICAgICAgIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgc3dpcGVyLmF1dG9wbGF5Lm9uVmlzaWJpbGl0eUNoYW5nZSk7XG4gICAgfVxuICB9XG59OyIsImZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbi8qIGVzbGludCBuby1iaXR3aXNlOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dcIjogW1wiPj5cIl0gfV0gKi9cbmltcG9ydCB7IG5leHRUaWNrLCBiaW5kTW9kdWxlTWV0aG9kcyB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbnZhciBDb250cm9sbGVyID0ge1xuICBMaW5lYXJTcGxpbmU6IGZ1bmN0aW9uIExpbmVhclNwbGluZSh4LCB5KSB7XG4gICAgdmFyIGJpbmFyeVNlYXJjaCA9IGZ1bmN0aW9uIHNlYXJjaCgpIHtcbiAgICAgIHZhciBtYXhJbmRleDtcbiAgICAgIHZhciBtaW5JbmRleDtcbiAgICAgIHZhciBndWVzcztcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYXJyYXksIHZhbCkge1xuICAgICAgICBtaW5JbmRleCA9IC0xO1xuICAgICAgICBtYXhJbmRleCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAobWF4SW5kZXggLSBtaW5JbmRleCA+IDEpIHtcbiAgICAgICAgICBndWVzcyA9IG1heEluZGV4ICsgbWluSW5kZXggPj4gMTtcblxuICAgICAgICAgIGlmIChhcnJheVtndWVzc10gPD0gdmFsKSB7XG4gICAgICAgICAgICBtaW5JbmRleCA9IGd1ZXNzO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtYXhJbmRleCA9IGd1ZXNzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtYXhJbmRleDtcbiAgICAgIH07XG4gICAgfSgpO1xuXG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICAgIHRoaXMubGFzdEluZGV4ID0geC5sZW5ndGggLSAxOyAvLyBHaXZlbiBhbiB4IHZhbHVlICh4MiksIHJldHVybiB0aGUgZXhwZWN0ZWQgeTIgdmFsdWU6XG4gICAgLy8gKHgxLHkxKSBpcyB0aGUga25vd24gcG9pbnQgYmVmb3JlIGdpdmVuIHZhbHVlLFxuICAgIC8vICh4Myx5MykgaXMgdGhlIGtub3duIHBvaW50IGFmdGVyIGdpdmVuIHZhbHVlLlxuXG4gICAgdmFyIGkxO1xuICAgIHZhciBpMztcblxuICAgIHRoaXMuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbiBpbnRlcnBvbGF0ZSh4Mikge1xuICAgICAgaWYgKCF4MikgcmV0dXJuIDA7IC8vIEdldCB0aGUgaW5kZXhlcyBvZiB4MSBhbmQgeDMgKHRoZSBhcnJheSBpbmRleGVzIGJlZm9yZSBhbmQgYWZ0ZXIgZ2l2ZW4geDIpOlxuXG4gICAgICBpMyA9IGJpbmFyeVNlYXJjaCh0aGlzLngsIHgyKTtcbiAgICAgIGkxID0gaTMgLSAxOyAvLyBXZSBoYXZlIG91ciBpbmRleGVzIGkxICYgaTMsIHNvIHdlIGNhbiBjYWxjdWxhdGUgYWxyZWFkeTpcbiAgICAgIC8vIHkyIDo9ICgoeDLiiJJ4MSkgw5cgKHkz4oiSeTEpKSDDtyAoeDPiiJJ4MSkgKyB5MVxuXG4gICAgICByZXR1cm4gKHgyIC0gdGhpcy54W2kxXSkgKiAodGhpcy55W2kzXSAtIHRoaXMueVtpMV0pIC8gKHRoaXMueFtpM10gLSB0aGlzLnhbaTFdKSArIHRoaXMueVtpMV07XG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICAvLyB4eHg6IGZvciBub3cgaSB3aWxsIGp1c3Qgc2F2ZSBvbmUgc3BsaW5lIGZ1bmN0aW9uIHRvIHRvXG4gIGdldEludGVycG9sYXRlRnVuY3Rpb246IGZ1bmN0aW9uIGdldEludGVycG9sYXRlRnVuY3Rpb24oYykge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuXG4gICAgaWYgKCFzd2lwZXIuY29udHJvbGxlci5zcGxpbmUpIHtcbiAgICAgIHN3aXBlci5jb250cm9sbGVyLnNwbGluZSA9IHN3aXBlci5wYXJhbXMubG9vcCA/IG5ldyBDb250cm9sbGVyLkxpbmVhclNwbGluZShzd2lwZXIuc2xpZGVzR3JpZCwgYy5zbGlkZXNHcmlkKSA6IG5ldyBDb250cm9sbGVyLkxpbmVhclNwbGluZShzd2lwZXIuc25hcEdyaWQsIGMuc25hcEdyaWQpO1xuICAgIH1cbiAgfSxcbiAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoX3NldFRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIGNvbnRyb2xsZWQgPSBzd2lwZXIuY29udHJvbGxlci5jb250cm9sO1xuICAgIHZhciBtdWx0aXBsaWVyO1xuICAgIHZhciBjb250cm9sbGVkVHJhbnNsYXRlO1xuICAgIHZhciBTd2lwZXIgPSBzd2lwZXIuY29uc3RydWN0b3I7XG5cbiAgICBmdW5jdGlvbiBzZXRDb250cm9sbGVkVHJhbnNsYXRlKGMpIHtcbiAgICAgIC8vIHRoaXMgd2lsbCBjcmVhdGUgYW4gSW50ZXJwb2xhdGUgZnVuY3Rpb24gYmFzZWQgb24gdGhlIHNuYXBHcmlkc1xuICAgICAgLy8geCBpcyB0aGUgR3JpZCBvZiB0aGUgc2Nyb2xsZWQgc2Nyb2xsZXIgYW5kIHkgd2lsbCBiZSB0aGUgY29udHJvbGxlZCBzY3JvbGxlclxuICAgICAgLy8gaXQgbWFrZXMgc2Vuc2UgdG8gY3JlYXRlIHRoaXMgb25seSBvbmNlIGFuZCByZWNhbGwgaXQgZm9yIHRoZSBpbnRlcnBvbGF0aW9uXG4gICAgICAvLyB0aGUgZnVuY3Rpb24gZG9lcyBhIGxvdCBvZiB2YWx1ZSBjYWNoaW5nIGZvciBwZXJmb3JtYW5jZVxuICAgICAgdmFyIHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyAtc3dpcGVyLnRyYW5zbGF0ZSA6IHN3aXBlci50cmFuc2xhdGU7XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuYnkgPT09ICdzbGlkZScpIHtcbiAgICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuZ2V0SW50ZXJwb2xhdGVGdW5jdGlvbihjKTsgLy8gaSBhbSBub3Qgc3VyZSB3aHkgdGhlIHZhbHVlcyBoYXZlIHRvIGJlIG11bHRpcGxpY2F0ZWQgdGhpcyB3YXksIHRyaWVkIHRvIGludmVydCB0aGUgc25hcEdyaWRcbiAgICAgICAgLy8gYnV0IGl0IGRpZCBub3Qgd29yayBvdXRcblxuICAgICAgICBjb250cm9sbGVkVHJhbnNsYXRlID0gLXN3aXBlci5jb250cm9sbGVyLnNwbGluZS5pbnRlcnBvbGF0ZSgtdHJhbnNsYXRlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFjb250cm9sbGVkVHJhbnNsYXRlIHx8IHN3aXBlci5wYXJhbXMuY29udHJvbGxlci5ieSA9PT0gJ2NvbnRhaW5lcicpIHtcbiAgICAgICAgbXVsdGlwbGllciA9IChjLm1heFRyYW5zbGF0ZSgpIC0gYy5taW5UcmFuc2xhdGUoKSkgLyAoc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKTtcbiAgICAgICAgY29udHJvbGxlZFRyYW5zbGF0ZSA9ICh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpICogbXVsdGlwbGllciArIGMubWluVHJhbnNsYXRlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuaW52ZXJzZSkge1xuICAgICAgICBjb250cm9sbGVkVHJhbnNsYXRlID0gYy5tYXhUcmFuc2xhdGUoKSAtIGNvbnRyb2xsZWRUcmFuc2xhdGU7XG4gICAgICB9XG5cbiAgICAgIGMudXBkYXRlUHJvZ3Jlc3MoY29udHJvbGxlZFRyYW5zbGF0ZSk7XG4gICAgICBjLnNldFRyYW5zbGF0ZShjb250cm9sbGVkVHJhbnNsYXRlLCBzd2lwZXIpO1xuICAgICAgYy51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgYy51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY29udHJvbGxlZCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29udHJvbGxlZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoY29udHJvbGxlZFtpXSAhPT0gYnlDb250cm9sbGVyICYmIGNvbnRyb2xsZWRbaV0gaW5zdGFuY2VvZiBTd2lwZXIpIHtcbiAgICAgICAgICBzZXRDb250cm9sbGVkVHJhbnNsYXRlKGNvbnRyb2xsZWRbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjb250cm9sbGVkIGluc3RhbmNlb2YgU3dpcGVyICYmIGJ5Q29udHJvbGxlciAhPT0gY29udHJvbGxlZCkge1xuICAgICAgc2V0Q29udHJvbGxlZFRyYW5zbGF0ZShjb250cm9sbGVkKTtcbiAgICB9XG4gIH0sXG4gIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24sIGJ5Q29udHJvbGxlcikge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBTd2lwZXIgPSBzd2lwZXIuY29uc3RydWN0b3I7XG4gICAgdmFyIGNvbnRyb2xsZWQgPSBzd2lwZXIuY29udHJvbGxlci5jb250cm9sO1xuICAgIHZhciBpO1xuXG4gICAgZnVuY3Rpb24gc2V0Q29udHJvbGxlZFRyYW5zaXRpb24oYykge1xuICAgICAgYy5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uLCBzd2lwZXIpO1xuXG4gICAgICBpZiAoZHVyYXRpb24gIT09IDApIHtcbiAgICAgICAgYy50cmFuc2l0aW9uU3RhcnQoKTtcblxuICAgICAgICBpZiAoYy5wYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgICAgIG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGMudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgYy4kd3JhcHBlckVsLnRyYW5zaXRpb25FbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICghY29udHJvbGxlZCkgcmV0dXJuO1xuXG4gICAgICAgICAgaWYgKGMucGFyYW1zLmxvb3AgJiYgc3dpcGVyLnBhcmFtcy5jb250cm9sbGVyLmJ5ID09PSAnc2xpZGUnKSB7XG4gICAgICAgICAgICBjLmxvb3BGaXgoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjLnRyYW5zaXRpb25FbmQoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY29udHJvbGxlZCkpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjb250cm9sbGVkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChjb250cm9sbGVkW2ldICE9PSBieUNvbnRyb2xsZXIgJiYgY29udHJvbGxlZFtpXSBpbnN0YW5jZW9mIFN3aXBlcikge1xuICAgICAgICAgIHNldENvbnRyb2xsZWRUcmFuc2l0aW9uKGNvbnRyb2xsZWRbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjb250cm9sbGVkIGluc3RhbmNlb2YgU3dpcGVyICYmIGJ5Q29udHJvbGxlciAhPT0gY29udHJvbGxlZCkge1xuICAgICAgc2V0Q29udHJvbGxlZFRyYW5zaXRpb24oY29udHJvbGxlZCk7XG4gICAgfVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnY29udHJvbGxlcicsXG4gIHBhcmFtczoge1xuICAgIGNvbnRyb2xsZXI6IHtcbiAgICAgIGNvbnRyb2w6IHVuZGVmaW5lZCxcbiAgICAgIGludmVyc2U6IGZhbHNlLFxuICAgICAgYnk6ICdzbGlkZScgLy8gb3IgJ2NvbnRhaW5lcidcblxuICAgIH1cbiAgfSxcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICBjb250cm9sbGVyOiBfZXh0ZW5kcyh7XG4gICAgICAgIGNvbnRyb2w6IHN3aXBlci5wYXJhbXMuY29udHJvbGxlci5jb250cm9sXG4gICAgICB9LCBDb250cm9sbGVyKVxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKHN3aXBlcikge1xuICAgICAgaWYgKCFzd2lwZXIuY29udHJvbGxlci5jb250cm9sKSByZXR1cm47XG5cbiAgICAgIGlmIChzd2lwZXIuY29udHJvbGxlci5zcGxpbmUpIHtcbiAgICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lID0gdW5kZWZpbmVkO1xuICAgICAgICBkZWxldGUgc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVzaXplOiBmdW5jdGlvbiByZXNpemUoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHJldHVybjtcblxuICAgICAgaWYgKHN3aXBlci5jb250cm9sbGVyLnNwbGluZSkge1xuICAgICAgICBzd2lwZXIuY29udHJvbGxlci5zcGxpbmUgPSB1bmRlZmluZWQ7XG4gICAgICAgIGRlbGV0ZSBzd2lwZXIuY29udHJvbGxlci5zcGxpbmU7XG4gICAgICB9XG4gICAgfSxcbiAgICBvYnNlcnZlclVwZGF0ZTogZnVuY3Rpb24gb2JzZXJ2ZXJVcGRhdGUoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHJldHVybjtcblxuICAgICAgaWYgKHN3aXBlci5jb250cm9sbGVyLnNwbGluZSkge1xuICAgICAgICBzd2lwZXIuY29udHJvbGxlci5zcGxpbmUgPSB1bmRlZmluZWQ7XG4gICAgICAgIGRlbGV0ZSBzd2lwZXIuY29udHJvbGxlci5zcGxpbmU7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZShzd2lwZXIsIHRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHJldHVybjtcbiAgICAgIHN3aXBlci5jb250cm9sbGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUsIGJ5Q29udHJvbGxlcik7XG4gICAgfSxcbiAgICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKHN3aXBlciwgZHVyYXRpb24sIGJ5Q29udHJvbGxlcikge1xuICAgICAgaWYgKCFzd2lwZXIuY29udHJvbGxlci5jb250cm9sKSByZXR1cm47XG4gICAgICBzd2lwZXIuY29udHJvbGxlci5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpO1xuICAgIH1cbiAgfVxufTsiLCJpbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzKSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTsgLy8gR2V0IGJyZWFrcG9pbnQgZm9yIHdpbmRvdyB3aWR0aFxuXG4gIGlmICghYnJlYWtwb2ludHMpIHJldHVybiB1bmRlZmluZWQ7XG4gIHZhciBicmVha3BvaW50ID0gZmFsc2U7XG4gIHZhciBwb2ludHMgPSBPYmplY3Qua2V5cyhicmVha3BvaW50cykubWFwKGZ1bmN0aW9uIChwb2ludCkge1xuICAgIGlmICh0eXBlb2YgcG9pbnQgPT09ICdzdHJpbmcnICYmIHBvaW50LmluZGV4T2YoJ0AnKSA9PT0gMCkge1xuICAgICAgdmFyIG1pblJhdGlvID0gcGFyc2VGbG9hdChwb2ludC5zdWJzdHIoMSkpO1xuICAgICAgdmFyIHZhbHVlID0gd2luZG93LmlubmVySGVpZ2h0ICogbWluUmF0aW87XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIHBvaW50OiBwb2ludFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHBvaW50LFxuICAgICAgcG9pbnQ6IHBvaW50XG4gICAgfTtcbiAgfSk7XG4gIHBvaW50cy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KGEudmFsdWUsIDEwKSAtIHBhcnNlSW50KGIudmFsdWUsIDEwKTtcbiAgfSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgX3BvaW50cyRpID0gcG9pbnRzW2ldLFxuICAgICAgICBwb2ludCA9IF9wb2ludHMkaS5wb2ludCxcbiAgICAgICAgdmFsdWUgPSBfcG9pbnRzJGkudmFsdWU7XG5cbiAgICBpZiAodmFsdWUgPD0gd2luZG93LmlubmVyV2lkdGgpIHtcbiAgICAgIGJyZWFrcG9pbnQgPSBwb2ludDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnJlYWtwb2ludCB8fCAnbWF4Jztcbn0iLCJpbXBvcnQgc2V0QnJlYWtwb2ludCBmcm9tICcuL3NldEJyZWFrcG9pbnQnO1xuaW1wb3J0IGdldEJyZWFrcG9pbnQgZnJvbSAnLi9nZXRCcmVha3BvaW50JztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgc2V0QnJlYWtwb2ludDogc2V0QnJlYWtwb2ludCxcbiAgZ2V0QnJlYWtwb2ludDogZ2V0QnJlYWtwb2ludFxufTsiLCJpbXBvcnQgeyBleHRlbmQgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRCcmVha3BvaW50KCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4LFxuICAgICAgaW5pdGlhbGl6ZWQgPSBzd2lwZXIuaW5pdGlhbGl6ZWQsXG4gICAgICBfc3dpcGVyJGxvb3BlZFNsaWRlcyA9IHN3aXBlci5sb29wZWRTbGlkZXMsXG4gICAgICBsb29wZWRTbGlkZXMgPSBfc3dpcGVyJGxvb3BlZFNsaWRlcyA9PT0gdm9pZCAwID8gMCA6IF9zd2lwZXIkbG9vcGVkU2xpZGVzLFxuICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgICRlbCA9IHN3aXBlci4kZWw7XG4gIHZhciBicmVha3BvaW50cyA9IHBhcmFtcy5icmVha3BvaW50cztcbiAgaWYgKCFicmVha3BvaW50cyB8fCBicmVha3BvaW50cyAmJiBPYmplY3Qua2V5cyhicmVha3BvaW50cykubGVuZ3RoID09PSAwKSByZXR1cm47IC8vIEdldCBicmVha3BvaW50IGZvciB3aW5kb3cgd2lkdGggYW5kIHVwZGF0ZSBwYXJhbWV0ZXJzXG5cbiAgdmFyIGJyZWFrcG9pbnQgPSBzd2lwZXIuZ2V0QnJlYWtwb2ludChicmVha3BvaW50cyk7XG5cbiAgaWYgKGJyZWFrcG9pbnQgJiYgc3dpcGVyLmN1cnJlbnRCcmVha3BvaW50ICE9PSBicmVha3BvaW50KSB7XG4gICAgdmFyIGJyZWFrcG9pbnRPbmx5UGFyYW1zID0gYnJlYWtwb2ludCBpbiBicmVha3BvaW50cyA/IGJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKGJyZWFrcG9pbnRPbmx5UGFyYW1zKSB7XG4gICAgICBbJ3NsaWRlc1BlclZpZXcnLCAnc3BhY2VCZXR3ZWVuJywgJ3NsaWRlc1Blckdyb3VwJywgJ3NsaWRlc1Blckdyb3VwU2tpcCcsICdzbGlkZXNQZXJDb2x1bW4nXS5mb3JFYWNoKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICB2YXIgcGFyYW1WYWx1ZSA9IGJyZWFrcG9pbnRPbmx5UGFyYW1zW3BhcmFtXTtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbVZhbHVlID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xuXG4gICAgICAgIGlmIChwYXJhbSA9PT0gJ3NsaWRlc1BlclZpZXcnICYmIChwYXJhbVZhbHVlID09PSAnQVVUTycgfHwgcGFyYW1WYWx1ZSA9PT0gJ2F1dG8nKSkge1xuICAgICAgICAgIGJyZWFrcG9pbnRPbmx5UGFyYW1zW3BhcmFtXSA9ICdhdXRvJztcbiAgICAgICAgfSBlbHNlIGlmIChwYXJhbSA9PT0gJ3NsaWRlc1BlclZpZXcnKSB7XG4gICAgICAgICAgYnJlYWtwb2ludE9ubHlQYXJhbXNbcGFyYW1dID0gcGFyc2VGbG9hdChwYXJhbVZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBicmVha3BvaW50T25seVBhcmFtc1twYXJhbV0gPSBwYXJzZUludChwYXJhbVZhbHVlLCAxMCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBicmVha3BvaW50UGFyYW1zID0gYnJlYWtwb2ludE9ubHlQYXJhbXMgfHwgc3dpcGVyLm9yaWdpbmFsUGFyYW1zO1xuICAgIHZhciB3YXNNdWx0aVJvdyA9IHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxO1xuICAgIHZhciBpc011bHRpUm93ID0gYnJlYWtwb2ludFBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxO1xuXG4gICAgaWYgKHdhc011bHRpUm93ICYmICFpc011bHRpUm93KSB7XG4gICAgICAkZWwucmVtb3ZlQ2xhc3MocGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBcIm11bHRpcm93IFwiICsgcGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBcIm11bHRpcm93LWNvbHVtblwiKTtcbiAgICAgIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xuICAgIH0gZWxzZSBpZiAoIXdhc011bHRpUm93ICYmIGlzTXVsdGlSb3cpIHtcbiAgICAgICRlbC5hZGRDbGFzcyhwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIFwibXVsdGlyb3dcIik7XG5cbiAgICAgIGlmIChicmVha3BvaW50UGFyYW1zLnNsaWRlc1BlckNvbHVtbkZpbGwgPT09ICdjb2x1bW4nKSB7XG4gICAgICAgICRlbC5hZGRDbGFzcyhwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIFwibXVsdGlyb3ctY29sdW1uXCIpO1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbiAgICB9XG5cbiAgICB2YXIgZGlyZWN0aW9uQ2hhbmdlZCA9IGJyZWFrcG9pbnRQYXJhbXMuZGlyZWN0aW9uICYmIGJyZWFrcG9pbnRQYXJhbXMuZGlyZWN0aW9uICE9PSBwYXJhbXMuZGlyZWN0aW9uO1xuICAgIHZhciBuZWVkc1JlTG9vcCA9IHBhcmFtcy5sb29wICYmIChicmVha3BvaW50UGFyYW1zLnNsaWRlc1BlclZpZXcgIT09IHBhcmFtcy5zbGlkZXNQZXJWaWV3IHx8IGRpcmVjdGlvbkNoYW5nZWQpO1xuXG4gICAgaWYgKGRpcmVjdGlvbkNoYW5nZWQgJiYgaW5pdGlhbGl6ZWQpIHtcbiAgICAgIHN3aXBlci5jaGFuZ2VEaXJlY3Rpb24oKTtcbiAgICB9XG5cbiAgICBleHRlbmQoc3dpcGVyLnBhcmFtcywgYnJlYWtwb2ludFBhcmFtcyk7XG4gICAgZXh0ZW5kKHN3aXBlciwge1xuICAgICAgYWxsb3dUb3VjaE1vdmU6IHN3aXBlci5wYXJhbXMuYWxsb3dUb3VjaE1vdmUsXG4gICAgICBhbGxvd1NsaWRlTmV4dDogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCxcbiAgICAgIGFsbG93U2xpZGVQcmV2OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVQcmV2XG4gICAgfSk7XG4gICAgc3dpcGVyLmN1cnJlbnRCcmVha3BvaW50ID0gYnJlYWtwb2ludDtcblxuICAgIGlmIChuZWVkc1JlTG9vcCAmJiBpbml0aWFsaXplZCkge1xuICAgICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gICAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgICAgc3dpcGVyLnNsaWRlVG8oYWN0aXZlSW5kZXggLSBsb29wZWRTbGlkZXMgKyBzd2lwZXIubG9vcGVkU2xpZGVzLCAwLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgc3dpcGVyLmVtaXQoJ2JyZWFrcG9pbnQnLCBicmVha3BvaW50UGFyYW1zKTtcbiAgfVxufSIsImZ1bmN0aW9uIGNoZWNrT3ZlcmZsb3coKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgdmFyIHdhc0xvY2tlZCA9IHN3aXBlci5pc0xvY2tlZDtcbiAgdmFyIGxhc3RTbGlkZVBvc2l0aW9uID0gc3dpcGVyLnNsaWRlcy5sZW5ndGggPiAwICYmIHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVuICogKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSkgKyBzd2lwZXIuc2xpZGVzWzBdLm9mZnNldFdpZHRoICogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG5cbiAgaWYgKHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmUgJiYgcGFyYW1zLnNsaWRlc09mZnNldEFmdGVyICYmIGxhc3RTbGlkZVBvc2l0aW9uKSB7XG4gICAgc3dpcGVyLmlzTG9ja2VkID0gbGFzdFNsaWRlUG9zaXRpb24gPD0gc3dpcGVyLnNpemU7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLmlzTG9ja2VkID0gc3dpcGVyLnNuYXBHcmlkLmxlbmd0aCA9PT0gMTtcbiAgfVxuXG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9ICFzd2lwZXIuaXNMb2NrZWQ7XG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9ICFzd2lwZXIuaXNMb2NrZWQ7IC8vIGV2ZW50c1xuXG4gIGlmICh3YXNMb2NrZWQgIT09IHN3aXBlci5pc0xvY2tlZCkgc3dpcGVyLmVtaXQoc3dpcGVyLmlzTG9ja2VkID8gJ2xvY2snIDogJ3VubG9jaycpO1xuXG4gIGlmICh3YXNMb2NrZWQgJiYgd2FzTG9ja2VkICE9PSBzd2lwZXIuaXNMb2NrZWQpIHtcbiAgICBzd2lwZXIuaXNFbmQgPSBmYWxzZTtcbiAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24pIHN3aXBlci5uYXZpZ2F0aW9uLnVwZGF0ZSgpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY2hlY2tPdmVyZmxvdzogY2hlY2tPdmVyZmxvd1xufTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRDbGFzc2VzKCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIGNsYXNzTmFtZXMgPSBzd2lwZXIuY2xhc3NOYW1lcyxcbiAgICAgIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICBydGwgPSBzd2lwZXIucnRsLFxuICAgICAgJGVsID0gc3dpcGVyLiRlbCxcbiAgICAgIGRldmljZSA9IHN3aXBlci5kZXZpY2U7XG4gIHZhciBzdWZmaXhlcyA9IFtdO1xuICBzdWZmaXhlcy5wdXNoKCdpbml0aWFsaXplZCcpO1xuICBzdWZmaXhlcy5wdXNoKHBhcmFtcy5kaXJlY3Rpb24pO1xuXG4gIGlmIChwYXJhbXMuZnJlZU1vZGUpIHtcbiAgICBzdWZmaXhlcy5wdXNoKCdmcmVlLW1vZGUnKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgIHN1ZmZpeGVzLnB1c2goJ2F1dG9oZWlnaHQnKTtcbiAgfVxuXG4gIGlmIChydGwpIHtcbiAgICBzdWZmaXhlcy5wdXNoKCdydGwnKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuc2xpZGVzUGVyQ29sdW1uID4gMSkge1xuICAgIHN1ZmZpeGVzLnB1c2goJ211bHRpcm93Jyk7XG5cbiAgICBpZiAocGFyYW1zLnNsaWRlc1BlckNvbHVtbkZpbGwgPT09ICdjb2x1bW4nKSB7XG4gICAgICBzdWZmaXhlcy5wdXNoKCdtdWx0aXJvdy1jb2x1bW4nKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZGV2aWNlLmFuZHJvaWQpIHtcbiAgICBzdWZmaXhlcy5wdXNoKCdhbmRyb2lkJyk7XG4gIH1cblxuICBpZiAoZGV2aWNlLmlvcykge1xuICAgIHN1ZmZpeGVzLnB1c2goJ2lvcycpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgc3VmZml4ZXMucHVzaCgnY3NzLW1vZGUnKTtcbiAgfVxuXG4gIHN1ZmZpeGVzLmZvckVhY2goZnVuY3Rpb24gKHN1ZmZpeCkge1xuICAgIGNsYXNzTmFtZXMucHVzaChwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIHN1ZmZpeCk7XG4gIH0pO1xuICAkZWwuYWRkQ2xhc3MoY2xhc3NOYW1lcy5qb2luKCcgJykpO1xuICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbn0iLCJpbXBvcnQgYWRkQ2xhc3NlcyBmcm9tICcuL2FkZENsYXNzZXMnO1xuaW1wb3J0IHJlbW92ZUNsYXNzZXMgZnJvbSAnLi9yZW1vdmVDbGFzc2VzJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgYWRkQ2xhc3NlczogYWRkQ2xhc3NlcyxcbiAgcmVtb3ZlQ2xhc3NlczogcmVtb3ZlQ2xhc3Nlc1xufTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW1vdmVDbGFzc2VzKCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyICRlbCA9IHN3aXBlci4kZWwsXG4gICAgICBjbGFzc05hbWVzID0gc3dpcGVyLmNsYXNzTmFtZXM7XG4gICRlbC5yZW1vdmVDbGFzcyhjbGFzc05hbWVzLmpvaW4oJyAnKSk7XG4gIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xufSIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuLyogZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOiBcIm9mZlwiICovXG5pbXBvcnQgJCBmcm9tICcuLi8uLi91dGlscy9kb20nO1xuaW1wb3J0IHsgZXh0ZW5kLCBub3csIGRlbGV0ZVByb3BzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IHsgZ2V0U3VwcG9ydCB9IGZyb20gJy4uLy4uL3V0aWxzL2dldC1zdXBwb3J0JztcbmltcG9ydCB7IGdldERldmljZSB9IGZyb20gJy4uLy4uL3V0aWxzL2dldC1kZXZpY2UnO1xuaW1wb3J0IHsgZ2V0QnJvd3NlciB9IGZyb20gJy4uLy4uL3V0aWxzL2dldC1icm93c2VyJztcbmltcG9ydCBSZXNpemUgZnJvbSAnLi4vLi4vbW9kdWxlcy9yZXNpemUvcmVzaXplJztcbmltcG9ydCBPYnNlcnZlciBmcm9tICcuLi8uLi9tb2R1bGVzL29ic2VydmVyL29ic2VydmVyJztcbmltcG9ydCBtb2R1bGFyIGZyb20gJy4vbW9kdWxhcic7XG5pbXBvcnQgZXZlbnRzRW1pdHRlciBmcm9tICcuL2V2ZW50cy1lbWl0dGVyJztcbmltcG9ydCB1cGRhdGUgZnJvbSAnLi91cGRhdGUvaW5kZXgnO1xuaW1wb3J0IHRyYW5zbGF0ZSBmcm9tICcuL3RyYW5zbGF0ZS9pbmRleCc7XG5pbXBvcnQgdHJhbnNpdGlvbiBmcm9tICcuL3RyYW5zaXRpb24vaW5kZXgnO1xuaW1wb3J0IHNsaWRlIGZyb20gJy4vc2xpZGUvaW5kZXgnO1xuaW1wb3J0IGxvb3AgZnJvbSAnLi9sb29wL2luZGV4JztcbmltcG9ydCBncmFiQ3Vyc29yIGZyb20gJy4vZ3JhYi1jdXJzb3IvaW5kZXgnO1xuaW1wb3J0IG1hbmlwdWxhdGlvbiBmcm9tICcuL21hbmlwdWxhdGlvbi9pbmRleCc7XG5pbXBvcnQgZXZlbnRzIGZyb20gJy4vZXZlbnRzL2luZGV4JztcbmltcG9ydCBicmVha3BvaW50cyBmcm9tICcuL2JyZWFrcG9pbnRzL2luZGV4JztcbmltcG9ydCBjbGFzc2VzIGZyb20gJy4vY2xhc3Nlcy9pbmRleCc7XG5pbXBvcnQgaW1hZ2VzIGZyb20gJy4vaW1hZ2VzL2luZGV4JztcbmltcG9ydCBjaGVja092ZXJmbG93IGZyb20gJy4vY2hlY2stb3ZlcmZsb3cvaW5kZXgnO1xuaW1wb3J0IGRlZmF1bHRzIGZyb20gJy4vZGVmYXVsdHMnO1xudmFyIHByb3RvdHlwZXMgPSB7XG4gIG1vZHVsYXI6IG1vZHVsYXIsXG4gIGV2ZW50c0VtaXR0ZXI6IGV2ZW50c0VtaXR0ZXIsXG4gIHVwZGF0ZTogdXBkYXRlLFxuICB0cmFuc2xhdGU6IHRyYW5zbGF0ZSxcbiAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbixcbiAgc2xpZGU6IHNsaWRlLFxuICBsb29wOiBsb29wLFxuICBncmFiQ3Vyc29yOiBncmFiQ3Vyc29yLFxuICBtYW5pcHVsYXRpb246IG1hbmlwdWxhdGlvbixcbiAgZXZlbnRzOiBldmVudHMsXG4gIGJyZWFrcG9pbnRzOiBicmVha3BvaW50cyxcbiAgY2hlY2tPdmVyZmxvdzogY2hlY2tPdmVyZmxvdyxcbiAgY2xhc3NlczogY2xhc3NlcyxcbiAgaW1hZ2VzOiBpbWFnZXNcbn07XG52YXIgZXh0ZW5kZWREZWZhdWx0cyA9IHt9O1xuXG52YXIgU3dpcGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3dpcGVyKCkge1xuICAgIHZhciBlbDtcbiAgICB2YXIgcGFyYW1zO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSAmJiBhcmdzWzBdLmNvbnN0cnVjdG9yICYmIGFyZ3NbMF0uY29uc3RydWN0b3IgPT09IE9iamVjdCkge1xuICAgICAgcGFyYW1zID0gYXJnc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwgPSBhcmdzWzBdO1xuICAgICAgcGFyYW1zID0gYXJnc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoIXBhcmFtcykgcGFyYW1zID0ge307XG4gICAgcGFyYW1zID0gZXh0ZW5kKHt9LCBwYXJhbXMpO1xuICAgIGlmIChlbCAmJiAhcGFyYW1zLmVsKSBwYXJhbXMuZWwgPSBlbDsgLy8gU3dpcGVyIEluc3RhbmNlXG5cbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBzd2lwZXIuc3VwcG9ydCA9IGdldFN1cHBvcnQoKTtcbiAgICBzd2lwZXIuZGV2aWNlID0gZ2V0RGV2aWNlKHtcbiAgICAgIHVzZXJBZ2VudDogcGFyYW1zLnVzZXJBZ2VudFxuICAgIH0pO1xuICAgIHN3aXBlci5icm93c2VyID0gZ2V0QnJvd3NlcigpO1xuICAgIHN3aXBlci5ldmVudHNMaXN0ZW5lcnMgPSB7fTtcbiAgICBzd2lwZXIuZXZlbnRzQW55TGlzdGVuZXJzID0gW107XG4gICAgT2JqZWN0LmtleXMocHJvdG90eXBlcykuZm9yRWFjaChmdW5jdGlvbiAocHJvdG90eXBlR3JvdXApIHtcbiAgICAgIE9iamVjdC5rZXlzKHByb3RvdHlwZXNbcHJvdG90eXBlR3JvdXBdKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm90b01ldGhvZCkge1xuICAgICAgICBpZiAoIVN3aXBlci5wcm90b3R5cGVbcHJvdG9NZXRob2RdKSB7XG4gICAgICAgICAgU3dpcGVyLnByb3RvdHlwZVtwcm90b01ldGhvZF0gPSBwcm90b3R5cGVzW3Byb3RvdHlwZUdyb3VwXVtwcm90b01ldGhvZF07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaWYgKHR5cGVvZiBzd2lwZXIubW9kdWxlcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHN3aXBlci5tb2R1bGVzID0ge307XG4gICAgfVxuXG4gICAgT2JqZWN0LmtleXMoc3dpcGVyLm1vZHVsZXMpLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZU5hbWUpIHtcbiAgICAgIHZhciBtb2R1bGUgPSBzd2lwZXIubW9kdWxlc1ttb2R1bGVOYW1lXTtcblxuICAgICAgaWYgKG1vZHVsZS5wYXJhbXMpIHtcbiAgICAgICAgdmFyIG1vZHVsZVBhcmFtTmFtZSA9IE9iamVjdC5rZXlzKG1vZHVsZS5wYXJhbXMpWzBdO1xuICAgICAgICB2YXIgbW9kdWxlUGFyYW1zID0gbW9kdWxlLnBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdO1xuICAgICAgICBpZiAodHlwZW9mIG1vZHVsZVBhcmFtcyAhPT0gJ29iamVjdCcgfHwgbW9kdWxlUGFyYW1zID09PSBudWxsKSByZXR1cm47XG4gICAgICAgIGlmICghKG1vZHVsZVBhcmFtTmFtZSBpbiBwYXJhbXMgJiYgJ2VuYWJsZWQnIGluIG1vZHVsZVBhcmFtcykpIHJldHVybjtcblxuICAgICAgICBpZiAocGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPT09IHRydWUpIHtcbiAgICAgICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9PT0gJ29iamVjdCcgJiYgISgnZW5hYmxlZCcgaW4gcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0pKSB7XG4gICAgICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uZW5hYmxlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdKSBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9IHtcbiAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0pOyAvLyBFeHRlbmQgZGVmYXVsdHMgd2l0aCBtb2R1bGVzIHBhcmFtc1xuXG4gICAgdmFyIHN3aXBlclBhcmFtcyA9IGV4dGVuZCh7fSwgZGVmYXVsdHMpO1xuICAgIHN3aXBlci51c2VQYXJhbXMoc3dpcGVyUGFyYW1zKTsgLy8gRXh0ZW5kIGRlZmF1bHRzIHdpdGggcGFzc2VkIHBhcmFtc1xuXG4gICAgc3dpcGVyLnBhcmFtcyA9IGV4dGVuZCh7fSwgc3dpcGVyUGFyYW1zLCBleHRlbmRlZERlZmF1bHRzLCBwYXJhbXMpO1xuICAgIHN3aXBlci5vcmlnaW5hbFBhcmFtcyA9IGV4dGVuZCh7fSwgc3dpcGVyLnBhcmFtcyk7XG4gICAgc3dpcGVyLnBhc3NlZFBhcmFtcyA9IGV4dGVuZCh7fSwgcGFyYW1zKTsgLy8gYWRkIGV2ZW50IGxpc3RlbmVyc1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMgJiYgc3dpcGVyLnBhcmFtcy5vbikge1xuICAgICAgT2JqZWN0LmtleXMoc3dpcGVyLnBhcmFtcy5vbikuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICAgIHN3aXBlci5vbihldmVudE5hbWUsIHN3aXBlci5wYXJhbXMub25bZXZlbnROYW1lXSk7XG4gICAgICB9KTtcbiAgICB9IC8vIFNhdmUgRG9tIGxpYlxuXG5cbiAgICBzd2lwZXIuJCA9ICQ7IC8vIEZpbmQgZWxcblxuICAgIHZhciAkZWwgPSAkKHN3aXBlci5wYXJhbXMuZWwpO1xuICAgIGVsID0gJGVsWzBdO1xuXG4gICAgaWYgKCFlbCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAoJGVsLmxlbmd0aCA+IDEpIHtcbiAgICAgIHZhciBzd2lwZXJzID0gW107XG4gICAgICAkZWwuZWFjaChmdW5jdGlvbiAoY29udGFpbmVyRWwpIHtcbiAgICAgICAgdmFyIG5ld1BhcmFtcyA9IGV4dGVuZCh7fSwgcGFyYW1zLCB7XG4gICAgICAgICAgZWw6IGNvbnRhaW5lckVsXG4gICAgICAgIH0pO1xuICAgICAgICBzd2lwZXJzLnB1c2gobmV3IFN3aXBlcihuZXdQYXJhbXMpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHN3aXBlcnM7XG4gICAgfVxuXG4gICAgZWwuc3dpcGVyID0gc3dpcGVyOyAvLyBGaW5kIFdyYXBwZXJcblxuICAgIHZhciAkd3JhcHBlckVsO1xuXG4gICAgaWYgKGVsICYmIGVsLnNoYWRvd1Jvb3QgJiYgZWwuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKSB7XG4gICAgICAkd3JhcHBlckVsID0gJChlbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoXCIuXCIgKyBzd2lwZXIucGFyYW1zLndyYXBwZXJDbGFzcykpOyAvLyBDaGlsZHJlbiBuZWVkcyB0byByZXR1cm4gc2xvdCBpdGVtc1xuXG4gICAgICAkd3JhcHBlckVsLmNoaWxkcmVuID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuICRlbC5jaGlsZHJlbihvcHRpb25zKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICR3cmFwcGVyRWwgPSAkZWwuY2hpbGRyZW4oXCIuXCIgKyBzd2lwZXIucGFyYW1zLndyYXBwZXJDbGFzcyk7XG4gICAgfSAvLyBFeHRlbmQgU3dpcGVyXG5cblxuICAgIGV4dGVuZChzd2lwZXIsIHtcbiAgICAgICRlbDogJGVsLFxuICAgICAgZWw6IGVsLFxuICAgICAgJHdyYXBwZXJFbDogJHdyYXBwZXJFbCxcbiAgICAgIHdyYXBwZXJFbDogJHdyYXBwZXJFbFswXSxcbiAgICAgIC8vIENsYXNzZXNcbiAgICAgIGNsYXNzTmFtZXM6IFtdLFxuICAgICAgLy8gU2xpZGVzXG4gICAgICBzbGlkZXM6ICQoKSxcbiAgICAgIHNsaWRlc0dyaWQ6IFtdLFxuICAgICAgc25hcEdyaWQ6IFtdLFxuICAgICAgc2xpZGVzU2l6ZXNHcmlkOiBbXSxcbiAgICAgIC8vIGlzRGlyZWN0aW9uXG4gICAgICBpc0hvcml6b250YWw6IGZ1bmN0aW9uIGlzSG9yaXpvbnRhbCgpIHtcbiAgICAgICAgcmV0dXJuIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCc7XG4gICAgICB9LFxuICAgICAgaXNWZXJ0aWNhbDogZnVuY3Rpb24gaXNWZXJ0aWNhbCgpIHtcbiAgICAgICAgcmV0dXJuIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAndmVydGljYWwnO1xuICAgICAgfSxcbiAgICAgIC8vIFJUTFxuICAgICAgcnRsOiBlbC5kaXIudG9Mb3dlckNhc2UoKSA9PT0gJ3J0bCcgfHwgJGVsLmNzcygnZGlyZWN0aW9uJykgPT09ICdydGwnLFxuICAgICAgcnRsVHJhbnNsYXRlOiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnICYmIChlbC5kaXIudG9Mb3dlckNhc2UoKSA9PT0gJ3J0bCcgfHwgJGVsLmNzcygnZGlyZWN0aW9uJykgPT09ICdydGwnKSxcbiAgICAgIHdyb25nUlRMOiAkd3JhcHBlckVsLmNzcygnZGlzcGxheScpID09PSAnLXdlYmtpdC1ib3gnLFxuICAgICAgLy8gSW5kZXhlc1xuICAgICAgYWN0aXZlSW5kZXg6IDAsXG4gICAgICByZWFsSW5kZXg6IDAsXG4gICAgICAvL1xuICAgICAgaXNCZWdpbm5pbmc6IHRydWUsXG4gICAgICBpc0VuZDogZmFsc2UsXG4gICAgICAvLyBQcm9wc1xuICAgICAgdHJhbnNsYXRlOiAwLFxuICAgICAgcHJldmlvdXNUcmFuc2xhdGU6IDAsXG4gICAgICBwcm9ncmVzczogMCxcbiAgICAgIHZlbG9jaXR5OiAwLFxuICAgICAgYW5pbWF0aW5nOiBmYWxzZSxcbiAgICAgIC8vIExvY2tzXG4gICAgICBhbGxvd1NsaWRlTmV4dDogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCxcbiAgICAgIGFsbG93U2xpZGVQcmV2OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVQcmV2LFxuICAgICAgLy8gVG91Y2ggRXZlbnRzXG4gICAgICB0b3VjaEV2ZW50czogZnVuY3Rpb24gdG91Y2hFdmVudHMoKSB7XG4gICAgICAgIHZhciB0b3VjaCA9IFsndG91Y2hzdGFydCcsICd0b3VjaG1vdmUnLCAndG91Y2hlbmQnLCAndG91Y2hjYW5jZWwnXTtcbiAgICAgICAgdmFyIGRlc2t0b3AgPSBbJ21vdXNlZG93bicsICdtb3VzZW1vdmUnLCAnbW91c2V1cCddO1xuXG4gICAgICAgIGlmIChzd2lwZXIuc3VwcG9ydC5wb2ludGVyRXZlbnRzKSB7XG4gICAgICAgICAgZGVza3RvcCA9IFsncG9pbnRlcmRvd24nLCAncG9pbnRlcm1vdmUnLCAncG9pbnRlcnVwJ107XG4gICAgICAgIH1cblxuICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNUb3VjaCA9IHtcbiAgICAgICAgICBzdGFydDogdG91Y2hbMF0sXG4gICAgICAgICAgbW92ZTogdG91Y2hbMV0sXG4gICAgICAgICAgZW5kOiB0b3VjaFsyXSxcbiAgICAgICAgICBjYW5jZWw6IHRvdWNoWzNdXG4gICAgICAgIH07XG4gICAgICAgIHN3aXBlci50b3VjaEV2ZW50c0Rlc2t0b3AgPSB7XG4gICAgICAgICAgc3RhcnQ6IGRlc2t0b3BbMF0sXG4gICAgICAgICAgbW92ZTogZGVza3RvcFsxXSxcbiAgICAgICAgICBlbmQ6IGRlc2t0b3BbMl1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHN3aXBlci5zdXBwb3J0LnRvdWNoIHx8ICFzd2lwZXIucGFyYW1zLnNpbXVsYXRlVG91Y2ggPyBzd2lwZXIudG91Y2hFdmVudHNUb3VjaCA6IHN3aXBlci50b3VjaEV2ZW50c0Rlc2t0b3A7XG4gICAgICB9KCksXG4gICAgICB0b3VjaEV2ZW50c0RhdGE6IHtcbiAgICAgICAgaXNUb3VjaGVkOiB1bmRlZmluZWQsXG4gICAgICAgIGlzTW92ZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgYWxsb3dUb3VjaENhbGxiYWNrczogdW5kZWZpbmVkLFxuICAgICAgICB0b3VjaFN0YXJ0VGltZTogdW5kZWZpbmVkLFxuICAgICAgICBpc1Njcm9sbGluZzogdW5kZWZpbmVkLFxuICAgICAgICBjdXJyZW50VHJhbnNsYXRlOiB1bmRlZmluZWQsXG4gICAgICAgIHN0YXJ0VHJhbnNsYXRlOiB1bmRlZmluZWQsXG4gICAgICAgIGFsbG93VGhyZXNob2xkTW92ZTogdW5kZWZpbmVkLFxuICAgICAgICAvLyBGb3JtIGVsZW1lbnRzIHRvIG1hdGNoXG4gICAgICAgIGZvcm1FbGVtZW50czogJ2lucHV0LCBzZWxlY3QsIG9wdGlvbiwgdGV4dGFyZWEsIGJ1dHRvbiwgdmlkZW8sIGxhYmVsJyxcbiAgICAgICAgLy8gTGFzdCBjbGljayB0aW1lXG4gICAgICAgIGxhc3RDbGlja1RpbWU6IG5vdygpLFxuICAgICAgICBjbGlja1RpbWVvdXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gVmVsb2NpdGllc1xuICAgICAgICB2ZWxvY2l0aWVzOiBbXSxcbiAgICAgICAgYWxsb3dNb21lbnR1bUJvdW5jZTogdW5kZWZpbmVkLFxuICAgICAgICBpc1RvdWNoRXZlbnQ6IHVuZGVmaW5lZCxcbiAgICAgICAgc3RhcnRNb3Zpbmc6IHVuZGVmaW5lZFxuICAgICAgfSxcbiAgICAgIC8vIENsaWNrc1xuICAgICAgYWxsb3dDbGljazogdHJ1ZSxcbiAgICAgIC8vIFRvdWNoZXNcbiAgICAgIGFsbG93VG91Y2hNb3ZlOiBzd2lwZXIucGFyYW1zLmFsbG93VG91Y2hNb3ZlLFxuICAgICAgdG91Y2hlczoge1xuICAgICAgICBzdGFydFg6IDAsXG4gICAgICAgIHN0YXJ0WTogMCxcbiAgICAgICAgY3VycmVudFg6IDAsXG4gICAgICAgIGN1cnJlbnRZOiAwLFxuICAgICAgICBkaWZmOiAwXG4gICAgICB9LFxuICAgICAgLy8gSW1hZ2VzXG4gICAgICBpbWFnZXNUb0xvYWQ6IFtdLFxuICAgICAgaW1hZ2VzTG9hZGVkOiAwXG4gICAgfSk7IC8vIEluc3RhbGwgTW9kdWxlc1xuXG4gICAgc3dpcGVyLnVzZU1vZHVsZXMoKTtcbiAgICBzd2lwZXIuZW1pdCgnX3N3aXBlcicpOyAvLyBJbml0XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5pbml0KSB7XG4gICAgICBzd2lwZXIuaW5pdCgpO1xuICAgIH0gLy8gUmV0dXJuIGFwcCBpbnN0YW5jZVxuXG5cbiAgICByZXR1cm4gc3dpcGVyO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN3aXBlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmVtaXRDb250YWluZXJDbGFzc2VzID0gZnVuY3Rpb24gZW1pdENvbnRhaW5lckNsYXNzZXMoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLl9lbWl0Q2xhc3NlcyB8fCAhc3dpcGVyLmVsKSByZXR1cm47XG4gICAgdmFyIGNsYXNzZXMgPSBzd2lwZXIuZWwuY2xhc3NOYW1lLnNwbGl0KCcgJykuZmlsdGVyKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgIHJldHVybiBjbGFzc05hbWUuaW5kZXhPZignc3dpcGVyLWNvbnRhaW5lcicpID09PSAwIHx8IGNsYXNzTmFtZS5pbmRleE9mKHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcykgPT09IDA7XG4gICAgfSk7XG4gICAgc3dpcGVyLmVtaXQoJ19jb250YWluZXJDbGFzc2VzJywgY2xhc3Nlcy5qb2luKCcgJykpO1xuICB9O1xuXG4gIF9wcm90by5lbWl0U2xpZGVzQ2xhc3NlcyA9IGZ1bmN0aW9uIGVtaXRTbGlkZXNDbGFzc2VzKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5fZW1pdENsYXNzZXMgfHwgIXN3aXBlci5lbCkgcmV0dXJuO1xuICAgIHN3aXBlci5zbGlkZXMuZWFjaChmdW5jdGlvbiAoc2xpZGVFbCkge1xuICAgICAgdmFyIGNsYXNzZXMgPSBzbGlkZUVsLmNsYXNzTmFtZS5zcGxpdCgnICcpLmZpbHRlcihmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgICAgIHJldHVybiBjbGFzc05hbWUuaW5kZXhPZignc3dpcGVyLXNsaWRlJykgPT09IDAgfHwgY2xhc3NOYW1lLmluZGV4T2Yoc3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzKSA9PT0gMDtcbiAgICAgIH0pO1xuICAgICAgc3dpcGVyLmVtaXQoJ19zbGlkZUNsYXNzJywgc2xpZGVFbCwgY2xhc3Nlcy5qb2luKCcgJykpO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5zbGlkZXNQZXJWaWV3RHluYW1pYyA9IGZ1bmN0aW9uIHNsaWRlc1BlclZpZXdEeW5hbWljKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgICBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzLFxuICAgICAgICBzbGlkZXNHcmlkID0gc3dpcGVyLnNsaWRlc0dyaWQsXG4gICAgICAgIHN3aXBlclNpemUgPSBzd2lwZXIuc2l6ZSxcbiAgICAgICAgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgdmFyIHNwdiA9IDE7XG5cbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICB2YXIgc2xpZGVTaXplID0gc2xpZGVzW2FjdGl2ZUluZGV4XS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICB2YXIgYnJlYWtMb29wO1xuXG4gICAgICBmb3IgKHZhciBpID0gYWN0aXZlSW5kZXggKyAxOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChzbGlkZXNbaV0gJiYgIWJyZWFrTG9vcCkge1xuICAgICAgICAgIHNsaWRlU2l6ZSArPSBzbGlkZXNbaV0uc3dpcGVyU2xpZGVTaXplO1xuICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIGlmIChzbGlkZVNpemUgPiBzd2lwZXJTaXplKSBicmVha0xvb3AgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIF9pID0gYWN0aXZlSW5kZXggLSAxOyBfaSA+PSAwOyBfaSAtPSAxKSB7XG4gICAgICAgIGlmIChzbGlkZXNbX2ldICYmICFicmVha0xvb3ApIHtcbiAgICAgICAgICBzbGlkZVNpemUgKz0gc2xpZGVzW19pXS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgaWYgKHNsaWRlU2l6ZSA+IHN3aXBlclNpemUpIGJyZWFrTG9vcCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgX2kyID0gYWN0aXZlSW5kZXggKyAxOyBfaTIgPCBzbGlkZXMubGVuZ3RoOyBfaTIgKz0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzR3JpZFtfaTJdIC0gc2xpZGVzR3JpZFthY3RpdmVJbmRleF0gPCBzd2lwZXJTaXplKSB7XG4gICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3B2O1xuICB9O1xuXG4gIF9wcm90by51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgIHZhciBzbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZCxcbiAgICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtczsgLy8gQnJlYWtwb2ludHNcblxuICAgIGlmIChwYXJhbXMuYnJlYWtwb2ludHMpIHtcbiAgICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gICAgfVxuXG4gICAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcblxuICAgIGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgIHZhciB0cmFuc2xhdGVWYWx1ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlICogLTEgOiBzd2lwZXIudHJhbnNsYXRlO1xuICAgICAgdmFyIG5ld1RyYW5zbGF0ZSA9IE1hdGgubWluKE1hdGgubWF4KHRyYW5zbGF0ZVZhbHVlLCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpLCBzd2lwZXIubWluVHJhbnNsYXRlKCkpO1xuICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIH1cblxuICAgIHZhciB0cmFuc2xhdGVkO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZnJlZU1vZGUpIHtcbiAgICAgIHNldFRyYW5zbGF0ZSgpO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICgoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgfHwgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkgJiYgc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgIHRyYW5zbGF0ZWQgPSBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyYW5zbGF0ZWQgPSBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0cmFuc2xhdGVkKSB7XG4gICAgICAgIHNldFRyYW5zbGF0ZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzbmFwR3JpZCAhPT0gc3dpcGVyLnNuYXBHcmlkKSB7XG4gICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCd1cGRhdGUnKTtcbiAgfTtcblxuICBfcHJvdG8uY2hhbmdlRGlyZWN0aW9uID0gZnVuY3Rpb24gY2hhbmdlRGlyZWN0aW9uKG5ld0RpcmVjdGlvbiwgbmVlZFVwZGF0ZSkge1xuICAgIGlmIChuZWVkVXBkYXRlID09PSB2b2lkIDApIHtcbiAgICAgIG5lZWRVcGRhdGUgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBjdXJyZW50RGlyZWN0aW9uID0gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb247XG5cbiAgICBpZiAoIW5ld0RpcmVjdGlvbikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBuZXdEaXJlY3Rpb24gPSBjdXJyZW50RGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xuICAgIH1cblxuICAgIGlmIChuZXdEaXJlY3Rpb24gPT09IGN1cnJlbnREaXJlY3Rpb24gfHwgbmV3RGlyZWN0aW9uICE9PSAnaG9yaXpvbnRhbCcgJiYgbmV3RGlyZWN0aW9uICE9PSAndmVydGljYWwnKSB7XG4gICAgICByZXR1cm4gc3dpcGVyO1xuICAgIH1cblxuICAgIHN3aXBlci4kZWwucmVtb3ZlQ2xhc3MoXCJcIiArIHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIGN1cnJlbnREaXJlY3Rpb24pLmFkZENsYXNzKFwiXCIgKyBzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBuZXdEaXJlY3Rpb24pO1xuICAgIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xuICAgIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID0gbmV3RGlyZWN0aW9uO1xuICAgIHN3aXBlci5zbGlkZXMuZWFjaChmdW5jdGlvbiAoc2xpZGVFbCkge1xuICAgICAgaWYgKG5ld0RpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICBzbGlkZUVsLnN0eWxlLndpZHRoID0gJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZUVsLnN0eWxlLmhlaWdodCA9ICcnO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdjaGFuZ2VEaXJlY3Rpb24nKTtcbiAgICBpZiAobmVlZFVwZGF0ZSkgc3dpcGVyLnVwZGF0ZSgpO1xuICAgIHJldHVybiBzd2lwZXI7XG4gIH07XG5cbiAgX3Byb3RvLmluaXQgPSBmdW5jdGlvbiBpbml0KCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlSW5pdCcpOyAvLyBTZXQgYnJlYWtwb2ludFxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuYnJlYWtwb2ludHMpIHtcbiAgICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gICAgfSAvLyBBZGQgQ2xhc3Nlc1xuXG5cbiAgICBzd2lwZXIuYWRkQ2xhc3NlcygpOyAvLyBDcmVhdGUgbG9vcFxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgICB9IC8vIFVwZGF0ZSBzaXplXG5cblxuICAgIHN3aXBlci51cGRhdGVTaXplKCk7IC8vIFVwZGF0ZSBzbGlkZXNcblxuICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cpIHtcbiAgICAgIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gICAgfSAvLyBTZXQgR3JhYiBDdXJzb3JcblxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZ3JhYkN1cnNvcikge1xuICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoKTtcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmVsb2FkSW1hZ2VzKSB7XG4gICAgICBzd2lwZXIucHJlbG9hZEltYWdlcygpO1xuICAgIH0gLy8gU2xpZGUgVG8gSW5pdGlhbCBTbGlkZVxuXG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSArIHN3aXBlci5sb29wZWRTbGlkZXMsIDAsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUsIDAsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KTtcbiAgICB9IC8vIEF0dGFjaCBldmVudHNcblxuXG4gICAgc3dpcGVyLmF0dGFjaEV2ZW50cygpOyAvLyBJbml0IEZsYWdcblxuICAgIHN3aXBlci5pbml0aWFsaXplZCA9IHRydWU7IC8vIEVtaXRcblxuICAgIHN3aXBlci5lbWl0KCdpbml0Jyk7XG4gIH07XG5cbiAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KGRlbGV0ZUluc3RhbmNlLCBjbGVhblN0eWxlcykge1xuICAgIGlmIChkZWxldGVJbnN0YW5jZSA9PT0gdm9pZCAwKSB7XG4gICAgICBkZWxldGVJbnN0YW5jZSA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGNsZWFuU3R5bGVzID09PSB2b2lkIDApIHtcbiAgICAgIGNsZWFuU3R5bGVzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgICAgJGVsID0gc3dpcGVyLiRlbCxcbiAgICAgICAgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsLFxuICAgICAgICBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuXG4gICAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zID09PSAndW5kZWZpbmVkJyB8fCBzd2lwZXIuZGVzdHJveWVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlRGVzdHJveScpOyAvLyBJbml0IEZsYWdcblxuICAgIHN3aXBlci5pbml0aWFsaXplZCA9IGZhbHNlOyAvLyBEZXRhY2ggZXZlbnRzXG5cbiAgICBzd2lwZXIuZGV0YWNoRXZlbnRzKCk7IC8vIERlc3Ryb3kgbG9vcFxuXG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICB9IC8vIENsZWFudXAgc3R5bGVzXG5cblxuICAgIGlmIChjbGVhblN0eWxlcykge1xuICAgICAgc3dpcGVyLnJlbW92ZUNsYXNzZXMoKTtcbiAgICAgICRlbC5yZW1vdmVBdHRyKCdzdHlsZScpO1xuICAgICAgJHdyYXBwZXJFbC5yZW1vdmVBdHRyKCdzdHlsZScpO1xuXG4gICAgICBpZiAoc2xpZGVzICYmIHNsaWRlcy5sZW5ndGgpIHtcbiAgICAgICAgc2xpZGVzLnJlbW92ZUNsYXNzKFtwYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3MsIHBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzLCBwYXJhbXMuc2xpZGVOZXh0Q2xhc3MsIHBhcmFtcy5zbGlkZVByZXZDbGFzc10uam9pbignICcpKS5yZW1vdmVBdHRyKCdzdHlsZScpLnJlbW92ZUF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3dpcGVyLmVtaXQoJ2Rlc3Ryb3knKTsgLy8gRGV0YWNoIGVtaXR0ZXIgZXZlbnRzXG5cbiAgICBPYmplY3Qua2V5cyhzd2lwZXIuZXZlbnRzTGlzdGVuZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICAgIHN3aXBlci5vZmYoZXZlbnROYW1lKTtcbiAgICB9KTtcblxuICAgIGlmIChkZWxldGVJbnN0YW5jZSAhPT0gZmFsc2UpIHtcbiAgICAgIHN3aXBlci4kZWxbMF0uc3dpcGVyID0gbnVsbDtcbiAgICAgIGRlbGV0ZVByb3BzKHN3aXBlcik7XG4gICAgfVxuXG4gICAgc3dpcGVyLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgU3dpcGVyLmV4dGVuZERlZmF1bHRzID0gZnVuY3Rpb24gZXh0ZW5kRGVmYXVsdHMobmV3RGVmYXVsdHMpIHtcbiAgICBleHRlbmQoZXh0ZW5kZWREZWZhdWx0cywgbmV3RGVmYXVsdHMpO1xuICB9O1xuXG4gIFN3aXBlci5pbnN0YWxsTW9kdWxlID0gZnVuY3Rpb24gaW5zdGFsbE1vZHVsZShtb2R1bGUpIHtcbiAgICBpZiAoIVN3aXBlci5wcm90b3R5cGUubW9kdWxlcykgU3dpcGVyLnByb3RvdHlwZS5tb2R1bGVzID0ge307XG4gICAgdmFyIG5hbWUgPSBtb2R1bGUubmFtZSB8fCBPYmplY3Qua2V5cyhTd2lwZXIucHJvdG90eXBlLm1vZHVsZXMpLmxlbmd0aCArIFwiX1wiICsgbm93KCk7XG4gICAgU3dpcGVyLnByb3RvdHlwZS5tb2R1bGVzW25hbWVdID0gbW9kdWxlO1xuICB9O1xuXG4gIFN3aXBlci51c2UgPSBmdW5jdGlvbiB1c2UobW9kdWxlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobW9kdWxlKSkge1xuICAgICAgbW9kdWxlLmZvckVhY2goZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgcmV0dXJuIFN3aXBlci5pbnN0YWxsTW9kdWxlKG0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gU3dpcGVyO1xuICAgIH1cblxuICAgIFN3aXBlci5pbnN0YWxsTW9kdWxlKG1vZHVsZSk7XG4gICAgcmV0dXJuIFN3aXBlcjtcbiAgfTtcblxuICBfY3JlYXRlQ2xhc3MoU3dpcGVyLCBudWxsLCBbe1xuICAgIGtleTogXCJleHRlbmRlZERlZmF1bHRzXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gZXh0ZW5kZWREZWZhdWx0cztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGVmYXVsdHNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0cztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3dpcGVyO1xufSgpO1xuXG5Td2lwZXIudXNlKFtSZXNpemUsIE9ic2VydmVyXSk7XG5leHBvcnQgZGVmYXVsdCBTd2lwZXI7IiwiZXhwb3J0IGRlZmF1bHQge1xuICBpbml0OiB0cnVlLFxuICBkaXJlY3Rpb246ICdob3Jpem9udGFsJyxcbiAgdG91Y2hFdmVudHNUYXJnZXQ6ICdjb250YWluZXInLFxuICBpbml0aWFsU2xpZGU6IDAsXG4gIHNwZWVkOiAzMDAsXG4gIGNzc01vZGU6IGZhbHNlLFxuICB1cGRhdGVPbldpbmRvd1Jlc2l6ZTogdHJ1ZSxcbiAgLy8gT3ZlcnJpZGVzXG4gIHdpZHRoOiBudWxsLFxuICBoZWlnaHQ6IG51bGwsXG4gIC8vXG4gIHByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbjogZmFsc2UsXG4gIC8vIHNzclxuICB1c2VyQWdlbnQ6IG51bGwsXG4gIHVybDogbnVsbCxcbiAgLy8gVG8gc3VwcG9ydCBpT1MncyBzd2lwZS10by1nby1iYWNrIGdlc3R1cmUgKHdoZW4gYmVpbmcgdXNlZCBpbi1hcHApLlxuICBlZGdlU3dpcGVEZXRlY3Rpb246IGZhbHNlLFxuICBlZGdlU3dpcGVUaHJlc2hvbGQ6IDIwLFxuICAvLyBGcmVlIG1vZGVcbiAgZnJlZU1vZGU6IGZhbHNlLFxuICBmcmVlTW9kZU1vbWVudHVtOiB0cnVlLFxuICBmcmVlTW9kZU1vbWVudHVtUmF0aW86IDEsXG4gIGZyZWVNb2RlTW9tZW50dW1Cb3VuY2U6IHRydWUsXG4gIGZyZWVNb2RlTW9tZW50dW1Cb3VuY2VSYXRpbzogMSxcbiAgZnJlZU1vZGVNb21lbnR1bVZlbG9jaXR5UmF0aW86IDEsXG4gIGZyZWVNb2RlU3RpY2t5OiBmYWxzZSxcbiAgZnJlZU1vZGVNaW5pbXVtVmVsb2NpdHk6IDAuMDIsXG4gIC8vIEF1dG9oZWlnaHRcbiAgYXV0b0hlaWdodDogZmFsc2UsXG4gIC8vIFNldCB3cmFwcGVyIHdpZHRoXG4gIHNldFdyYXBwZXJTaXplOiBmYWxzZSxcbiAgLy8gVmlydHVhbCBUcmFuc2xhdGVcbiAgdmlydHVhbFRyYW5zbGF0ZTogZmFsc2UsXG4gIC8vIEVmZmVjdHNcbiAgZWZmZWN0OiAnc2xpZGUnLFxuICAvLyAnc2xpZGUnIG9yICdmYWRlJyBvciAnY3ViZScgb3IgJ2NvdmVyZmxvdycgb3IgJ2ZsaXAnXG4gIC8vIEJyZWFrcG9pbnRzXG4gIGJyZWFrcG9pbnRzOiB1bmRlZmluZWQsXG4gIC8vIFNsaWRlcyBncmlkXG4gIHNwYWNlQmV0d2VlbjogMCxcbiAgc2xpZGVzUGVyVmlldzogMSxcbiAgc2xpZGVzUGVyQ29sdW1uOiAxLFxuICBzbGlkZXNQZXJDb2x1bW5GaWxsOiAnY29sdW1uJyxcbiAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gIHNsaWRlc1Blckdyb3VwU2tpcDogMCxcbiAgY2VudGVyZWRTbGlkZXM6IGZhbHNlLFxuICBjZW50ZXJlZFNsaWRlc0JvdW5kczogZmFsc2UsXG4gIHNsaWRlc09mZnNldEJlZm9yZTogMCxcbiAgLy8gaW4gcHhcbiAgc2xpZGVzT2Zmc2V0QWZ0ZXI6IDAsXG4gIC8vIGluIHB4XG4gIG5vcm1hbGl6ZVNsaWRlSW5kZXg6IHRydWUsXG4gIGNlbnRlckluc3VmZmljaWVudFNsaWRlczogZmFsc2UsXG4gIC8vIERpc2FibGUgc3dpcGVyIGFuZCBoaWRlIG5hdmlnYXRpb24gd2hlbiBjb250YWluZXIgbm90IG92ZXJmbG93XG4gIHdhdGNoT3ZlcmZsb3c6IGZhbHNlLFxuICAvLyBSb3VuZCBsZW5ndGhcbiAgcm91bmRMZW5ndGhzOiBmYWxzZSxcbiAgLy8gVG91Y2hlc1xuICB0b3VjaFJhdGlvOiAxLFxuICB0b3VjaEFuZ2xlOiA0NSxcbiAgc2ltdWxhdGVUb3VjaDogdHJ1ZSxcbiAgc2hvcnRTd2lwZXM6IHRydWUsXG4gIGxvbmdTd2lwZXM6IHRydWUsXG4gIGxvbmdTd2lwZXNSYXRpbzogMC41LFxuICBsb25nU3dpcGVzTXM6IDMwMCxcbiAgZm9sbG93RmluZ2VyOiB0cnVlLFxuICBhbGxvd1RvdWNoTW92ZTogdHJ1ZSxcbiAgdGhyZXNob2xkOiAwLFxuICB0b3VjaE1vdmVTdG9wUHJvcGFnYXRpb246IGZhbHNlLFxuICB0b3VjaFN0YXJ0UHJldmVudERlZmF1bHQ6IHRydWUsXG4gIHRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0OiBmYWxzZSxcbiAgdG91Y2hSZWxlYXNlT25FZGdlczogZmFsc2UsXG4gIC8vIFVuaXF1ZSBOYXZpZ2F0aW9uIEVsZW1lbnRzXG4gIHVuaXF1ZU5hdkVsZW1lbnRzOiB0cnVlLFxuICAvLyBSZXNpc3RhbmNlXG4gIHJlc2lzdGFuY2U6IHRydWUsXG4gIHJlc2lzdGFuY2VSYXRpbzogMC44NSxcbiAgLy8gUHJvZ3Jlc3NcbiAgd2F0Y2hTbGlkZXNQcm9ncmVzczogZmFsc2UsXG4gIHdhdGNoU2xpZGVzVmlzaWJpbGl0eTogZmFsc2UsXG4gIC8vIEN1cnNvclxuICBncmFiQ3Vyc29yOiBmYWxzZSxcbiAgLy8gQ2xpY2tzXG4gIHByZXZlbnRDbGlja3M6IHRydWUsXG4gIHByZXZlbnRDbGlja3NQcm9wYWdhdGlvbjogdHJ1ZSxcbiAgc2xpZGVUb0NsaWNrZWRTbGlkZTogZmFsc2UsXG4gIC8vIEltYWdlc1xuICBwcmVsb2FkSW1hZ2VzOiB0cnVlLFxuICB1cGRhdGVPbkltYWdlc1JlYWR5OiB0cnVlLFxuICAvLyBsb29wXG4gIGxvb3A6IGZhbHNlLFxuICBsb29wQWRkaXRpb25hbFNsaWRlczogMCxcbiAgbG9vcGVkU2xpZGVzOiBudWxsLFxuICBsb29wRmlsbEdyb3VwV2l0aEJsYW5rOiBmYWxzZSxcbiAgbG9vcFByZXZlbnRzU2xpZGU6IHRydWUsXG4gIC8vIFN3aXBpbmcvbm8gc3dpcGluZ1xuICBhbGxvd1NsaWRlUHJldjogdHJ1ZSxcbiAgYWxsb3dTbGlkZU5leHQ6IHRydWUsXG4gIHN3aXBlSGFuZGxlcjogbnVsbCxcbiAgLy8gJy5zd2lwZS1oYW5kbGVyJyxcbiAgbm9Td2lwaW5nOiB0cnVlLFxuICBub1N3aXBpbmdDbGFzczogJ3N3aXBlci1uby1zd2lwaW5nJyxcbiAgbm9Td2lwaW5nU2VsZWN0b3I6IG51bGwsXG4gIC8vIFBhc3NpdmUgTGlzdGVuZXJzXG4gIHBhc3NpdmVMaXN0ZW5lcnM6IHRydWUsXG4gIC8vIE5TXG4gIGNvbnRhaW5lck1vZGlmaWVyQ2xhc3M6ICdzd2lwZXItY29udGFpbmVyLScsXG4gIC8vIE5FV1xuICBzbGlkZUNsYXNzOiAnc3dpcGVyLXNsaWRlJyxcbiAgc2xpZGVCbGFua0NsYXNzOiAnc3dpcGVyLXNsaWRlLWludmlzaWJsZS1ibGFuaycsXG4gIHNsaWRlQWN0aXZlQ2xhc3M6ICdzd2lwZXItc2xpZGUtYWN0aXZlJyxcbiAgc2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzczogJ3N3aXBlci1zbGlkZS1kdXBsaWNhdGUtYWN0aXZlJyxcbiAgc2xpZGVWaXNpYmxlQ2xhc3M6ICdzd2lwZXItc2xpZGUtdmlzaWJsZScsXG4gIHNsaWRlRHVwbGljYXRlQ2xhc3M6ICdzd2lwZXItc2xpZGUtZHVwbGljYXRlJyxcbiAgc2xpZGVOZXh0Q2xhc3M6ICdzd2lwZXItc2xpZGUtbmV4dCcsXG4gIHNsaWRlRHVwbGljYXRlTmV4dENsYXNzOiAnc3dpcGVyLXNsaWRlLWR1cGxpY2F0ZS1uZXh0JyxcbiAgc2xpZGVQcmV2Q2xhc3M6ICdzd2lwZXItc2xpZGUtcHJldicsXG4gIHNsaWRlRHVwbGljYXRlUHJldkNsYXNzOiAnc3dpcGVyLXNsaWRlLWR1cGxpY2F0ZS1wcmV2JyxcbiAgd3JhcHBlckNsYXNzOiAnc3dpcGVyLXdyYXBwZXInLFxuICAvLyBDYWxsYmFja3NcbiAgcnVuQ2FsbGJhY2tzT25Jbml0OiB0cnVlLFxuICAvLyBJbnRlcm5hbHNcbiAgX2VtaXRDbGFzc2VzOiBmYWxzZVxufTsiLCIvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuZXhwb3J0IGRlZmF1bHQge1xuICBvbjogZnVuY3Rpb24gb24oZXZlbnRzLCBoYW5kbGVyLCBwcmlvcml0eSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybiBzZWxmO1xuICAgIHZhciBtZXRob2QgPSBwcmlvcml0eSA/ICd1bnNoaWZ0JyA6ICdwdXNoJztcbiAgICBldmVudHMuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdW21ldGhvZF0oaGFuZGxlcik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG4gIG9uY2U6IGZ1bmN0aW9uIG9uY2UoZXZlbnRzLCBoYW5kbGVyLCBwcmlvcml0eSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybiBzZWxmO1xuXG4gICAgZnVuY3Rpb24gb25jZUhhbmRsZXIoKSB7XG4gICAgICBzZWxmLm9mZihldmVudHMsIG9uY2VIYW5kbGVyKTtcblxuICAgICAgaWYgKG9uY2VIYW5kbGVyLl9fZW1pdHRlclByb3h5KSB7XG4gICAgICAgIGRlbGV0ZSBvbmNlSGFuZGxlci5fX2VtaXR0ZXJQcm94eTtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIGhhbmRsZXIuYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgfVxuXG4gICAgb25jZUhhbmRsZXIuX19lbWl0dGVyUHJveHkgPSBoYW5kbGVyO1xuICAgIHJldHVybiBzZWxmLm9uKGV2ZW50cywgb25jZUhhbmRsZXIsIHByaW9yaXR5KTtcbiAgfSxcbiAgb25Bbnk6IGZ1bmN0aW9uIG9uQW55KGhhbmRsZXIsIHByaW9yaXR5KSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHNlbGY7XG4gICAgdmFyIG1ldGhvZCA9IHByaW9yaXR5ID8gJ3Vuc2hpZnQnIDogJ3B1c2gnO1xuXG4gICAgaWYgKHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLmluZGV4T2YoaGFuZGxlcikgPCAwKSB7XG4gICAgICBzZWxmLmV2ZW50c0FueUxpc3RlbmVyc1ttZXRob2RdKGhhbmRsZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmO1xuICB9LFxuICBvZmZBbnk6IGZ1bmN0aW9uIG9mZkFueShoYW5kbGVyKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgIHZhciBpbmRleCA9IHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLmluZGV4T2YoaGFuZGxlcik7XG5cbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcbiAgb2ZmOiBmdW5jdGlvbiBvZmYoZXZlbnRzLCBoYW5kbGVyKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgIGV2ZW50cy5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgfSBlbHNlIGlmIChzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHtcbiAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50SGFuZGxlciwgaW5kZXgpIHtcbiAgICAgICAgICBpZiAoZXZlbnRIYW5kbGVyID09PSBoYW5kbGVyIHx8IGV2ZW50SGFuZGxlci5fX2VtaXR0ZXJQcm94eSAmJiBldmVudEhhbmRsZXIuX19lbWl0dGVyUHJveHkgPT09IGhhbmRsZXIpIHtcbiAgICAgICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG4gIGVtaXQ6IGZ1bmN0aW9uIGVtaXQoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgIHZhciBldmVudHM7XG4gICAgdmFyIGRhdGE7XG4gICAgdmFyIGNvbnRleHQ7XG5cbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnIHx8IEFycmF5LmlzQXJyYXkoYXJnc1swXSkpIHtcbiAgICAgIGV2ZW50cyA9IGFyZ3NbMF07XG4gICAgICBkYXRhID0gYXJncy5zbGljZSgxLCBhcmdzLmxlbmd0aCk7XG4gICAgICBjb250ZXh0ID0gc2VsZjtcbiAgICB9IGVsc2Uge1xuICAgICAgZXZlbnRzID0gYXJnc1swXS5ldmVudHM7XG4gICAgICBkYXRhID0gYXJnc1swXS5kYXRhO1xuICAgICAgY29udGV4dCA9IGFyZ3NbMF0uY29udGV4dCB8fCBzZWxmO1xuICAgIH1cblxuICAgIGRhdGEudW5zaGlmdChjb250ZXh0KTtcbiAgICB2YXIgZXZlbnRzQXJyYXkgPSBBcnJheS5pc0FycmF5KGV2ZW50cykgPyBldmVudHMgOiBldmVudHMuc3BsaXQoJyAnKTtcbiAgICBldmVudHNBcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKHNlbGYuZXZlbnRzTGlzdGVuZXJzICYmIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSkge1xuICAgICAgICB2YXIgaGFuZGxlcnMgPSBbXTtcbiAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50SGFuZGxlcikge1xuICAgICAgICAgIGhhbmRsZXJzLnB1c2goZXZlbnRIYW5kbGVyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50SGFuZGxlcikge1xuICAgICAgICAgIGV2ZW50SGFuZGxlci5hcHBseShjb250ZXh0LCBkYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH1cbn07IiwiaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCBvblRvdWNoU3RhcnQgZnJvbSAnLi9vblRvdWNoU3RhcnQnO1xuaW1wb3J0IG9uVG91Y2hNb3ZlIGZyb20gJy4vb25Ub3VjaE1vdmUnO1xuaW1wb3J0IG9uVG91Y2hFbmQgZnJvbSAnLi9vblRvdWNoRW5kJztcbmltcG9ydCBvblJlc2l6ZSBmcm9tICcuL29uUmVzaXplJztcbmltcG9ydCBvbkNsaWNrIGZyb20gJy4vb25DbGljayc7XG5pbXBvcnQgb25TY3JvbGwgZnJvbSAnLi9vblNjcm9sbCc7XG52YXIgZHVtbXlFdmVudEF0dGFjaGVkID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGR1bW15RXZlbnRMaXN0ZW5lcigpIHt9XG5cbmZ1bmN0aW9uIGF0dGFjaEV2ZW50cygpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgdG91Y2hFdmVudHMgPSBzd2lwZXIudG91Y2hFdmVudHMsXG4gICAgICBlbCA9IHN3aXBlci5lbCxcbiAgICAgIHdyYXBwZXJFbCA9IHN3aXBlci53cmFwcGVyRWwsXG4gICAgICBkZXZpY2UgPSBzd2lwZXIuZGV2aWNlLFxuICAgICAgc3VwcG9ydCA9IHN3aXBlci5zdXBwb3J0O1xuICBzd2lwZXIub25Ub3VjaFN0YXJ0ID0gb25Ub3VjaFN0YXJ0LmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uVG91Y2hNb3ZlID0gb25Ub3VjaE1vdmUuYmluZChzd2lwZXIpO1xuICBzd2lwZXIub25Ub3VjaEVuZCA9IG9uVG91Y2hFbmQuYmluZChzd2lwZXIpO1xuXG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHN3aXBlci5vblNjcm9sbCA9IG9uU2Nyb2xsLmJpbmQoc3dpcGVyKTtcbiAgfVxuXG4gIHN3aXBlci5vbkNsaWNrID0gb25DbGljay5iaW5kKHN3aXBlcik7XG4gIHZhciBjYXB0dXJlID0gISFwYXJhbXMubmVzdGVkOyAvLyBUb3VjaCBFdmVudHNcblxuICBpZiAoIXN1cHBvcnQudG91Y2ggJiYgc3VwcG9ydC5wb2ludGVyRXZlbnRzKSB7XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5zdGFydCwgc3dpcGVyLm9uVG91Y2hTdGFydCwgZmFsc2UpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMubW92ZSwgc3dpcGVyLm9uVG91Y2hNb3ZlLCBjYXB0dXJlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLmVuZCwgc3dpcGVyLm9uVG91Y2hFbmQsIGZhbHNlKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoc3VwcG9ydC50b3VjaCkge1xuICAgICAgdmFyIHBhc3NpdmVMaXN0ZW5lciA9IHRvdWNoRXZlbnRzLnN0YXJ0ID09PSAndG91Y2hzdGFydCcgJiYgc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgcGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7XG4gICAgICAgIHBhc3NpdmU6IHRydWUsXG4gICAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgICB9IDogZmFsc2U7XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLnN0YXJ0LCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5tb3ZlLCBzd2lwZXIub25Ub3VjaE1vdmUsIHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyID8ge1xuICAgICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgICAgY2FwdHVyZTogY2FwdHVyZVxuICAgICAgfSA6IGNhcHR1cmUpO1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5lbmQsIHN3aXBlci5vblRvdWNoRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuXG4gICAgICBpZiAodG91Y2hFdmVudHMuY2FuY2VsKSB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuY2FuY2VsLCBzd2lwZXIub25Ub3VjaEVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFkdW1teUV2ZW50QXR0YWNoZWQpIHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGR1bW15RXZlbnRMaXN0ZW5lcik7XG4gICAgICAgIGR1bW15RXZlbnRBdHRhY2hlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5zaW11bGF0ZVRvdWNoICYmICFkZXZpY2UuaW9zICYmICFkZXZpY2UuYW5kcm9pZCB8fCBwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiAhc3VwcG9ydC50b3VjaCAmJiBkZXZpY2UuaW9zKSB7XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBmYWxzZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBzd2lwZXIub25Ub3VjaE1vdmUsIGNhcHR1cmUpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHN3aXBlci5vblRvdWNoRW5kLCBmYWxzZSk7XG4gICAgfVxuICB9IC8vIFByZXZlbnQgTGlua3MgQ2xpY2tzXG5cblxuICBpZiAocGFyYW1zLnByZXZlbnRDbGlja3MgfHwgcGFyYW1zLnByZXZlbnRDbGlja3NQcm9wYWdhdGlvbikge1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc3dpcGVyLm9uQ2xpY2ssIHRydWUpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgd3JhcHBlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHN3aXBlci5vblNjcm9sbCk7XG4gIH0gLy8gUmVzaXplIGhhbmRsZXJcblxuXG4gIGlmIChwYXJhbXMudXBkYXRlT25XaW5kb3dSZXNpemUpIHtcbiAgICBzd2lwZXIub24oZGV2aWNlLmlvcyB8fCBkZXZpY2UuYW5kcm9pZCA/ICdyZXNpemUgb3JpZW50YXRpb25jaGFuZ2Ugb2JzZXJ2ZXJVcGRhdGUnIDogJ3Jlc2l6ZSBvYnNlcnZlclVwZGF0ZScsIG9uUmVzaXplLCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIub24oJ29ic2VydmVyVXBkYXRlJywgb25SZXNpemUsIHRydWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRldGFjaEV2ZW50cygpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgdG91Y2hFdmVudHMgPSBzd2lwZXIudG91Y2hFdmVudHMsXG4gICAgICBlbCA9IHN3aXBlci5lbCxcbiAgICAgIHdyYXBwZXJFbCA9IHN3aXBlci53cmFwcGVyRWwsXG4gICAgICBkZXZpY2UgPSBzd2lwZXIuZGV2aWNlLFxuICAgICAgc3VwcG9ydCA9IHN3aXBlci5zdXBwb3J0O1xuICB2YXIgY2FwdHVyZSA9ICEhcGFyYW1zLm5lc3RlZDsgLy8gVG91Y2ggRXZlbnRzXG5cbiAgaWYgKCFzdXBwb3J0LnRvdWNoICYmIHN1cHBvcnQucG9pbnRlckV2ZW50cykge1xuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuc3RhcnQsIHN3aXBlci5vblRvdWNoU3RhcnQsIGZhbHNlKTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLm1vdmUsIHN3aXBlci5vblRvdWNoTW92ZSwgY2FwdHVyZSk7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5lbmQsIHN3aXBlci5vblRvdWNoRW5kLCBmYWxzZSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHN1cHBvcnQudG91Y2gpIHtcbiAgICAgIHZhciBwYXNzaXZlTGlzdGVuZXIgPSB0b3VjaEV2ZW50cy5zdGFydCA9PT0gJ29uVG91Y2hTdGFydCcgJiYgc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgcGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7XG4gICAgICAgIHBhc3NpdmU6IHRydWUsXG4gICAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgICB9IDogZmFsc2U7XG4gICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLnN0YXJ0LCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5tb3ZlLCBzd2lwZXIub25Ub3VjaE1vdmUsIGNhcHR1cmUpO1xuICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5lbmQsIHN3aXBlci5vblRvdWNoRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuXG4gICAgICBpZiAodG91Y2hFdmVudHMuY2FuY2VsKSB7XG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuY2FuY2VsLCBzd2lwZXIub25Ub3VjaEVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgIWRldmljZS5pb3MgJiYgIWRldmljZS5hbmRyb2lkIHx8IHBhcmFtcy5zaW11bGF0ZVRvdWNoICYmICFzdXBwb3J0LnRvdWNoICYmIGRldmljZS5pb3MpIHtcbiAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHN3aXBlci5vblRvdWNoU3RhcnQsIGZhbHNlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHN3aXBlci5vblRvdWNoTW92ZSwgY2FwdHVyZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgc3dpcGVyLm9uVG91Y2hFbmQsIGZhbHNlKTtcbiAgICB9XG4gIH0gLy8gUHJldmVudCBMaW5rcyBDbGlja3NcblxuXG4gIGlmIChwYXJhbXMucHJldmVudENsaWNrcyB8fCBwYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uKSB7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzd2lwZXIub25DbGljaywgdHJ1ZSk7XG4gIH1cblxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICB3cmFwcGVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc3dpcGVyLm9uU2Nyb2xsKTtcbiAgfSAvLyBSZXNpemUgaGFuZGxlclxuXG5cbiAgc3dpcGVyLm9mZihkZXZpY2UuaW9zIHx8IGRldmljZS5hbmRyb2lkID8gJ3Jlc2l6ZSBvcmllbnRhdGlvbmNoYW5nZSBvYnNlcnZlclVwZGF0ZScgOiAncmVzaXplIG9ic2VydmVyVXBkYXRlJywgb25SZXNpemUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGF0dGFjaEV2ZW50czogYXR0YWNoRXZlbnRzLFxuICBkZXRhY2hFdmVudHM6IGRldGFjaEV2ZW50c1xufTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG5cbiAgaWYgKCFzd2lwZXIuYWxsb3dDbGljaykge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnByZXZlbnRDbGlja3MpIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLnByZXZlbnRDbGlja3NQcm9wYWdhdGlvbiAmJiBzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICB9XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvblJlc2l6ZSgpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgZWwgPSBzd2lwZXIuZWw7XG4gIGlmIChlbCAmJiBlbC5vZmZzZXRXaWR0aCA9PT0gMCkgcmV0dXJuOyAvLyBCcmVha3BvaW50c1xuXG4gIGlmIChwYXJhbXMuYnJlYWtwb2ludHMpIHtcbiAgICBzd2lwZXIuc2V0QnJlYWtwb2ludCgpO1xuICB9IC8vIFNhdmUgbG9ja3NcblxuXG4gIHZhciBhbGxvd1NsaWRlTmV4dCA9IHN3aXBlci5hbGxvd1NsaWRlTmV4dCxcbiAgICAgIGFsbG93U2xpZGVQcmV2ID0gc3dpcGVyLmFsbG93U2xpZGVQcmV2LFxuICAgICAgc25hcEdyaWQgPSBzd2lwZXIuc25hcEdyaWQ7IC8vIERpc2FibGUgbG9ja3Mgb24gcmVzaXplXG5cbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gdHJ1ZTtcbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gdHJ1ZTtcbiAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcbiAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuXG4gIGlmICgocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyB8fCBwYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpICYmIHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gIH1cblxuICBpZiAoc3dpcGVyLmF1dG9wbGF5ICYmIHN3aXBlci5hdXRvcGxheS5ydW5uaW5nICYmIHN3aXBlci5hdXRvcGxheS5wYXVzZWQpIHtcbiAgICBzd2lwZXIuYXV0b3BsYXkucnVuKCk7XG4gIH0gLy8gUmV0dXJuIGxvY2tzIGFmdGVyIHJlc2l6ZVxuXG5cbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gYWxsb3dTbGlkZVByZXY7XG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IGFsbG93U2xpZGVOZXh0O1xuXG4gIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc25hcEdyaWQgIT09IHN3aXBlci5zbmFwR3JpZCkge1xuICAgIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvblNjcm9sbCgpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciB3cmFwcGVyRWwgPSBzd2lwZXIud3JhcHBlckVsLFxuICAgICAgcnRsVHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZTtcbiAgc3dpcGVyLnByZXZpb3VzVHJhbnNsYXRlID0gc3dpcGVyLnRyYW5zbGF0ZTtcblxuICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgaWYgKHJ0bFRyYW5zbGF0ZSkge1xuICAgICAgc3dpcGVyLnRyYW5zbGF0ZSA9IHdyYXBwZXJFbC5zY3JvbGxXaWR0aCAtIHdyYXBwZXJFbC5vZmZzZXRXaWR0aCAtIHdyYXBwZXJFbC5zY3JvbGxMZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIudHJhbnNsYXRlID0gLXdyYXBwZXJFbC5zY3JvbGxMZWZ0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIudHJhbnNsYXRlID0gLXdyYXBwZXJFbC5zY3JvbGxUb3A7XG4gIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cblxuICBpZiAoc3dpcGVyLnRyYW5zbGF0ZSA9PT0gLTApIHN3aXBlci50cmFuc2xhdGUgPSAwO1xuICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgdmFyIG5ld1Byb2dyZXNzO1xuICB2YXIgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG5cbiAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7XG4gICAgbmV3UHJvZ3Jlc3MgPSAwO1xuICB9IGVsc2Uge1xuICAgIG5ld1Byb2dyZXNzID0gKHN3aXBlci50cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gdHJhbnNsYXRlc0RpZmY7XG4gIH1cblxuICBpZiAobmV3UHJvZ3Jlc3MgIT09IHN3aXBlci5wcm9ncmVzcykge1xuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhydGxUcmFuc2xhdGUgPyAtc3dpcGVyLnRyYW5zbGF0ZSA6IHN3aXBlci50cmFuc2xhdGUpO1xuICB9XG5cbiAgc3dpcGVyLmVtaXQoJ3NldFRyYW5zbGF0ZScsIHN3aXBlci50cmFuc2xhdGUsIGZhbHNlKTtcbn0iLCJpbXBvcnQgeyBub3csIG5leHRUaWNrIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb25Ub3VjaEVuZChldmVudCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIGRhdGEgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIHRvdWNoZXMgPSBzd2lwZXIudG91Y2hlcyxcbiAgICAgIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGUsXG4gICAgICAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWwsXG4gICAgICBzbGlkZXNHcmlkID0gc3dpcGVyLnNsaWRlc0dyaWQsXG4gICAgICBzbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZDtcbiAgdmFyIGUgPSBldmVudDtcbiAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcblxuICBpZiAoZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3RvdWNoRW5kJywgZSk7XG4gIH1cblxuICBkYXRhLmFsbG93VG91Y2hDYWxsYmFja3MgPSBmYWxzZTtcblxuICBpZiAoIWRhdGEuaXNUb3VjaGVkKSB7XG4gICAgaWYgKGRhdGEuaXNNb3ZlZCAmJiBwYXJhbXMuZ3JhYkN1cnNvcikge1xuICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoZmFsc2UpO1xuICAgIH1cblxuICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH0gLy8gUmV0dXJuIEdyYWIgQ3Vyc29yXG5cblxuICBpZiAocGFyYW1zLmdyYWJDdXJzb3IgJiYgZGF0YS5pc01vdmVkICYmIGRhdGEuaXNUb3VjaGVkICYmIChzd2lwZXIuYWxsb3dTbGlkZU5leHQgPT09IHRydWUgfHwgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID09PSB0cnVlKSkge1xuICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKGZhbHNlKTtcbiAgfSAvLyBUaW1lIGRpZmZcblxuXG4gIHZhciB0b3VjaEVuZFRpbWUgPSBub3coKTtcbiAgdmFyIHRpbWVEaWZmID0gdG91Y2hFbmRUaW1lIC0gZGF0YS50b3VjaFN0YXJ0VGltZTsgLy8gVGFwLCBkb3VibGVUYXAsIENsaWNrXG5cbiAgaWYgKHN3aXBlci5hbGxvd0NsaWNrKSB7XG4gICAgc3dpcGVyLnVwZGF0ZUNsaWNrZWRTbGlkZShlKTtcbiAgICBzd2lwZXIuZW1pdCgndGFwIGNsaWNrJywgZSk7XG5cbiAgICBpZiAodGltZURpZmYgPCAzMDAgJiYgdG91Y2hFbmRUaW1lIC0gZGF0YS5sYXN0Q2xpY2tUaW1lIDwgMzAwKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnZG91YmxlVGFwIGRvdWJsZUNsaWNrJywgZSk7XG4gICAgfVxuICB9XG5cbiAgZGF0YS5sYXN0Q2xpY2tUaW1lID0gbm93KCk7XG4gIG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXN3aXBlci5kZXN0cm95ZWQpIHN3aXBlci5hbGxvd0NsaWNrID0gdHJ1ZTtcbiAgfSk7XG5cbiAgaWYgKCFkYXRhLmlzVG91Y2hlZCB8fCAhZGF0YS5pc01vdmVkIHx8ICFzd2lwZXIuc3dpcGVEaXJlY3Rpb24gfHwgdG91Y2hlcy5kaWZmID09PSAwIHx8IGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9PT0gZGF0YS5zdGFydFRyYW5zbGF0ZSkge1xuICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gICAgZGF0YS5zdGFydE1vdmluZyA9IGZhbHNlO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG4gIHZhciBjdXJyZW50UG9zO1xuXG4gIGlmIChwYXJhbXMuZm9sbG93RmluZ2VyKSB7XG4gICAgY3VycmVudFBvcyA9IHJ0bCA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgfSBlbHNlIHtcbiAgICBjdXJyZW50UG9zID0gLWRhdGEuY3VycmVudFRyYW5zbGF0ZTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChwYXJhbXMuZnJlZU1vZGUpIHtcbiAgICBpZiAoY3VycmVudFBvcyA8IC1zd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGN1cnJlbnRQb3MgPiAtc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSB7XG4gICAgICBpZiAoc3dpcGVyLnNsaWRlcy5sZW5ndGggPCBzbmFwR3JpZC5sZW5ndGgpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc25hcEdyaWQubGVuZ3RoIC0gMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtKSB7XG4gICAgICBpZiAoZGF0YS52ZWxvY2l0aWVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdmFyIGxhc3RNb3ZlRXZlbnQgPSBkYXRhLnZlbG9jaXRpZXMucG9wKCk7XG4gICAgICAgIHZhciB2ZWxvY2l0eUV2ZW50ID0gZGF0YS52ZWxvY2l0aWVzLnBvcCgpO1xuICAgICAgICB2YXIgZGlzdGFuY2UgPSBsYXN0TW92ZUV2ZW50LnBvc2l0aW9uIC0gdmVsb2NpdHlFdmVudC5wb3NpdGlvbjtcbiAgICAgICAgdmFyIHRpbWUgPSBsYXN0TW92ZUV2ZW50LnRpbWUgLSB2ZWxvY2l0eUV2ZW50LnRpbWU7XG4gICAgICAgIHN3aXBlci52ZWxvY2l0eSA9IGRpc3RhbmNlIC8gdGltZTtcbiAgICAgICAgc3dpcGVyLnZlbG9jaXR5IC89IDI7XG5cbiAgICAgICAgaWYgKE1hdGguYWJzKHN3aXBlci52ZWxvY2l0eSkgPCBwYXJhbXMuZnJlZU1vZGVNaW5pbXVtVmVsb2NpdHkpIHtcbiAgICAgICAgICBzd2lwZXIudmVsb2NpdHkgPSAwO1xuICAgICAgICB9IC8vIHRoaXMgaW1wbGllcyB0aGF0IHRoZSB1c2VyIHN0b3BwZWQgbW92aW5nIGEgZmluZ2VyIHRoZW4gcmVsZWFzZWQuXG4gICAgICAgIC8vIFRoZXJlIHdvdWxkIGJlIG5vIGV2ZW50cyB3aXRoIGRpc3RhbmNlIHplcm8sIHNvIHRoZSBsYXN0IGV2ZW50IGlzIHN0YWxlLlxuXG5cbiAgICAgICAgaWYgKHRpbWUgPiAxNTAgfHwgbm93KCkgLSBsYXN0TW92ZUV2ZW50LnRpbWUgPiAzMDApIHtcbiAgICAgICAgICBzd2lwZXIudmVsb2NpdHkgPSAwO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIudmVsb2NpdHkgPSAwO1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIudmVsb2NpdHkgKj0gcGFyYW1zLmZyZWVNb2RlTW9tZW50dW1WZWxvY2l0eVJhdGlvO1xuICAgICAgZGF0YS52ZWxvY2l0aWVzLmxlbmd0aCA9IDA7XG4gICAgICB2YXIgbW9tZW50dW1EdXJhdGlvbiA9IDEwMDAgKiBwYXJhbXMuZnJlZU1vZGVNb21lbnR1bVJhdGlvO1xuICAgICAgdmFyIG1vbWVudHVtRGlzdGFuY2UgPSBzd2lwZXIudmVsb2NpdHkgKiBtb21lbnR1bUR1cmF0aW9uO1xuICAgICAgdmFyIG5ld1Bvc2l0aW9uID0gc3dpcGVyLnRyYW5zbGF0ZSArIG1vbWVudHVtRGlzdGFuY2U7XG4gICAgICBpZiAocnRsKSBuZXdQb3NpdGlvbiA9IC1uZXdQb3NpdGlvbjtcbiAgICAgIHZhciBkb0JvdW5jZSA9IGZhbHNlO1xuICAgICAgdmFyIGFmdGVyQm91bmNlUG9zaXRpb247XG4gICAgICB2YXIgYm91bmNlQW1vdW50ID0gTWF0aC5hYnMoc3dpcGVyLnZlbG9jaXR5KSAqIDIwICogcGFyYW1zLmZyZWVNb2RlTW9tZW50dW1Cb3VuY2VSYXRpbztcbiAgICAgIHZhciBuZWVkc0xvb3BGaXg7XG5cbiAgICAgIGlmIChuZXdQb3NpdGlvbiA8IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkge1xuICAgICAgICBpZiAocGFyYW1zLmZyZWVNb2RlTW9tZW50dW1Cb3VuY2UpIHtcbiAgICAgICAgICBpZiAobmV3UG9zaXRpb24gKyBzd2lwZXIubWF4VHJhbnNsYXRlKCkgPCAtYm91bmNlQW1vdW50KSB7XG4gICAgICAgICAgICBuZXdQb3NpdGlvbiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIGJvdW5jZUFtb3VudDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhZnRlckJvdW5jZVBvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICAgICAgICAgIGRvQm91bmNlID0gdHJ1ZTtcbiAgICAgICAgICBkYXRhLmFsbG93TW9tZW50dW1Cb3VuY2UgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcmFtcy5sb29wICYmIHBhcmFtcy5jZW50ZXJlZFNsaWRlcykgbmVlZHNMb29wRml4ID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAobmV3UG9zaXRpb24gPiBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtQm91bmNlKSB7XG4gICAgICAgICAgaWYgKG5ld1Bvc2l0aW9uIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpID4gYm91bmNlQW1vdW50KSB7XG4gICAgICAgICAgICBuZXdQb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKSArIGJvdW5jZUFtb3VudDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhZnRlckJvdW5jZVBvc2l0aW9uID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICAgICAgICAgIGRvQm91bmNlID0gdHJ1ZTtcbiAgICAgICAgICBkYXRhLmFsbG93TW9tZW50dW1Cb3VuY2UgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcmFtcy5sb29wICYmIHBhcmFtcy5jZW50ZXJlZFNsaWRlcykgbmVlZHNMb29wRml4ID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAocGFyYW1zLmZyZWVNb2RlU3RpY2t5KSB7XG4gICAgICAgIHZhciBuZXh0U2xpZGU7XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzbmFwR3JpZC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgIGlmIChzbmFwR3JpZFtqXSA+IC1uZXdQb3NpdGlvbikge1xuICAgICAgICAgICAgbmV4dFNsaWRlID0gajtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChNYXRoLmFicyhzbmFwR3JpZFtuZXh0U2xpZGVdIC0gbmV3UG9zaXRpb24pIDwgTWF0aC5hYnMoc25hcEdyaWRbbmV4dFNsaWRlIC0gMV0gLSBuZXdQb3NpdGlvbikgfHwgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgICAgICBuZXdQb3NpdGlvbiA9IHNuYXBHcmlkW25leHRTbGlkZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3UG9zaXRpb24gPSBzbmFwR3JpZFtuZXh0U2xpZGUgLSAxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5ld1Bvc2l0aW9uID0gLW5ld1Bvc2l0aW9uO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVlZHNMb29wRml4KSB7XG4gICAgICAgIHN3aXBlci5vbmNlKCd0cmFuc2l0aW9uRW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgIH0pO1xuICAgICAgfSAvLyBGaXggZHVyYXRpb25cblxuXG4gICAgICBpZiAoc3dpcGVyLnZlbG9jaXR5ICE9PSAwKSB7XG4gICAgICAgIGlmIChydGwpIHtcbiAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gTWF0aC5hYnMoKC1uZXdQb3NpdGlvbiAtIHN3aXBlci50cmFuc2xhdGUpIC8gc3dpcGVyLnZlbG9jaXR5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gTWF0aC5hYnMoKG5ld1Bvc2l0aW9uIC0gc3dpcGVyLnRyYW5zbGF0ZSkgLyBzd2lwZXIudmVsb2NpdHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcmFtcy5mcmVlTW9kZVN0aWNreSkge1xuICAgICAgICAgIC8vIElmIGZyZWVNb2RlU3RpY2t5IGlzIGFjdGl2ZSBhbmQgdGhlIHVzZXIgZW5kcyBhIHN3aXBlIHdpdGggYSBzbG93LXZlbG9jaXR5XG4gICAgICAgICAgLy8gZXZlbnQsIHRoZW4gZHVyYXRpb25zIGNhbiBiZSAyMCsgc2Vjb25kcyB0byBzbGlkZSBvbmUgKG9yIHplcm8hKSBzbGlkZXMuXG4gICAgICAgICAgLy8gSXQncyBlYXN5IHRvIHNlZSB0aGlzIHdoZW4gc2ltdWxhdGluZyB0b3VjaCB3aXRoIG1vdXNlIGV2ZW50cy4gVG8gZml4IHRoaXMsXG4gICAgICAgICAgLy8gbGltaXQgc2luZ2xlLXNsaWRlIHN3aXBlcyB0byB0aGUgZGVmYXVsdCBzbGlkZSBkdXJhdGlvbi4gVGhpcyBhbHNvIGhhcyB0aGVcbiAgICAgICAgICAvLyBuaWNlIHNpZGUgZWZmZWN0IG9mIG1hdGNoaW5nIHNsaWRlIHNwZWVkIGlmIHRoZSB1c2VyIHN0b3BwZWQgbW92aW5nIGJlZm9yZVxuICAgICAgICAgIC8vIGxpZnRpbmcgZmluZ2VyIG9yIG1vdXNlIHZzLiBtb3Zpbmcgc2xvd2x5IGJlZm9yZSBsaWZ0aW5nIHRoZSBmaW5nZXIvbW91c2UuXG4gICAgICAgICAgLy8gRm9yIGZhc3RlciBzd2lwZXMsIGFsc28gYXBwbHkgbGltaXRzIChhbGJlaXQgaGlnaGVyIG9uZXMpLlxuICAgICAgICAgIHZhciBtb3ZlRGlzdGFuY2UgPSBNYXRoLmFicygocnRsID8gLW5ld1Bvc2l0aW9uIDogbmV3UG9zaXRpb24pIC0gc3dpcGVyLnRyYW5zbGF0ZSk7XG4gICAgICAgICAgdmFyIGN1cnJlbnRTbGlkZVNpemUgPSBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW3N3aXBlci5hY3RpdmVJbmRleF07XG5cbiAgICAgICAgICBpZiAobW92ZURpc3RhbmNlIDwgY3VycmVudFNsaWRlU2l6ZSkge1xuICAgICAgICAgICAgbW9tZW50dW1EdXJhdGlvbiA9IHBhcmFtcy5zcGVlZDtcbiAgICAgICAgICB9IGVsc2UgaWYgKG1vdmVEaXN0YW5jZSA8IDIgKiBjdXJyZW50U2xpZGVTaXplKSB7XG4gICAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gcGFyYW1zLnNwZWVkICogMS41O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gcGFyYW1zLnNwZWVkICogMi41O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwYXJhbXMuZnJlZU1vZGVTdGlja3kpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG9DbG9zZXN0KCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtQm91bmNlICYmIGRvQm91bmNlKSB7XG4gICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhhZnRlckJvdW5jZVBvc2l0aW9uKTtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24obW9tZW50dW1EdXJhdGlvbik7XG4gICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3UG9zaXRpb24pO1xuICAgICAgICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHRydWUsIHN3aXBlci5zd2lwZURpcmVjdGlvbik7XG4gICAgICAgIHN3aXBlci5hbmltYXRpbmcgPSB0cnVlO1xuICAgICAgICAkd3JhcHBlckVsLnRyYW5zaXRpb25FbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIWRhdGEuYWxsb3dNb21lbnR1bUJvdW5jZSkgcmV0dXJuO1xuICAgICAgICAgIHN3aXBlci5lbWl0KCdtb21lbnR1bUJvdW5jZScpO1xuICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHBhcmFtcy5zcGVlZCk7XG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKGFmdGVyQm91bmNlUG9zaXRpb24pO1xuICAgICAgICAgICAgJHdyYXBwZXJFbC50cmFuc2l0aW9uRW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICAgICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwgMCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChzd2lwZXIudmVsb2NpdHkpIHtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKG5ld1Bvc2l0aW9uKTtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24obW9tZW50dW1EdXJhdGlvbik7XG4gICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3UG9zaXRpb24pO1xuICAgICAgICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHRydWUsIHN3aXBlci5zd2lwZURpcmVjdGlvbik7XG5cbiAgICAgICAgaWYgKCFzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG4gICAgICAgICAgJHdyYXBwZXJFbC50cmFuc2l0aW9uRW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhuZXdQb3NpdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICB9IGVsc2UgaWYgKHBhcmFtcy5mcmVlTW9kZVN0aWNreSkge1xuICAgICAgc3dpcGVyLnNsaWRlVG9DbG9zZXN0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFwYXJhbXMuZnJlZU1vZGVNb21lbnR1bSB8fCB0aW1lRGlmZiA+PSBwYXJhbXMubG9uZ1N3aXBlc01zKSB7XG4gICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH0gLy8gRmluZCBjdXJyZW50IHNsaWRlXG5cblxuICB2YXIgc3RvcEluZGV4ID0gMDtcbiAgdmFyIGdyb3VwU2l6ZSA9IHN3aXBlci5zbGlkZXNTaXplc0dyaWRbMF07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSBpIDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCA/IDEgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXApIHtcbiAgICB2YXIgX2luY3JlbWVudCA9IGkgPCBwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwIC0gMSA/IDEgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG5cbiAgICBpZiAodHlwZW9mIHNsaWRlc0dyaWRbaSArIF9pbmNyZW1lbnRdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKGN1cnJlbnRQb3MgPj0gc2xpZGVzR3JpZFtpXSAmJiBjdXJyZW50UG9zIDwgc2xpZGVzR3JpZFtpICsgX2luY3JlbWVudF0pIHtcbiAgICAgICAgc3RvcEluZGV4ID0gaTtcbiAgICAgICAgZ3JvdXBTaXplID0gc2xpZGVzR3JpZFtpICsgX2luY3JlbWVudF0gLSBzbGlkZXNHcmlkW2ldO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY3VycmVudFBvcyA+PSBzbGlkZXNHcmlkW2ldKSB7XG4gICAgICBzdG9wSW5kZXggPSBpO1xuICAgICAgZ3JvdXBTaXplID0gc2xpZGVzR3JpZFtzbGlkZXNHcmlkLmxlbmd0aCAtIDFdIC0gc2xpZGVzR3JpZFtzbGlkZXNHcmlkLmxlbmd0aCAtIDJdO1xuICAgIH1cbiAgfSAvLyBGaW5kIGN1cnJlbnQgc2xpZGUgc2l6ZVxuXG5cbiAgdmFyIHJhdGlvID0gKGN1cnJlbnRQb3MgLSBzbGlkZXNHcmlkW3N0b3BJbmRleF0pIC8gZ3JvdXBTaXplO1xuICB2YXIgaW5jcmVtZW50ID0gc3RvcEluZGV4IDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCAtIDEgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuXG4gIGlmICh0aW1lRGlmZiA+IHBhcmFtcy5sb25nU3dpcGVzTXMpIHtcbiAgICAvLyBMb25nIHRvdWNoZXNcbiAgICBpZiAoIXBhcmFtcy5sb25nU3dpcGVzKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgaWYgKHJhdGlvID49IHBhcmFtcy5sb25nU3dpcGVzUmF0aW8pIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCArIGluY3JlbWVudCk7ZWxzZSBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgIH1cblxuICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICdwcmV2Jykge1xuICAgICAgaWYgKHJhdGlvID4gMSAtIHBhcmFtcy5sb25nU3dpcGVzUmF0aW8pIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCArIGluY3JlbWVudCk7ZWxzZSBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBTaG9ydCBzd2lwZXNcbiAgICBpZiAoIXBhcmFtcy5zaG9ydFN3aXBlcykge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaXNOYXZCdXR0b25UYXJnZXQgPSBzd2lwZXIubmF2aWdhdGlvbiAmJiAoZS50YXJnZXQgPT09IHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCB8fCBlLnRhcmdldCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ucHJldkVsKTtcblxuICAgIGlmICghaXNOYXZCdXR0b25UYXJnZXQpIHtcbiAgICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBpbmNyZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGUudGFyZ2V0ID09PSBzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCArIGluY3JlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgfVxuICB9XG59IiwiaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCAkIGZyb20gJy4uLy4uLy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQgeyBleHRlbmQsIG5vdyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9uVG91Y2hNb3ZlKGV2ZW50KSB7XG4gIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgdG91Y2hlcyA9IHN3aXBlci50b3VjaGVzLFxuICAgICAgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZTtcbiAgdmFyIGUgPSBldmVudDtcbiAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcblxuICBpZiAoIWRhdGEuaXNUb3VjaGVkKSB7XG4gICAgaWYgKGRhdGEuc3RhcnRNb3ZpbmcgJiYgZGF0YS5pc1Njcm9sbGluZykge1xuICAgICAgc3dpcGVyLmVtaXQoJ3RvdWNoTW92ZU9wcG9zaXRlJywgZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGRhdGEuaXNUb3VjaEV2ZW50ICYmIGUudHlwZSAhPT0gJ3RvdWNobW92ZScpIHJldHVybjtcbiAgdmFyIHRhcmdldFRvdWNoID0gZS50eXBlID09PSAndG91Y2htb3ZlJyAmJiBlLnRhcmdldFRvdWNoZXMgJiYgKGUudGFyZ2V0VG91Y2hlc1swXSB8fCBlLmNoYW5nZWRUb3VjaGVzWzBdKTtcbiAgdmFyIHBhZ2VYID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IHRhcmdldFRvdWNoLnBhZ2VYIDogZS5wYWdlWDtcbiAgdmFyIHBhZ2VZID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IHRhcmdldFRvdWNoLnBhZ2VZIDogZS5wYWdlWTtcblxuICBpZiAoZS5wcmV2ZW50ZWRCeU5lc3RlZFN3aXBlcikge1xuICAgIHRvdWNoZXMuc3RhcnRYID0gcGFnZVg7XG4gICAgdG91Y2hlcy5zdGFydFkgPSBwYWdlWTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIXN3aXBlci5hbGxvd1RvdWNoTW92ZSkge1xuICAgIC8vIGlzTW92ZWQgPSB0cnVlO1xuICAgIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG5cbiAgICBpZiAoZGF0YS5pc1RvdWNoZWQpIHtcbiAgICAgIGV4dGVuZCh0b3VjaGVzLCB7XG4gICAgICAgIHN0YXJ0WDogcGFnZVgsXG4gICAgICAgIHN0YXJ0WTogcGFnZVksXG4gICAgICAgIGN1cnJlbnRYOiBwYWdlWCxcbiAgICAgICAgY3VycmVudFk6IHBhZ2VZXG4gICAgICB9KTtcbiAgICAgIGRhdGEudG91Y2hTdGFydFRpbWUgPSBub3coKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZGF0YS5pc1RvdWNoRXZlbnQgJiYgcGFyYW1zLnRvdWNoUmVsZWFzZU9uRWRnZXMgJiYgIXBhcmFtcy5sb29wKSB7XG4gICAgaWYgKHN3aXBlci5pc1ZlcnRpY2FsKCkpIHtcbiAgICAgIC8vIFZlcnRpY2FsXG4gICAgICBpZiAocGFnZVkgPCB0b3VjaGVzLnN0YXJ0WSAmJiBzd2lwZXIudHJhbnNsYXRlIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSB8fCBwYWdlWSA+IHRvdWNoZXMuc3RhcnRZICYmIHN3aXBlci50cmFuc2xhdGUgPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYWdlWCA8IHRvdWNoZXMuc3RhcnRYICYmIHN3aXBlci50cmFuc2xhdGUgPD0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIHx8IHBhZ2VYID4gdG91Y2hlcy5zdGFydFggJiYgc3dpcGVyLnRyYW5zbGF0ZSA+PSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBpZiAoZGF0YS5pc1RvdWNoRXZlbnQgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkge1xuICAgIGlmIChlLnRhcmdldCA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAkKGUudGFyZ2V0KS5pcyhkYXRhLmZvcm1FbGVtZW50cykpIHtcbiAgICAgIGRhdGEuaXNNb3ZlZCA9IHRydWU7XG4gICAgICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkYXRhLmFsbG93VG91Y2hDYWxsYmFja3MpIHtcbiAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlJywgZSk7XG4gIH1cblxuICBpZiAoZS50YXJnZXRUb3VjaGVzICYmIGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPiAxKSByZXR1cm47XG4gIHRvdWNoZXMuY3VycmVudFggPSBwYWdlWDtcbiAgdG91Y2hlcy5jdXJyZW50WSA9IHBhZ2VZO1xuICB2YXIgZGlmZlggPSB0b3VjaGVzLmN1cnJlbnRYIC0gdG91Y2hlcy5zdGFydFg7XG4gIHZhciBkaWZmWSA9IHRvdWNoZXMuY3VycmVudFkgLSB0b3VjaGVzLnN0YXJ0WTtcbiAgaWYgKHN3aXBlci5wYXJhbXMudGhyZXNob2xkICYmIE1hdGguc3FydChNYXRoLnBvdyhkaWZmWCwgMikgKyBNYXRoLnBvdyhkaWZmWSwgMikpIDwgc3dpcGVyLnBhcmFtcy50aHJlc2hvbGQpIHJldHVybjtcblxuICBpZiAodHlwZW9mIGRhdGEuaXNTY3JvbGxpbmcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIHRvdWNoQW5nbGU7XG5cbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIHRvdWNoZXMuY3VycmVudFkgPT09IHRvdWNoZXMuc3RhcnRZIHx8IHN3aXBlci5pc1ZlcnRpY2FsKCkgJiYgdG91Y2hlcy5jdXJyZW50WCA9PT0gdG91Y2hlcy5zdGFydFgpIHtcbiAgICAgIGRhdGEuaXNTY3JvbGxpbmcgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBpZiAoZGlmZlggKiBkaWZmWCArIGRpZmZZICogZGlmZlkgPj0gMjUpIHtcbiAgICAgICAgdG91Y2hBbmdsZSA9IE1hdGguYXRhbjIoTWF0aC5hYnMoZGlmZlkpLCBNYXRoLmFicyhkaWZmWCkpICogMTgwIC8gTWF0aC5QSTtcbiAgICAgICAgZGF0YS5pc1Njcm9sbGluZyA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHRvdWNoQW5nbGUgPiBwYXJhbXMudG91Y2hBbmdsZSA6IDkwIC0gdG91Y2hBbmdsZSA+IHBhcmFtcy50b3VjaEFuZ2xlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3RvdWNoTW92ZU9wcG9zaXRlJywgZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIGRhdGEuc3RhcnRNb3ZpbmcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHRvdWNoZXMuY3VycmVudFggIT09IHRvdWNoZXMuc3RhcnRYIHx8IHRvdWNoZXMuY3VycmVudFkgIT09IHRvdWNoZXMuc3RhcnRZKSB7XG4gICAgICBkYXRhLnN0YXJ0TW92aW5nID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAoZGF0YS5pc1Njcm9sbGluZykge1xuICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCFkYXRhLnN0YXJ0TW92aW5nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcblxuICBpZiAoIXBhcmFtcy5jc3NNb2RlICYmIGUuY2FuY2VsYWJsZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMudG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uICYmICFwYXJhbXMubmVzdGVkKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfVxuXG4gIGlmICghZGF0YS5pc01vdmVkKSB7XG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgIH1cblxuICAgIGRhdGEuc3RhcnRUcmFuc2xhdGUgPSBzd2lwZXIuZ2V0VHJhbnNsYXRlKCk7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG5cbiAgICBpZiAoc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwudHJpZ2dlcignd2Via2l0VHJhbnNpdGlvbkVuZCB0cmFuc2l0aW9uZW5kJyk7XG4gICAgfVxuXG4gICAgZGF0YS5hbGxvd01vbWVudHVtQm91bmNlID0gZmFsc2U7IC8vIEdyYWIgQ3Vyc29yXG5cbiAgICBpZiAocGFyYW1zLmdyYWJDdXJzb3IgJiYgKHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSB8fCBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcih0cnVlKTtcbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVyRmlyc3RNb3ZlJywgZSk7XG4gIH1cblxuICBzd2lwZXIuZW1pdCgnc2xpZGVyTW92ZScsIGUpO1xuICBkYXRhLmlzTW92ZWQgPSB0cnVlO1xuICB2YXIgZGlmZiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IGRpZmZYIDogZGlmZlk7XG4gIHRvdWNoZXMuZGlmZiA9IGRpZmY7XG4gIGRpZmYgKj0gcGFyYW1zLnRvdWNoUmF0aW87XG4gIGlmIChydGwpIGRpZmYgPSAtZGlmZjtcbiAgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID0gZGlmZiA+IDAgPyAncHJldicgOiAnbmV4dCc7XG4gIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRpZmYgKyBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICB2YXIgZGlzYWJsZVBhcmVudFN3aXBlciA9IHRydWU7XG4gIHZhciByZXNpc3RhbmNlUmF0aW8gPSBwYXJhbXMucmVzaXN0YW5jZVJhdGlvO1xuXG4gIGlmIChwYXJhbXMudG91Y2hSZWxlYXNlT25FZGdlcykge1xuICAgIHJlc2lzdGFuY2VSYXRpbyA9IDA7XG4gIH1cblxuICBpZiAoZGlmZiA+IDAgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgZGlzYWJsZVBhcmVudFN3aXBlciA9IGZhbHNlO1xuICAgIGlmIChwYXJhbXMucmVzaXN0YW5jZSkgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIC0gMSArIE1hdGgucG93KC1zd2lwZXIubWluVHJhbnNsYXRlKCkgKyBkYXRhLnN0YXJ0VHJhbnNsYXRlICsgZGlmZiwgcmVzaXN0YW5jZVJhdGlvKTtcbiAgfSBlbHNlIGlmIChkaWZmIDwgMCAmJiBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICBkaXNhYmxlUGFyZW50U3dpcGVyID0gZmFsc2U7XG4gICAgaWYgKHBhcmFtcy5yZXNpc3RhbmNlKSBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgKyAxIC0gTWF0aC5wb3coc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gZGF0YS5zdGFydFRyYW5zbGF0ZSAtIGRpZmYsIHJlc2lzdGFuY2VSYXRpbyk7XG4gIH1cblxuICBpZiAoZGlzYWJsZVBhcmVudFN3aXBlcikge1xuICAgIGUucHJldmVudGVkQnlOZXN0ZWRTd2lwZXIgPSB0cnVlO1xuICB9IC8vIERpcmVjdGlvbnMgbG9ja3NcblxuXG4gIGlmICghc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHtcbiAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICB9XG5cbiAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gZGF0YS5zdGFydFRyYW5zbGF0ZSkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH0gLy8gVGhyZXNob2xkXG5cblxuICBpZiAocGFyYW1zLnRocmVzaG9sZCA+IDApIHtcbiAgICBpZiAoTWF0aC5hYnMoZGlmZikgPiBwYXJhbXMudGhyZXNob2xkIHx8IGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlKSB7XG4gICAgICBpZiAoIWRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlKSB7XG4gICAgICAgIGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlID0gdHJ1ZTtcbiAgICAgICAgdG91Y2hlcy5zdGFydFggPSB0b3VjaGVzLmN1cnJlbnRYO1xuICAgICAgICB0b3VjaGVzLnN0YXJ0WSA9IHRvdWNoZXMuY3VycmVudFk7XG4gICAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gICAgICAgIHRvdWNoZXMuZGlmZiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHRvdWNoZXMuY3VycmVudFggLSB0b3VjaGVzLnN0YXJ0WCA6IHRvdWNoZXMuY3VycmVudFkgLSB0b3VjaGVzLnN0YXJ0WTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGlmICghcGFyYW1zLmZvbGxvd0ZpbmdlciB8fCBwYXJhbXMuY3NzTW9kZSkgcmV0dXJuOyAvLyBVcGRhdGUgYWN0aXZlIGluZGV4IGluIGZyZWUgbW9kZVxuXG4gIGlmIChwYXJhbXMuZnJlZU1vZGUgfHwgcGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgfHwgcGFyYW1zLndhdGNoU2xpZGVzVmlzaWJpbGl0eSkge1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gIH1cblxuICBpZiAocGFyYW1zLmZyZWVNb2RlKSB7XG4gICAgLy8gVmVsb2NpdHlcbiAgICBpZiAoZGF0YS52ZWxvY2l0aWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgZGF0YS52ZWxvY2l0aWVzLnB1c2goe1xuICAgICAgICBwb3NpdGlvbjogdG91Y2hlc1tzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnc3RhcnRYJyA6ICdzdGFydFknXSxcbiAgICAgICAgdGltZTogZGF0YS50b3VjaFN0YXJ0VGltZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZGF0YS52ZWxvY2l0aWVzLnB1c2goe1xuICAgICAgcG9zaXRpb246IHRvdWNoZXNbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2N1cnJlbnRYJyA6ICdjdXJyZW50WSddLFxuICAgICAgdGltZTogbm93KClcbiAgICB9KTtcbiAgfSAvLyBVcGRhdGUgcHJvZ3Jlc3NcblxuXG4gIHN3aXBlci51cGRhdGVQcm9ncmVzcyhkYXRhLmN1cnJlbnRUcmFuc2xhdGUpOyAvLyBVcGRhdGUgdHJhbnNsYXRlXG5cbiAgc3dpcGVyLnNldFRyYW5zbGF0ZShkYXRhLmN1cnJlbnRUcmFuc2xhdGUpO1xufSIsImltcG9ydCB7IGdldFdpbmRvdywgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCAkIGZyb20gJy4uLy4uLy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQgeyBleHRlbmQsIG5vdyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9uVG91Y2hTdGFydChldmVudCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICB2YXIgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgdG91Y2hlcyA9IHN3aXBlci50b3VjaGVzO1xuXG4gIGlmIChzd2lwZXIuYW5pbWF0aW5nICYmIHBhcmFtcy5wcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZSA9IGV2ZW50O1xuICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50O1xuICB2YXIgJHRhcmdldEVsID0gJChlLnRhcmdldCk7XG5cbiAgaWYgKHBhcmFtcy50b3VjaEV2ZW50c1RhcmdldCA9PT0gJ3dyYXBwZXInKSB7XG4gICAgaWYgKCEkdGFyZ2V0RWwuY2xvc2VzdChzd2lwZXIud3JhcHBlckVsKS5sZW5ndGgpIHJldHVybjtcbiAgfVxuXG4gIGRhdGEuaXNUb3VjaEV2ZW50ID0gZS50eXBlID09PSAndG91Y2hzdGFydCc7XG4gIGlmICghZGF0YS5pc1RvdWNoRXZlbnQgJiYgJ3doaWNoJyBpbiBlICYmIGUud2hpY2ggPT09IDMpIHJldHVybjtcbiAgaWYgKCFkYXRhLmlzVG91Y2hFdmVudCAmJiAnYnV0dG9uJyBpbiBlICYmIGUuYnV0dG9uID4gMCkgcmV0dXJuO1xuICBpZiAoZGF0YS5pc1RvdWNoZWQgJiYgZGF0YS5pc01vdmVkKSByZXR1cm47XG5cbiAgaWYgKHBhcmFtcy5ub1N3aXBpbmcgJiYgJHRhcmdldEVsLmNsb3Nlc3QocGFyYW1zLm5vU3dpcGluZ1NlbGVjdG9yID8gcGFyYW1zLm5vU3dpcGluZ1NlbGVjdG9yIDogXCIuXCIgKyBwYXJhbXMubm9Td2lwaW5nQ2xhc3MpWzBdKSB7XG4gICAgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChwYXJhbXMuc3dpcGVIYW5kbGVyKSB7XG4gICAgaWYgKCEkdGFyZ2V0RWwuY2xvc2VzdChwYXJhbXMuc3dpcGVIYW5kbGVyKVswXSkgcmV0dXJuO1xuICB9XG5cbiAgdG91Y2hlcy5jdXJyZW50WCA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgdG91Y2hlcy5jdXJyZW50WSA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcbiAgdmFyIHN0YXJ0WCA9IHRvdWNoZXMuY3VycmVudFg7XG4gIHZhciBzdGFydFkgPSB0b3VjaGVzLmN1cnJlbnRZOyAvLyBEbyBOT1Qgc3RhcnQgaWYgaU9TIGVkZ2Ugc3dpcGUgaXMgZGV0ZWN0ZWQuIE90aGVyd2lzZSBpT1MgYXBwIGNhbm5vdCBzd2lwZS10by1nby1iYWNrIGFueW1vcmVcblxuICB2YXIgZWRnZVN3aXBlRGV0ZWN0aW9uID0gcGFyYW1zLmVkZ2VTd2lwZURldGVjdGlvbiB8fCBwYXJhbXMuaU9TRWRnZVN3aXBlRGV0ZWN0aW9uO1xuICB2YXIgZWRnZVN3aXBlVGhyZXNob2xkID0gcGFyYW1zLmVkZ2VTd2lwZVRocmVzaG9sZCB8fCBwYXJhbXMuaU9TRWRnZVN3aXBlVGhyZXNob2xkO1xuXG4gIGlmIChlZGdlU3dpcGVEZXRlY3Rpb24gJiYgKHN0YXJ0WCA8PSBlZGdlU3dpcGVUaHJlc2hvbGQgfHwgc3RhcnRYID49IHdpbmRvdy5zY3JlZW4ud2lkdGggLSBlZGdlU3dpcGVUaHJlc2hvbGQpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZXh0ZW5kKGRhdGEsIHtcbiAgICBpc1RvdWNoZWQ6IHRydWUsXG4gICAgaXNNb3ZlZDogZmFsc2UsXG4gICAgYWxsb3dUb3VjaENhbGxiYWNrczogdHJ1ZSxcbiAgICBpc1Njcm9sbGluZzogdW5kZWZpbmVkLFxuICAgIHN0YXJ0TW92aW5nOiB1bmRlZmluZWRcbiAgfSk7XG4gIHRvdWNoZXMuc3RhcnRYID0gc3RhcnRYO1xuICB0b3VjaGVzLnN0YXJ0WSA9IHN0YXJ0WTtcbiAgZGF0YS50b3VjaFN0YXJ0VGltZSA9IG5vdygpO1xuICBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7XG4gIHN3aXBlci51cGRhdGVTaXplKCk7XG4gIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9IHVuZGVmaW5lZDtcbiAgaWYgKHBhcmFtcy50aHJlc2hvbGQgPiAwKSBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSA9IGZhbHNlO1xuXG4gIGlmIChlLnR5cGUgIT09ICd0b3VjaHN0YXJ0Jykge1xuICAgIHZhciBwcmV2ZW50RGVmYXVsdCA9IHRydWU7XG4gICAgaWYgKCR0YXJnZXRFbC5pcyhkYXRhLmZvcm1FbGVtZW50cykpIHByZXZlbnREZWZhdWx0ID0gZmFsc2U7XG5cbiAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAkKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpLmlzKGRhdGEuZm9ybUVsZW1lbnRzKSAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSAkdGFyZ2V0RWxbMF0pIHtcbiAgICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpO1xuICAgIH1cblxuICAgIHZhciBzaG91bGRQcmV2ZW50RGVmYXVsdCA9IHByZXZlbnREZWZhdWx0ICYmIHN3aXBlci5hbGxvd1RvdWNoTW92ZSAmJiBwYXJhbXMudG91Y2hTdGFydFByZXZlbnREZWZhdWx0O1xuXG4gICAgaWYgKHBhcmFtcy50b3VjaFN0YXJ0Rm9yY2VQcmV2ZW50RGVmYXVsdCB8fCBzaG91bGRQcmV2ZW50RGVmYXVsdCkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfVxuXG4gIHN3aXBlci5lbWl0KCd0b3VjaFN0YXJ0JywgZSk7XG59IiwiaW1wb3J0IHNldEdyYWJDdXJzb3IgZnJvbSAnLi9zZXRHcmFiQ3Vyc29yJztcbmltcG9ydCB1bnNldEdyYWJDdXJzb3IgZnJvbSAnLi91bnNldEdyYWJDdXJzb3InO1xuZXhwb3J0IGRlZmF1bHQge1xuICBzZXRHcmFiQ3Vyc29yOiBzZXRHcmFiQ3Vyc29yLFxuICB1bnNldEdyYWJDdXJzb3I6IHVuc2V0R3JhYkN1cnNvclxufTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRHcmFiQ3Vyc29yKG1vdmluZykge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgaWYgKHN3aXBlci5zdXBwb3J0LnRvdWNoIHx8ICFzd2lwZXIucGFyYW1zLnNpbXVsYXRlVG91Y2ggfHwgc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCB8fCBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHJldHVybjtcbiAgdmFyIGVsID0gc3dpcGVyLmVsO1xuICBlbC5zdHlsZS5jdXJzb3IgPSAnbW92ZSc7XG4gIGVsLnN0eWxlLmN1cnNvciA9IG1vdmluZyA/ICctd2Via2l0LWdyYWJiaW5nJyA6ICctd2Via2l0LWdyYWInO1xuICBlbC5zdHlsZS5jdXJzb3IgPSBtb3ZpbmcgPyAnLW1vei1ncmFiYmluJyA6ICctbW96LWdyYWInO1xuICBlbC5zdHlsZS5jdXJzb3IgPSBtb3ZpbmcgPyAnZ3JhYmJpbmcnIDogJ2dyYWInO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVuc2V0R3JhYkN1cnNvcigpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG5cbiAgaWYgKHN3aXBlci5zdXBwb3J0LnRvdWNoIHx8IHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuaXNMb2NrZWQgfHwgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3dpcGVyLmVsLnN0eWxlLmN1cnNvciA9ICcnO1xufSIsImltcG9ydCBsb2FkSW1hZ2UgZnJvbSAnLi9sb2FkSW1hZ2UnO1xuaW1wb3J0IHByZWxvYWRJbWFnZXMgZnJvbSAnLi9wcmVsb2FkSW1hZ2VzJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgbG9hZEltYWdlOiBsb2FkSW1hZ2UsXG4gIHByZWxvYWRJbWFnZXM6IHByZWxvYWRJbWFnZXNcbn07IiwiaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgJCBmcm9tICcuLi8uLi8uLi91dGlscy9kb20nO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9hZEltYWdlKGltYWdlRWwsIHNyYywgc3Jjc2V0LCBzaXplcywgY2hlY2tGb3JDb21wbGV0ZSwgY2FsbGJhY2spIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICB2YXIgaW1hZ2U7XG5cbiAgZnVuY3Rpb24gb25SZWFkeSgpIHtcbiAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XG4gIH1cblxuICB2YXIgaXNQaWN0dXJlID0gJChpbWFnZUVsKS5wYXJlbnQoJ3BpY3R1cmUnKVswXTtcblxuICBpZiAoIWlzUGljdHVyZSAmJiAoIWltYWdlRWwuY29tcGxldGUgfHwgIWNoZWNrRm9yQ29tcGxldGUpKSB7XG4gICAgaWYgKHNyYykge1xuICAgICAgaW1hZ2UgPSBuZXcgd2luZG93LkltYWdlKCk7XG4gICAgICBpbWFnZS5vbmxvYWQgPSBvblJlYWR5O1xuICAgICAgaW1hZ2Uub25lcnJvciA9IG9uUmVhZHk7XG5cbiAgICAgIGlmIChzaXplcykge1xuICAgICAgICBpbWFnZS5zaXplcyA9IHNpemVzO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3Jjc2V0KSB7XG4gICAgICAgIGltYWdlLnNyY3NldCA9IHNyY3NldDtcbiAgICAgIH1cblxuICAgICAgaWYgKHNyYykge1xuICAgICAgICBpbWFnZS5zcmMgPSBzcmM7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uUmVhZHkoKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gaW1hZ2UgYWxyZWFkeSBsb2FkZWQuLi5cbiAgICBvblJlYWR5KCk7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcmVsb2FkSW1hZ2VzKCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgc3dpcGVyLmltYWdlc1RvTG9hZCA9IHN3aXBlci4kZWwuZmluZCgnaW1nJyk7XG5cbiAgZnVuY3Rpb24gb25SZWFkeSgpIHtcbiAgICBpZiAodHlwZW9mIHN3aXBlciA9PT0gJ3VuZGVmaW5lZCcgfHwgc3dpcGVyID09PSBudWxsIHx8ICFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIuaW1hZ2VzTG9hZGVkICE9PSB1bmRlZmluZWQpIHN3aXBlci5pbWFnZXNMb2FkZWQgKz0gMTtcblxuICAgIGlmIChzd2lwZXIuaW1hZ2VzTG9hZGVkID09PSBzd2lwZXIuaW1hZ2VzVG9Mb2FkLmxlbmd0aCkge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMudXBkYXRlT25JbWFnZXNSZWFkeSkgc3dpcGVyLnVwZGF0ZSgpO1xuICAgICAgc3dpcGVyLmVtaXQoJ2ltYWdlc1JlYWR5Jyk7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzd2lwZXIuaW1hZ2VzVG9Mb2FkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIGltYWdlRWwgPSBzd2lwZXIuaW1hZ2VzVG9Mb2FkW2ldO1xuICAgIHN3aXBlci5sb2FkSW1hZ2UoaW1hZ2VFbCwgaW1hZ2VFbC5jdXJyZW50U3JjIHx8IGltYWdlRWwuZ2V0QXR0cmlidXRlKCdzcmMnKSwgaW1hZ2VFbC5zcmNzZXQgfHwgaW1hZ2VFbC5nZXRBdHRyaWJ1dGUoJ3NyY3NldCcpLCBpbWFnZUVsLnNpemVzIHx8IGltYWdlRWwuZ2V0QXR0cmlidXRlKCdzaXplcycpLCB0cnVlLCBvblJlYWR5KTtcbiAgfVxufSIsImltcG9ydCBsb29wQ3JlYXRlIGZyb20gJy4vbG9vcENyZWF0ZSc7XG5pbXBvcnQgbG9vcEZpeCBmcm9tICcuL2xvb3BGaXgnO1xuaW1wb3J0IGxvb3BEZXN0cm95IGZyb20gJy4vbG9vcERlc3Ryb3knO1xuZXhwb3J0IGRlZmF1bHQge1xuICBsb29wQ3JlYXRlOiBsb29wQ3JlYXRlLFxuICBsb29wRml4OiBsb29wRml4LFxuICBsb29wRGVzdHJveTogbG9vcERlc3Ryb3lcbn07IiwiaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCAkIGZyb20gJy4uLy4uLy4uL3V0aWxzL2RvbSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsb29wQ3JlYXRlKCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWw7IC8vIFJlbW92ZSBkdXBsaWNhdGVkIHNsaWRlc1xuXG4gICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiLlwiICsgcGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpLnJlbW92ZSgpO1xuICB2YXIgc2xpZGVzID0gJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzKTtcblxuICBpZiAocGFyYW1zLmxvb3BGaWxsR3JvdXBXaXRoQmxhbmspIHtcbiAgICB2YXIgYmxhbmtTbGlkZXNOdW0gPSBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgLSBzbGlkZXMubGVuZ3RoICUgcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuXG4gICAgaWYgKGJsYW5rU2xpZGVzTnVtICE9PSBwYXJhbXMuc2xpZGVzUGVyR3JvdXApIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmxhbmtTbGlkZXNOdW07IGkgKz0gMSkge1xuICAgICAgICB2YXIgYmxhbmtOb2RlID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlQ2xhc3MgKyBcIiBcIiArIHBhcmFtcy5zbGlkZUJsYW5rQ2xhc3MpO1xuICAgICAgICAkd3JhcHBlckVsLmFwcGVuZChibGFua05vZGUpO1xuICAgICAgfVxuXG4gICAgICBzbGlkZXMgPSAkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmICFwYXJhbXMubG9vcGVkU2xpZGVzKSBwYXJhbXMubG9vcGVkU2xpZGVzID0gc2xpZGVzLmxlbmd0aDtcbiAgc3dpcGVyLmxvb3BlZFNsaWRlcyA9IE1hdGguY2VpbChwYXJzZUZsb2F0KHBhcmFtcy5sb29wZWRTbGlkZXMgfHwgcGFyYW1zLnNsaWRlc1BlclZpZXcsIDEwKSk7XG4gIHN3aXBlci5sb29wZWRTbGlkZXMgKz0gcGFyYW1zLmxvb3BBZGRpdGlvbmFsU2xpZGVzO1xuXG4gIGlmIChzd2lwZXIubG9vcGVkU2xpZGVzID4gc2xpZGVzLmxlbmd0aCkge1xuICAgIHN3aXBlci5sb29wZWRTbGlkZXMgPSBzbGlkZXMubGVuZ3RoO1xuICB9XG5cbiAgdmFyIHByZXBlbmRTbGlkZXMgPSBbXTtcbiAgdmFyIGFwcGVuZFNsaWRlcyA9IFtdO1xuICBzbGlkZXMuZWFjaChmdW5jdGlvbiAoZWwsIGluZGV4KSB7XG4gICAgdmFyIHNsaWRlID0gJChlbCk7XG5cbiAgICBpZiAoaW5kZXggPCBzd2lwZXIubG9vcGVkU2xpZGVzKSB7XG4gICAgICBhcHBlbmRTbGlkZXMucHVzaChlbCk7XG4gICAgfVxuXG4gICAgaWYgKGluZGV4IDwgc2xpZGVzLmxlbmd0aCAmJiBpbmRleCA+PSBzbGlkZXMubGVuZ3RoIC0gc3dpcGVyLmxvb3BlZFNsaWRlcykge1xuICAgICAgcHJlcGVuZFNsaWRlcy5wdXNoKGVsKTtcbiAgICB9XG5cbiAgICBzbGlkZS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcsIGluZGV4KTtcbiAgfSk7XG5cbiAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFwcGVuZFNsaWRlcy5sZW5ndGg7IF9pICs9IDEpIHtcbiAgICAkd3JhcHBlckVsLmFwcGVuZCgkKGFwcGVuZFNsaWRlc1tfaV0uY2xvbmVOb2RlKHRydWUpKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpO1xuICB9XG5cbiAgZm9yICh2YXIgX2kyID0gcHJlcGVuZFNsaWRlcy5sZW5ndGggLSAxOyBfaTIgPj0gMDsgX2kyIC09IDEpIHtcbiAgICAkd3JhcHBlckVsLnByZXBlbmQoJChwcmVwZW5kU2xpZGVzW19pMl0uY2xvbmVOb2RlKHRydWUpKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9vcERlc3Ryb3koKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsLFxuICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG4gICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiLlwiICsgcGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MgKyBcIiwuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiLlwiICsgcGFyYW1zLnNsaWRlQmxhbmtDbGFzcykucmVtb3ZlKCk7XG4gIHNsaWRlcy5yZW1vdmVBdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxvb3BGaXgoKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICBzd2lwZXIuZW1pdCgnYmVmb3JlTG9vcEZpeCcpO1xuICB2YXIgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXgsXG4gICAgICBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzLFxuICAgICAgbG9vcGVkU2xpZGVzID0gc3dpcGVyLmxvb3BlZFNsaWRlcyxcbiAgICAgIGFsbG93U2xpZGVQcmV2ID0gc3dpcGVyLmFsbG93U2xpZGVQcmV2LFxuICAgICAgYWxsb3dTbGlkZU5leHQgPSBzd2lwZXIuYWxsb3dTbGlkZU5leHQsXG4gICAgICBzbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZCxcbiAgICAgIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGU7XG4gIHZhciBuZXdJbmRleDtcbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gdHJ1ZTtcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gdHJ1ZTtcbiAgdmFyIHNuYXBUcmFuc2xhdGUgPSAtc25hcEdyaWRbYWN0aXZlSW5kZXhdO1xuICB2YXIgZGlmZiA9IHNuYXBUcmFuc2xhdGUgLSBzd2lwZXIuZ2V0VHJhbnNsYXRlKCk7IC8vIEZpeCBGb3IgTmVnYXRpdmUgT3ZlcnNsaWRpbmdcblxuICBpZiAoYWN0aXZlSW5kZXggPCBsb29wZWRTbGlkZXMpIHtcbiAgICBuZXdJbmRleCA9IHNsaWRlcy5sZW5ndGggLSBsb29wZWRTbGlkZXMgKiAzICsgYWN0aXZlSW5kZXg7XG4gICAgbmV3SW5kZXggKz0gbG9vcGVkU2xpZGVzO1xuICAgIHZhciBzbGlkZUNoYW5nZWQgPSBzd2lwZXIuc2xpZGVUbyhuZXdJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuXG4gICAgaWYgKHNsaWRlQ2hhbmdlZCAmJiBkaWZmICE9PSAwKSB7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKChydGwgPyAtc3dpcGVyLnRyYW5zbGF0ZSA6IHN3aXBlci50cmFuc2xhdGUpIC0gZGlmZik7XG4gICAgfVxuICB9IGVsc2UgaWYgKGFjdGl2ZUluZGV4ID49IHNsaWRlcy5sZW5ndGggLSBsb29wZWRTbGlkZXMpIHtcbiAgICAvLyBGaXggRm9yIFBvc2l0aXZlIE92ZXJzbGlkaW5nXG4gICAgbmV3SW5kZXggPSAtc2xpZGVzLmxlbmd0aCArIGFjdGl2ZUluZGV4ICsgbG9vcGVkU2xpZGVzO1xuICAgIG5ld0luZGV4ICs9IGxvb3BlZFNsaWRlcztcblxuICAgIHZhciBfc2xpZGVDaGFuZ2VkID0gc3dpcGVyLnNsaWRlVG8obmV3SW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcblxuICAgIGlmIChfc2xpZGVDaGFuZ2VkICYmIGRpZmYgIT09IDApIHtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoKHJ0bCA/IC1zd2lwZXIudHJhbnNsYXRlIDogc3dpcGVyLnRyYW5zbGF0ZSkgLSBkaWZmKTtcbiAgICB9XG4gIH1cblxuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSBhbGxvd1NsaWRlUHJldjtcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gYWxsb3dTbGlkZU5leHQ7XG4gIHN3aXBlci5lbWl0KCdsb29wRml4Jyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkU2xpZGUoaW5kZXgsIHNsaWRlcykge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbCxcbiAgICAgIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgdmFyIGFjdGl2ZUluZGV4QnVmZmVyID0gYWN0aXZlSW5kZXg7XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgYWN0aXZlSW5kZXhCdWZmZXIgLT0gc3dpcGVyLmxvb3BlZFNsaWRlcztcbiAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICBzd2lwZXIuc2xpZGVzID0gJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzKTtcbiAgfVxuXG4gIHZhciBiYXNlTGVuZ3RoID0gc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG5cbiAgaWYgKGluZGV4IDw9IDApIHtcbiAgICBzd2lwZXIucHJlcGVuZFNsaWRlKHNsaWRlcyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGluZGV4ID49IGJhc2VMZW5ndGgpIHtcbiAgICBzd2lwZXIuYXBwZW5kU2xpZGUoc2xpZGVzKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleEJ1ZmZlciA+IGluZGV4ID8gYWN0aXZlSW5kZXhCdWZmZXIgKyAxIDogYWN0aXZlSW5kZXhCdWZmZXI7XG4gIHZhciBzbGlkZXNCdWZmZXIgPSBbXTtcblxuICBmb3IgKHZhciBpID0gYmFzZUxlbmd0aCAtIDE7IGkgPj0gaW5kZXg7IGkgLT0gMSkge1xuICAgIHZhciBjdXJyZW50U2xpZGUgPSBzd2lwZXIuc2xpZGVzLmVxKGkpO1xuICAgIGN1cnJlbnRTbGlkZS5yZW1vdmUoKTtcbiAgICBzbGlkZXNCdWZmZXIudW5zaGlmdChjdXJyZW50U2xpZGUpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykge1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBzbGlkZXMubGVuZ3RoOyBfaSArPSAxKSB7XG4gICAgICBpZiAoc2xpZGVzW19pXSkgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzW19pXSk7XG4gICAgfVxuXG4gICAgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleEJ1ZmZlciA+IGluZGV4ID8gYWN0aXZlSW5kZXhCdWZmZXIgKyBzbGlkZXMubGVuZ3RoIDogYWN0aXZlSW5kZXhCdWZmZXI7XG4gIH0gZWxzZSB7XG4gICAgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzKTtcbiAgfVxuXG4gIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IHNsaWRlc0J1ZmZlci5sZW5ndGg7IF9pMiArPSAxKSB7XG4gICAgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzQnVmZmVyW19pMl0pO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgfVxuXG4gIGlmICghKHBhcmFtcy5vYnNlcnZlciAmJiBzd2lwZXIuc3VwcG9ydC5vYnNlcnZlcikpIHtcbiAgICBzd2lwZXIudXBkYXRlKCk7XG4gIH1cblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCArIHN3aXBlci5sb29wZWRTbGlkZXMsIDAsIGZhbHNlKTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCwgMCwgZmFsc2UpO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXBwZW5kU2xpZGUoc2xpZGVzKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsLFxuICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc2xpZGVzID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBzbGlkZXMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHNsaWRlc1tpXSkgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzW2ldKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gIH1cblxuICBpZiAoIShwYXJhbXMub2JzZXJ2ZXIgJiYgc3dpcGVyLnN1cHBvcnQub2JzZXJ2ZXIpKSB7XG4gICAgc3dpcGVyLnVwZGF0ZSgpO1xuICB9XG59IiwiaW1wb3J0IGFwcGVuZFNsaWRlIGZyb20gJy4vYXBwZW5kU2xpZGUnO1xuaW1wb3J0IHByZXBlbmRTbGlkZSBmcm9tICcuL3ByZXBlbmRTbGlkZSc7XG5pbXBvcnQgYWRkU2xpZGUgZnJvbSAnLi9hZGRTbGlkZSc7XG5pbXBvcnQgcmVtb3ZlU2xpZGUgZnJvbSAnLi9yZW1vdmVTbGlkZSc7XG5pbXBvcnQgcmVtb3ZlQWxsU2xpZGVzIGZyb20gJy4vcmVtb3ZlQWxsU2xpZGVzJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgYXBwZW5kU2xpZGU6IGFwcGVuZFNsaWRlLFxuICBwcmVwZW5kU2xpZGU6IHByZXBlbmRTbGlkZSxcbiAgYWRkU2xpZGU6IGFkZFNsaWRlLFxuICByZW1vdmVTbGlkZTogcmVtb3ZlU2xpZGUsXG4gIHJlbW92ZUFsbFNsaWRlczogcmVtb3ZlQWxsU2xpZGVzXG59OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByZXBlbmRTbGlkZShzbGlkZXMpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsLFxuICAgICAgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gIH1cblxuICB2YXIgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleCArIDE7XG5cbiAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoc2xpZGVzW2ldKSAkd3JhcHBlckVsLnByZXBlbmQoc2xpZGVzW2ldKTtcbiAgICB9XG5cbiAgICBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4ICsgc2xpZGVzLmxlbmd0aDtcbiAgfSBlbHNlIHtcbiAgICAkd3JhcHBlckVsLnByZXBlbmQoc2xpZGVzKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gIH1cblxuICBpZiAoIShwYXJhbXMub2JzZXJ2ZXIgJiYgc3dpcGVyLnN1cHBvcnQub2JzZXJ2ZXIpKSB7XG4gICAgc3dpcGVyLnVwZGF0ZSgpO1xuICB9XG5cbiAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXgsIDAsIGZhbHNlKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW1vdmVBbGxTbGlkZXMoKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgc2xpZGVzSW5kZXhlcyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3dpcGVyLnNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlc0luZGV4ZXMucHVzaChpKTtcbiAgfVxuXG4gIHN3aXBlci5yZW1vdmVTbGlkZShzbGlkZXNJbmRleGVzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW1vdmVTbGlkZShzbGlkZXNJbmRleGVzKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbCxcbiAgICAgIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICB2YXIgYWN0aXZlSW5kZXhCdWZmZXIgPSBhY3RpdmVJbmRleDtcblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBhY3RpdmVJbmRleEJ1ZmZlciAtPSBzd2lwZXIubG9vcGVkU2xpZGVzO1xuICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgIHN3aXBlci5zbGlkZXMgPSAkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MpO1xuICB9XG5cbiAgdmFyIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXhCdWZmZXI7XG4gIHZhciBpbmRleFRvUmVtb3ZlO1xuXG4gIGlmICh0eXBlb2Ygc2xpZGVzSW5kZXhlcyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gc2xpZGVzSW5kZXhlcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzSW5kZXhlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaW5kZXhUb1JlbW92ZSA9IHNsaWRlc0luZGV4ZXNbaV07XG4gICAgICBpZiAoc3dpcGVyLnNsaWRlc1tpbmRleFRvUmVtb3ZlXSkgc3dpcGVyLnNsaWRlcy5lcShpbmRleFRvUmVtb3ZlKS5yZW1vdmUoKTtcbiAgICAgIGlmIChpbmRleFRvUmVtb3ZlIDwgbmV3QWN0aXZlSW5kZXgpIG5ld0FjdGl2ZUluZGV4IC09IDE7XG4gICAgfVxuXG4gICAgbmV3QWN0aXZlSW5kZXggPSBNYXRoLm1heChuZXdBY3RpdmVJbmRleCwgMCk7XG4gIH0gZWxzZSB7XG4gICAgaW5kZXhUb1JlbW92ZSA9IHNsaWRlc0luZGV4ZXM7XG4gICAgaWYgKHN3aXBlci5zbGlkZXNbaW5kZXhUb1JlbW92ZV0pIHN3aXBlci5zbGlkZXMuZXEoaW5kZXhUb1JlbW92ZSkucmVtb3ZlKCk7XG4gICAgaWYgKGluZGV4VG9SZW1vdmUgPCBuZXdBY3RpdmVJbmRleCkgbmV3QWN0aXZlSW5kZXggLT0gMTtcbiAgICBuZXdBY3RpdmVJbmRleCA9IE1hdGgubWF4KG5ld0FjdGl2ZUluZGV4LCAwKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gIH1cblxuICBpZiAoIShwYXJhbXMub2JzZXJ2ZXIgJiYgc3dpcGVyLnN1cHBvcnQub2JzZXJ2ZXIpKSB7XG4gICAgc3dpcGVyLnVwZGF0ZSgpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXggKyBzd2lwZXIubG9vcGVkU2xpZGVzLCAwLCBmYWxzZSk7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXgsIDAsIGZhbHNlKTtcbiAgfVxufSIsImltcG9ydCB7IGV4dGVuZCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgdXNlUGFyYW1zOiBmdW5jdGlvbiB1c2VQYXJhbXMoaW5zdGFuY2VQYXJhbXMpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSB0aGlzO1xuICAgIGlmICghaW5zdGFuY2UubW9kdWxlcykgcmV0dXJuO1xuICAgIE9iamVjdC5rZXlzKGluc3RhbmNlLm1vZHVsZXMpLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZU5hbWUpIHtcbiAgICAgIHZhciBtb2R1bGUgPSBpbnN0YW5jZS5tb2R1bGVzW21vZHVsZU5hbWVdOyAvLyBFeHRlbmQgcGFyYW1zXG5cbiAgICAgIGlmIChtb2R1bGUucGFyYW1zKSB7XG4gICAgICAgIGV4dGVuZChpbnN0YW5jZVBhcmFtcywgbW9kdWxlLnBhcmFtcyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gIHVzZU1vZHVsZXM6IGZ1bmN0aW9uIHVzZU1vZHVsZXMobW9kdWxlc1BhcmFtcykge1xuICAgIGlmIChtb2R1bGVzUGFyYW1zID09PSB2b2lkIDApIHtcbiAgICAgIG1vZHVsZXNQYXJhbXMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgaW5zdGFuY2UgPSB0aGlzO1xuICAgIGlmICghaW5zdGFuY2UubW9kdWxlcykgcmV0dXJuO1xuICAgIE9iamVjdC5rZXlzKGluc3RhbmNlLm1vZHVsZXMpLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZU5hbWUpIHtcbiAgICAgIHZhciBtb2R1bGUgPSBpbnN0YW5jZS5tb2R1bGVzW21vZHVsZU5hbWVdO1xuICAgICAgdmFyIG1vZHVsZVBhcmFtcyA9IG1vZHVsZXNQYXJhbXNbbW9kdWxlTmFtZV0gfHwge307IC8vIEFkZCBldmVudCBsaXN0ZW5lcnNcblxuICAgICAgaWYgKG1vZHVsZS5vbiAmJiBpbnN0YW5jZS5vbikge1xuICAgICAgICBPYmplY3Qua2V5cyhtb2R1bGUub24pLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZUV2ZW50TmFtZSkge1xuICAgICAgICAgIGluc3RhbmNlLm9uKG1vZHVsZUV2ZW50TmFtZSwgbW9kdWxlLm9uW21vZHVsZUV2ZW50TmFtZV0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gLy8gTW9kdWxlIGNyZWF0ZSBjYWxsYmFja1xuXG5cbiAgICAgIGlmIChtb2R1bGUuY3JlYXRlKSB7XG4gICAgICAgIG1vZHVsZS5jcmVhdGUuYmluZChpbnN0YW5jZSkobW9kdWxlUGFyYW1zKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufTsiLCJpbXBvcnQgc2xpZGVUbyBmcm9tICcuL3NsaWRlVG8nO1xuaW1wb3J0IHNsaWRlVG9Mb29wIGZyb20gJy4vc2xpZGVUb0xvb3AnO1xuaW1wb3J0IHNsaWRlTmV4dCBmcm9tICcuL3NsaWRlTmV4dCc7XG5pbXBvcnQgc2xpZGVQcmV2IGZyb20gJy4vc2xpZGVQcmV2JztcbmltcG9ydCBzbGlkZVJlc2V0IGZyb20gJy4vc2xpZGVSZXNldCc7XG5pbXBvcnQgc2xpZGVUb0Nsb3Nlc3QgZnJvbSAnLi9zbGlkZVRvQ2xvc2VzdCc7XG5pbXBvcnQgc2xpZGVUb0NsaWNrZWRTbGlkZSBmcm9tICcuL3NsaWRlVG9DbGlja2VkU2xpZGUnO1xuZXhwb3J0IGRlZmF1bHQge1xuICBzbGlkZVRvOiBzbGlkZVRvLFxuICBzbGlkZVRvTG9vcDogc2xpZGVUb0xvb3AsXG4gIHNsaWRlTmV4dDogc2xpZGVOZXh0LFxuICBzbGlkZVByZXY6IHNsaWRlUHJldixcbiAgc2xpZGVSZXNldDogc2xpZGVSZXNldCxcbiAgc2xpZGVUb0Nsb3Nlc3Q6IHNsaWRlVG9DbG9zZXN0LFxuICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBzbGlkZVRvQ2xpY2tlZFNsaWRlXG59OyIsIi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2xpZGVOZXh0KHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gIGlmIChzcGVlZCA9PT0gdm9pZCAwKSB7XG4gICAgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgfVxuXG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cblxuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICBhbmltYXRpbmcgPSBzd2lwZXIuYW5pbWF0aW5nO1xuICB2YXIgaW5jcmVtZW50ID0gc3dpcGVyLmFjdGl2ZUluZGV4IDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCA/IDEgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgaWYgKGFuaW1hdGluZyAmJiBwYXJhbXMubG9vcFByZXZlbnRzU2xpZGUpIHJldHVybiBmYWxzZTtcbiAgICBzd2lwZXIubG9vcEZpeCgpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuICAgIHN3aXBlci5fY2xpZW50TGVmdCA9IHN3aXBlci4kd3JhcHBlckVsWzBdLmNsaWVudExlZnQ7XG4gIH1cblxuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4ICsgaW5jcmVtZW50LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59IiwiLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzbGlkZVByZXYoc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpIHtcbiAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICB9XG5cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIGFuaW1hdGluZyA9IHN3aXBlci5hbmltYXRpbmcsXG4gICAgICBzbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZCxcbiAgICAgIHNsaWRlc0dyaWQgPSBzd2lwZXIuc2xpZGVzR3JpZCxcbiAgICAgIHJ0bFRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGU7XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgaWYgKGFuaW1hdGluZyAmJiBwYXJhbXMubG9vcFByZXZlbnRzU2xpZGUpIHJldHVybiBmYWxzZTtcbiAgICBzd2lwZXIubG9vcEZpeCgpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuICAgIHN3aXBlci5fY2xpZW50TGVmdCA9IHN3aXBlci4kd3JhcHBlckVsWzBdLmNsaWVudExlZnQ7XG4gIH1cblxuICB2YXIgdHJhbnNsYXRlID0gcnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZSh2YWwpIHtcbiAgICBpZiAodmFsIDwgMCkgcmV0dXJuIC1NYXRoLmZsb29yKE1hdGguYWJzKHZhbCkpO1xuICAgIHJldHVybiBNYXRoLmZsb29yKHZhbCk7XG4gIH1cblxuICB2YXIgbm9ybWFsaXplZFRyYW5zbGF0ZSA9IG5vcm1hbGl6ZSh0cmFuc2xhdGUpO1xuICB2YXIgbm9ybWFsaXplZFNuYXBHcmlkID0gc25hcEdyaWQubWFwKGZ1bmN0aW9uICh2YWwpIHtcbiAgICByZXR1cm4gbm9ybWFsaXplKHZhbCk7XG4gIH0pO1xuICB2YXIgY3VycmVudFNuYXAgPSBzbmFwR3JpZFtub3JtYWxpemVkU25hcEdyaWQuaW5kZXhPZihub3JtYWxpemVkVHJhbnNsYXRlKV07XG4gIHZhciBwcmV2U25hcCA9IHNuYXBHcmlkW25vcm1hbGl6ZWRTbmFwR3JpZC5pbmRleE9mKG5vcm1hbGl6ZWRUcmFuc2xhdGUpIC0gMV07XG5cbiAgaWYgKHR5cGVvZiBwcmV2U25hcCA9PT0gJ3VuZGVmaW5lZCcgJiYgcGFyYW1zLmNzc01vZGUpIHtcbiAgICBzbmFwR3JpZC5mb3JFYWNoKGZ1bmN0aW9uIChzbmFwKSB7XG4gICAgICBpZiAoIXByZXZTbmFwICYmIG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gc25hcCkgcHJldlNuYXAgPSBzbmFwO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIHByZXZJbmRleDtcblxuICBpZiAodHlwZW9mIHByZXZTbmFwICE9PSAndW5kZWZpbmVkJykge1xuICAgIHByZXZJbmRleCA9IHNsaWRlc0dyaWQuaW5kZXhPZihwcmV2U25hcCk7XG4gICAgaWYgKHByZXZJbmRleCA8IDApIHByZXZJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCAtIDE7XG4gIH1cblxuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8ocHJldkluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59IiwiLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzbGlkZVJlc2V0KHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gIGlmIChzcGVlZCA9PT0gdm9pZCAwKSB7XG4gICAgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgfVxuXG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cblxuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNsaWRlVG8oaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gIGlmIChpbmRleCA9PT0gdm9pZCAwKSB7XG4gICAgaW5kZXggPSAwO1xuICB9XG5cbiAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICB9XG5cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgc2xpZGVJbmRleCA9IGluZGV4O1xuICBpZiAoc2xpZGVJbmRleCA8IDApIHNsaWRlSW5kZXggPSAwO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIHNuYXBHcmlkID0gc3dpcGVyLnNuYXBHcmlkLFxuICAgICAgc2xpZGVzR3JpZCA9IHN3aXBlci5zbGlkZXNHcmlkLFxuICAgICAgcHJldmlvdXNJbmRleCA9IHN3aXBlci5wcmV2aW91c0luZGV4LFxuICAgICAgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXgsXG4gICAgICBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlLFxuICAgICAgd3JhcHBlckVsID0gc3dpcGVyLndyYXBwZXJFbDtcblxuICBpZiAoc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHNraXAgPSBNYXRoLm1pbihzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCwgc2xpZGVJbmRleCk7XG4gIHZhciBzbmFwSW5kZXggPSBza2lwICsgTWF0aC5mbG9vcigoc2xpZGVJbmRleCAtIHNraXApIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIGlmIChzbmFwSW5kZXggPj0gc25hcEdyaWQubGVuZ3RoKSBzbmFwSW5kZXggPSBzbmFwR3JpZC5sZW5ndGggLSAxO1xuXG4gIGlmICgoYWN0aXZlSW5kZXggfHwgcGFyYW1zLmluaXRpYWxTbGlkZSB8fCAwKSA9PT0gKHByZXZpb3VzSW5kZXggfHwgMCkgJiYgcnVuQ2FsbGJhY2tzKSB7XG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVNsaWRlQ2hhbmdlU3RhcnQnKTtcbiAgfVxuXG4gIHZhciB0cmFuc2xhdGUgPSAtc25hcEdyaWRbc25hcEluZGV4XTsgLy8gVXBkYXRlIHByb2dyZXNzXG5cbiAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHRyYW5zbGF0ZSk7IC8vIE5vcm1hbGl6ZSBzbGlkZUluZGV4XG5cbiAgaWYgKHBhcmFtcy5ub3JtYWxpemVTbGlkZUluZGV4KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoLU1hdGguZmxvb3IodHJhbnNsYXRlICogMTAwKSA+PSBNYXRoLmZsb29yKHNsaWRlc0dyaWRbaV0gKiAxMDApKSB7XG4gICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgfVxuICAgIH1cbiAgfSAvLyBEaXJlY3Rpb25zIGxvY2tzXG5cblxuICBpZiAoc3dpcGVyLmluaXRpYWxpemVkICYmIHNsaWRlSW5kZXggIT09IGFjdGl2ZUluZGV4KSB7XG4gICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZU5leHQgJiYgdHJhbnNsYXRlIDwgc3dpcGVyLnRyYW5zbGF0ZSAmJiB0cmFuc2xhdGUgPCBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlUHJldiAmJiB0cmFuc2xhdGUgPiBzd2lwZXIudHJhbnNsYXRlICYmIHRyYW5zbGF0ZSA+IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkge1xuICAgICAgaWYgKChhY3RpdmVJbmRleCB8fCAwKSAhPT0gc2xpZGVJbmRleCkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHZhciBkaXJlY3Rpb247XG4gIGlmIChzbGlkZUluZGV4ID4gYWN0aXZlSW5kZXgpIGRpcmVjdGlvbiA9ICduZXh0JztlbHNlIGlmIChzbGlkZUluZGV4IDwgYWN0aXZlSW5kZXgpIGRpcmVjdGlvbiA9ICdwcmV2JztlbHNlIGRpcmVjdGlvbiA9ICdyZXNldCc7IC8vIFVwZGF0ZSBJbmRleFxuXG4gIGlmIChydGwgJiYgLXRyYW5zbGF0ZSA9PT0gc3dpcGVyLnRyYW5zbGF0ZSB8fCAhcnRsICYmIHRyYW5zbGF0ZSA9PT0gc3dpcGVyLnRyYW5zbGF0ZSkge1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleChzbGlkZUluZGV4KTsgLy8gVXBkYXRlIEhlaWdodFxuXG4gICAgaWYgKHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgIH1cblxuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG5cbiAgICBpZiAocGFyYW1zLmVmZmVjdCAhPT0gJ3NsaWRlJykge1xuICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUpO1xuICAgIH1cblxuICAgIGlmIChkaXJlY3Rpb24gIT09ICdyZXNldCcpIHtcbiAgICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHZhciBpc0ggPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG4gICAgdmFyIHQgPSAtdHJhbnNsYXRlO1xuXG4gICAgaWYgKHJ0bCkge1xuICAgICAgdCA9IHdyYXBwZXJFbC5zY3JvbGxXaWR0aCAtIHdyYXBwZXJFbC5vZmZzZXRXaWR0aCAtIHQ7XG4gICAgfVxuXG4gICAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgICB3cmFwcGVyRWxbaXNIID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gdDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBpZiAod3JhcHBlckVsLnNjcm9sbFRvKSB7XG4gICAgICAgIHZhciBfd3JhcHBlckVsJHNjcm9sbFRvO1xuXG4gICAgICAgIHdyYXBwZXJFbC5zY3JvbGxUbygoX3dyYXBwZXJFbCRzY3JvbGxUbyA9IHt9LCBfd3JhcHBlckVsJHNjcm9sbFRvW2lzSCA/ICdsZWZ0JyA6ICd0b3AnXSA9IHQsIF93cmFwcGVyRWwkc2Nyb2xsVG8uYmVoYXZpb3IgPSAnc21vb3RoJywgX3dyYXBwZXJFbCRzY3JvbGxUbykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSk7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KHNsaWRlSW5kZXgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7XG4gICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHNwZWVkKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSk7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KHNsaWRlSW5kZXgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7XG4gICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG5cbiAgICBpZiAoIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgIHN3aXBlci5hbmltYXRpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAoIXN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCkge1xuICAgICAgICBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKGUpIHtcbiAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzKSByZXR1cm47XG4gICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2Via2l0VHJhbnNpdGlvbkVuZCcsIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgICAgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gbnVsbDtcbiAgICAgICAgICBkZWxldGUgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kO1xuICAgICAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0uYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKCd3ZWJraXRUcmFuc2l0aW9uRW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn0iLCJpbXBvcnQgJCBmcm9tICcuLi8uLi8uLi91dGlscy9kb20nO1xuaW1wb3J0IHsgbmV4dFRpY2sgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzbGlkZVRvQ2xpY2tlZFNsaWRlKCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWw7XG4gIHZhciBzbGlkZXNQZXJWaWV3ID0gcGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyA/IHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpIDogcGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gIHZhciBzbGlkZVRvSW5kZXggPSBzd2lwZXIuY2xpY2tlZEluZGV4O1xuICB2YXIgcmVhbEluZGV4O1xuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nKSByZXR1cm47XG4gICAgcmVhbEluZGV4ID0gcGFyc2VJbnQoJChzd2lwZXIuY2xpY2tlZFNsaWRlKS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG5cbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBpZiAoc2xpZGVUb0luZGV4IDwgc3dpcGVyLmxvb3BlZFNsaWRlcyAtIHNsaWRlc1BlclZpZXcgLyAyIHx8IHNsaWRlVG9JbmRleCA+IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gc3dpcGVyLmxvb3BlZFNsaWRlcyArIHNsaWRlc1BlclZpZXcgLyAyKSB7XG4gICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgIHNsaWRlVG9JbmRleCA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIHJlYWxJbmRleCArIFwiXFxcIl06bm90KC5cIiArIHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzICsgXCIpXCIpLmVxKDApLmluZGV4KCk7XG4gICAgICAgIG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzbGlkZVRvSW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIHNsaWRlc1BlclZpZXcpIHtcbiAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICBzbGlkZVRvSW5kZXggPSAkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MgKyBcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyByZWFsSW5kZXggKyBcIlxcXCJdOm5vdCguXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArIFwiKVwiKS5lcSgwKS5pbmRleCgpO1xuICAgICAgbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gIH1cbn0iLCIvKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNsaWRlVG9DbG9zZXN0KHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsLCB0aHJlc2hvbGQpIHtcbiAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICB9XG5cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0aHJlc2hvbGQgPT09IHZvaWQgMCkge1xuICAgIHRocmVzaG9sZCA9IDAuNTtcbiAgfVxuXG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgaW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gIHZhciBza2lwID0gTWF0aC5taW4oc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIGluZGV4KTtcbiAgdmFyIHNuYXBJbmRleCA9IHNraXAgKyBNYXRoLmZsb29yKChpbmRleCAtIHNraXApIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIHZhciB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuXG4gIGlmICh0cmFuc2xhdGUgPj0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF0pIHtcbiAgICAvLyBUaGUgY3VycmVudCB0cmFuc2xhdGUgaXMgb24gb3IgYWZ0ZXIgdGhlIGN1cnJlbnQgc25hcCBpbmRleCwgc28gdGhlIGNob2ljZVxuICAgIC8vIGlzIGJldHdlZW4gdGhlIGN1cnJlbnQgaW5kZXggYW5kIHRoZSBvbmUgYWZ0ZXIgaXQuXG4gICAgdmFyIGN1cnJlbnRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF07XG4gICAgdmFyIG5leHRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleCArIDFdO1xuXG4gICAgaWYgKHRyYW5zbGF0ZSAtIGN1cnJlbnRTbmFwID4gKG5leHRTbmFwIC0gY3VycmVudFNuYXApICogdGhyZXNob2xkKSB7XG4gICAgICBpbmRleCArPSBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBUaGUgY3VycmVudCB0cmFuc2xhdGUgaXMgYmVmb3JlIHRoZSBjdXJyZW50IHNuYXAgaW5kZXgsIHNvIHRoZSBjaG9pY2VcbiAgICAvLyBpcyBiZXR3ZWVuIHRoZSBjdXJyZW50IGluZGV4IGFuZCB0aGUgb25lIGJlZm9yZSBpdC5cbiAgICB2YXIgcHJldlNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4IC0gMV07XG4gICAgdmFyIF9jdXJyZW50U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXhdO1xuXG4gICAgaWYgKHRyYW5zbGF0ZSAtIHByZXZTbmFwIDw9IChfY3VycmVudFNuYXAgLSBwcmV2U25hcCkgKiB0aHJlc2hvbGQpIHtcbiAgICAgIGluZGV4IC09IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgfVxuICB9XG5cbiAgaW5kZXggPSBNYXRoLm1heChpbmRleCwgMCk7XG4gIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHN3aXBlci5zbGlkZXNHcmlkLmxlbmd0aCAtIDEpO1xuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzbGlkZVRvTG9vcChpbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpIHtcbiAgaWYgKGluZGV4ID09PSB2b2lkIDApIHtcbiAgICBpbmRleCA9IDA7XG4gIH1cblxuICBpZiAoc3BlZWQgPT09IHZvaWQgMCkge1xuICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gIH1cblxuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG5cbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBuZXdJbmRleCA9IGluZGV4O1xuXG4gIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICBuZXdJbmRleCArPSBzd2lwZXIubG9vcGVkU2xpZGVzO1xuICB9XG5cbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKG5ld0luZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59IiwiaW1wb3J0IHNldFRyYW5zaXRpb24gZnJvbSAnLi9zZXRUcmFuc2l0aW9uJztcbmltcG9ydCB0cmFuc2l0aW9uU3RhcnQgZnJvbSAnLi90cmFuc2l0aW9uU3RhcnQnO1xuaW1wb3J0IHRyYW5zaXRpb25FbmQgZnJvbSAnLi90cmFuc2l0aW9uRW5kJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgc2V0VHJhbnNpdGlvbjogc2V0VHJhbnNpdGlvbixcbiAgdHJhbnNpdGlvblN0YXJ0OiB0cmFuc2l0aW9uU3RhcnQsXG4gIHRyYW5zaXRpb25FbmQ6IHRyYW5zaXRpb25FbmRcbn07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbiwgYnlDb250cm9sbGVyKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuXG4gIGlmICghc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgc3dpcGVyLiR3cmFwcGVyRWwudHJhbnNpdGlvbihkdXJhdGlvbik7XG4gIH1cblxuICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNpdGlvbicsIGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pIHtcbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXgsXG4gICAgICBwcmV2aW91c0luZGV4ID0gc3dpcGVyLnByZXZpb3VzSW5kZXgsXG4gICAgICBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBzd2lwZXIuYW5pbWF0aW5nID0gZmFsc2U7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgdmFyIGRpciA9IGRpcmVjdGlvbjtcblxuICBpZiAoIWRpcikge1xuICAgIGlmIChhY3RpdmVJbmRleCA+IHByZXZpb3VzSW5kZXgpIGRpciA9ICduZXh0JztlbHNlIGlmIChhY3RpdmVJbmRleCA8IHByZXZpb3VzSW5kZXgpIGRpciA9ICdwcmV2JztlbHNlIGRpciA9ICdyZXNldCc7XG4gIH1cblxuICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvbkVuZCcpO1xuXG4gIGlmIChydW5DYWxsYmFja3MgJiYgYWN0aXZlSW5kZXggIT09IHByZXZpb3VzSW5kZXgpIHtcbiAgICBpZiAoZGlyID09PSAncmVzZXQnKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnc2xpZGVSZXNldFRyYW5zaXRpb25FbmQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVDaGFuZ2VUcmFuc2l0aW9uRW5kJyk7XG5cbiAgICBpZiAoZGlyID09PSAnbmV4dCcpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdzbGlkZU5leHRUcmFuc2l0aW9uRW5kJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5lbWl0KCdzbGlkZVByZXZUcmFuc2l0aW9uRW5kJyk7XG4gICAgfVxuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKSB7XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cblxuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4LFxuICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIHByZXZpb3VzSW5kZXggPSBzd2lwZXIucHJldmlvdXNJbmRleDtcbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG5cbiAgaWYgKHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgc3dpcGVyLnVwZGF0ZUF1dG9IZWlnaHQoKTtcbiAgfVxuXG4gIHZhciBkaXIgPSBkaXJlY3Rpb247XG5cbiAgaWYgKCFkaXIpIHtcbiAgICBpZiAoYWN0aXZlSW5kZXggPiBwcmV2aW91c0luZGV4KSBkaXIgPSAnbmV4dCc7ZWxzZSBpZiAoYWN0aXZlSW5kZXggPCBwcmV2aW91c0luZGV4KSBkaXIgPSAncHJldic7ZWxzZSBkaXIgPSAncmVzZXQnO1xuICB9XG5cbiAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25TdGFydCcpO1xuXG4gIGlmIChydW5DYWxsYmFja3MgJiYgYWN0aXZlSW5kZXggIT09IHByZXZpb3VzSW5kZXgpIHtcbiAgICBpZiAoZGlyID09PSAncmVzZXQnKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnc2xpZGVSZXNldFRyYW5zaXRpb25TdGFydCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCdzbGlkZUNoYW5nZVRyYW5zaXRpb25TdGFydCcpO1xuXG4gICAgaWYgKGRpciA9PT0gJ25leHQnKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnc2xpZGVOZXh0VHJhbnNpdGlvblN0YXJ0Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5lbWl0KCdzbGlkZVByZXZUcmFuc2l0aW9uU3RhcnQnKTtcbiAgICB9XG4gIH1cbn0iLCJpbXBvcnQgeyBnZXRUcmFuc2xhdGUgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTd2lwZXJUcmFuc2xhdGUoYXhpcykge1xuICBpZiAoYXhpcyA9PT0gdm9pZCAwKSB7XG4gICAgYXhpcyA9IHRoaXMuaXNIb3Jpem9udGFsKCkgPyAneCcgOiAneSc7XG4gIH1cblxuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlLFxuICAgICAgdHJhbnNsYXRlID0gc3dpcGVyLnRyYW5zbGF0ZSxcbiAgICAgICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcblxuICBpZiAocGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUpIHtcbiAgICByZXR1cm4gcnRsID8gLXRyYW5zbGF0ZSA6IHRyYW5zbGF0ZTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHJldHVybiB0cmFuc2xhdGU7XG4gIH1cblxuICB2YXIgY3VycmVudFRyYW5zbGF0ZSA9IGdldFRyYW5zbGF0ZSgkd3JhcHBlckVsWzBdLCBheGlzKTtcbiAgaWYgKHJ0bCkgY3VycmVudFRyYW5zbGF0ZSA9IC1jdXJyZW50VHJhbnNsYXRlO1xuICByZXR1cm4gY3VycmVudFRyYW5zbGF0ZSB8fCAwO1xufSIsImltcG9ydCBnZXRUcmFuc2xhdGUgZnJvbSAnLi9nZXRUcmFuc2xhdGUnO1xuaW1wb3J0IHNldFRyYW5zbGF0ZSBmcm9tICcuL3NldFRyYW5zbGF0ZSc7XG5pbXBvcnQgbWluVHJhbnNsYXRlIGZyb20gJy4vbWluVHJhbnNsYXRlJztcbmltcG9ydCBtYXhUcmFuc2xhdGUgZnJvbSAnLi9tYXhUcmFuc2xhdGUnO1xuaW1wb3J0IHRyYW5zbGF0ZVRvIGZyb20gJy4vdHJhbnNsYXRlVG8nO1xuZXhwb3J0IGRlZmF1bHQge1xuICBnZXRUcmFuc2xhdGU6IGdldFRyYW5zbGF0ZSxcbiAgc2V0VHJhbnNsYXRlOiBzZXRUcmFuc2xhdGUsXG4gIG1pblRyYW5zbGF0ZTogbWluVHJhbnNsYXRlLFxuICBtYXhUcmFuc2xhdGU6IG1heFRyYW5zbGF0ZSxcbiAgdHJhbnNsYXRlVG86IHRyYW5zbGF0ZVRvXG59OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1heFRyYW5zbGF0ZSgpIHtcbiAgcmV0dXJuIC10aGlzLnNuYXBHcmlkW3RoaXMuc25hcEdyaWQubGVuZ3RoIC0gMV07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWluVHJhbnNsYXRlKCkge1xuICByZXR1cm4gLXRoaXMuc25hcEdyaWRbMF07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSxcbiAgICAgIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWwsXG4gICAgICB3cmFwcGVyRWwgPSBzd2lwZXIud3JhcHBlckVsLFxuICAgICAgcHJvZ3Jlc3MgPSBzd2lwZXIucHJvZ3Jlc3M7XG4gIHZhciB4ID0gMDtcbiAgdmFyIHkgPSAwO1xuICB2YXIgeiA9IDA7XG5cbiAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgIHggPSBydGwgPyAtdHJhbnNsYXRlIDogdHJhbnNsYXRlO1xuICB9IGVsc2Uge1xuICAgIHkgPSB0cmFuc2xhdGU7XG4gIH1cblxuICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykge1xuICAgIHggPSBNYXRoLmZsb29yKHgpO1xuICAgIHkgPSBNYXRoLmZsb29yKHkpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgd3JhcHBlckVsW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IC14IDogLXk7XG4gIH0gZWxzZSBpZiAoIXBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB7XG4gICAgJHdyYXBwZXJFbC50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZChcIiArIHggKyBcInB4LCBcIiArIHkgKyBcInB4LCBcIiArIHogKyBcInB4KVwiKTtcbiAgfVxuXG4gIHN3aXBlci5wcmV2aW91c1RyYW5zbGF0ZSA9IHN3aXBlci50cmFuc2xhdGU7XG4gIHN3aXBlci50cmFuc2xhdGUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB4IDogeTsgLy8gQ2hlY2sgaWYgd2UgbmVlZCB0byB1cGRhdGUgcHJvZ3Jlc3NcblxuICB2YXIgbmV3UHJvZ3Jlc3M7XG4gIHZhciB0cmFuc2xhdGVzRGlmZiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKTtcblxuICBpZiAodHJhbnNsYXRlc0RpZmYgPT09IDApIHtcbiAgICBuZXdQcm9ncmVzcyA9IDA7XG4gIH0gZWxzZSB7XG4gICAgbmV3UHJvZ3Jlc3MgPSAodHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAvIHRyYW5zbGF0ZXNEaWZmO1xuICB9XG5cbiAgaWYgKG5ld1Byb2dyZXNzICE9PSBwcm9ncmVzcykge1xuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyh0cmFuc2xhdGUpO1xuICB9XG5cbiAgc3dpcGVyLmVtaXQoJ3NldFRyYW5zbGF0ZScsIHN3aXBlci50cmFuc2xhdGUsIGJ5Q29udHJvbGxlcik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNsYXRlVG8odHJhbnNsYXRlLCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCB0cmFuc2xhdGVCb3VuZHMsIGludGVybmFsKSB7XG4gIGlmICh0cmFuc2xhdGUgPT09IHZvaWQgMCkge1xuICAgIHRyYW5zbGF0ZSA9IDA7XG4gIH1cblxuICBpZiAoc3BlZWQgPT09IHZvaWQgMCkge1xuICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gIH1cblxuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG5cbiAgaWYgKHRyYW5zbGF0ZUJvdW5kcyA9PT0gdm9pZCAwKSB7XG4gICAgdHJhbnNsYXRlQm91bmRzID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIHdyYXBwZXJFbCA9IHN3aXBlci53cmFwcGVyRWw7XG5cbiAgaWYgKHN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBtaW5UcmFuc2xhdGUgPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gIHZhciBtYXhUcmFuc2xhdGUgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gIHZhciBuZXdUcmFuc2xhdGU7XG4gIGlmICh0cmFuc2xhdGVCb3VuZHMgJiYgdHJhbnNsYXRlID4gbWluVHJhbnNsYXRlKSBuZXdUcmFuc2xhdGUgPSBtaW5UcmFuc2xhdGU7ZWxzZSBpZiAodHJhbnNsYXRlQm91bmRzICYmIHRyYW5zbGF0ZSA8IG1heFRyYW5zbGF0ZSkgbmV3VHJhbnNsYXRlID0gbWF4VHJhbnNsYXRlO2Vsc2UgbmV3VHJhbnNsYXRlID0gdHJhbnNsYXRlOyAvLyBVcGRhdGUgcHJvZ3Jlc3NcblxuICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MobmV3VHJhbnNsYXRlKTtcblxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICB2YXIgaXNIID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpO1xuXG4gICAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgICB3cmFwcGVyRWxbaXNIID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gLW5ld1RyYW5zbGF0ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBpZiAod3JhcHBlckVsLnNjcm9sbFRvKSB7XG4gICAgICAgIHZhciBfd3JhcHBlckVsJHNjcm9sbFRvO1xuXG4gICAgICAgIHdyYXBwZXJFbC5zY3JvbGxUbygoX3dyYXBwZXJFbCRzY3JvbGxUbyA9IHt9LCBfd3JhcHBlckVsJHNjcm9sbFRvW2lzSCA/ICdsZWZ0JyA6ICd0b3AnXSA9IC1uZXdUcmFuc2xhdGUsIF93cmFwcGVyRWwkc2Nyb2xsVG8uYmVoYXZpb3IgPSAnc21vb3RoJywgX3dyYXBwZXJFbCRzY3JvbGxUbykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IC1uZXdUcmFuc2xhdGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1RyYW5zbGF0ZSk7XG5cbiAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgICAgIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uRW5kJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHNwZWVkKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1RyYW5zbGF0ZSk7XG5cbiAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgICAgIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uU3RhcnQnKTtcbiAgICB9XG5cbiAgICBpZiAoIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgIHN3aXBlci5hbmltYXRpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAoIXN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpIHtcbiAgICAgICAgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoZSkge1xuICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjtcbiAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2Via2l0VHJhbnNpdGlvbkVuZCcsIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBudWxsO1xuICAgICAgICAgIGRlbGV0ZSBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kO1xuXG4gICAgICAgICAgaWYgKHJ1bkNhbGxiYWNrcykge1xuICAgICAgICAgICAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25FbmQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn0iLCJpbXBvcnQgdXBkYXRlU2l6ZSBmcm9tICcuL3VwZGF0ZVNpemUnO1xuaW1wb3J0IHVwZGF0ZVNsaWRlcyBmcm9tICcuL3VwZGF0ZVNsaWRlcyc7XG5pbXBvcnQgdXBkYXRlQXV0b0hlaWdodCBmcm9tICcuL3VwZGF0ZUF1dG9IZWlnaHQnO1xuaW1wb3J0IHVwZGF0ZVNsaWRlc09mZnNldCBmcm9tICcuL3VwZGF0ZVNsaWRlc09mZnNldCc7XG5pbXBvcnQgdXBkYXRlU2xpZGVzUHJvZ3Jlc3MgZnJvbSAnLi91cGRhdGVTbGlkZXNQcm9ncmVzcyc7XG5pbXBvcnQgdXBkYXRlUHJvZ3Jlc3MgZnJvbSAnLi91cGRhdGVQcm9ncmVzcyc7XG5pbXBvcnQgdXBkYXRlU2xpZGVzQ2xhc3NlcyBmcm9tICcuL3VwZGF0ZVNsaWRlc0NsYXNzZXMnO1xuaW1wb3J0IHVwZGF0ZUFjdGl2ZUluZGV4IGZyb20gJy4vdXBkYXRlQWN0aXZlSW5kZXgnO1xuaW1wb3J0IHVwZGF0ZUNsaWNrZWRTbGlkZSBmcm9tICcuL3VwZGF0ZUNsaWNrZWRTbGlkZSc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIHVwZGF0ZVNpemU6IHVwZGF0ZVNpemUsXG4gIHVwZGF0ZVNsaWRlczogdXBkYXRlU2xpZGVzLFxuICB1cGRhdGVBdXRvSGVpZ2h0OiB1cGRhdGVBdXRvSGVpZ2h0LFxuICB1cGRhdGVTbGlkZXNPZmZzZXQ6IHVwZGF0ZVNsaWRlc09mZnNldCxcbiAgdXBkYXRlU2xpZGVzUHJvZ3Jlc3M6IHVwZGF0ZVNsaWRlc1Byb2dyZXNzLFxuICB1cGRhdGVQcm9ncmVzczogdXBkYXRlUHJvZ3Jlc3MsXG4gIHVwZGF0ZVNsaWRlc0NsYXNzZXM6IHVwZGF0ZVNsaWRlc0NsYXNzZXMsXG4gIHVwZGF0ZUFjdGl2ZUluZGV4OiB1cGRhdGVBY3RpdmVJbmRleCxcbiAgdXBkYXRlQ2xpY2tlZFNsaWRlOiB1cGRhdGVDbGlja2VkU2xpZGVcbn07IiwiaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlQWN0aXZlSW5kZXgobmV3QWN0aXZlSW5kZXgpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICB2YXIgc2xpZGVzR3JpZCA9IHN3aXBlci5zbGlkZXNHcmlkLFxuICAgICAgc25hcEdyaWQgPSBzd2lwZXIuc25hcEdyaWQsXG4gICAgICBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgcHJldmlvdXNJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCxcbiAgICAgIHByZXZpb3VzUmVhbEluZGV4ID0gc3dpcGVyLnJlYWxJbmRleCxcbiAgICAgIHByZXZpb3VzU25hcEluZGV4ID0gc3dpcGVyLnNuYXBJbmRleDtcbiAgdmFyIGFjdGl2ZUluZGV4ID0gbmV3QWN0aXZlSW5kZXg7XG4gIHZhciBzbmFwSW5kZXg7XG5cbiAgaWYgKHR5cGVvZiBhY3RpdmVJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlc0dyaWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgMV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSAmJiB0cmFuc2xhdGUgPCBzbGlkZXNHcmlkW2kgKyAxXSAtIChzbGlkZXNHcmlkW2kgKyAxXSAtIHNsaWRlc0dyaWRbaV0pIC8gMikge1xuICAgICAgICAgIGFjdGl2ZUluZGV4ID0gaTtcbiAgICAgICAgfSBlbHNlIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSAmJiB0cmFuc2xhdGUgPCBzbGlkZXNHcmlkW2kgKyAxXSkge1xuICAgICAgICAgIGFjdGl2ZUluZGV4ID0gaSArIDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0pIHtcbiAgICAgICAgYWN0aXZlSW5kZXggPSBpO1xuICAgICAgfVxuICAgIH0gLy8gTm9ybWFsaXplIHNsaWRlSW5kZXhcblxuXG4gICAgaWYgKHBhcmFtcy5ub3JtYWxpemVTbGlkZUluZGV4KSB7XG4gICAgICBpZiAoYWN0aXZlSW5kZXggPCAwIHx8IHR5cGVvZiBhY3RpdmVJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIGFjdGl2ZUluZGV4ID0gMDtcbiAgICB9XG4gIH1cblxuICBpZiAoc25hcEdyaWQuaW5kZXhPZih0cmFuc2xhdGUpID49IDApIHtcbiAgICBzbmFwSW5kZXggPSBzbmFwR3JpZC5pbmRleE9mKHRyYW5zbGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHNraXAgPSBNYXRoLm1pbihwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBhY3RpdmVJbmRleCk7XG4gICAgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKGFjdGl2ZUluZGV4IC0gc2tpcCkgLyBwYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICB9XG5cbiAgaWYgKHNuYXBJbmRleCA+PSBzbmFwR3JpZC5sZW5ndGgpIHNuYXBJbmRleCA9IHNuYXBHcmlkLmxlbmd0aCAtIDE7XG5cbiAgaWYgKGFjdGl2ZUluZGV4ID09PSBwcmV2aW91c0luZGV4KSB7XG4gICAgaWYgKHNuYXBJbmRleCAhPT0gcHJldmlvdXNTbmFwSW5kZXgpIHtcbiAgICAgIHN3aXBlci5zbmFwSW5kZXggPSBzbmFwSW5kZXg7XG4gICAgICBzd2lwZXIuZW1pdCgnc25hcEluZGV4Q2hhbmdlJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9IC8vIEdldCByZWFsIGluZGV4XG5cblxuICB2YXIgcmVhbEluZGV4ID0gcGFyc2VJbnQoc3dpcGVyLnNsaWRlcy5lcShhY3RpdmVJbmRleCkuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSB8fCBhY3RpdmVJbmRleCwgMTApO1xuICBleHRlbmQoc3dpcGVyLCB7XG4gICAgc25hcEluZGV4OiBzbmFwSW5kZXgsXG4gICAgcmVhbEluZGV4OiByZWFsSW5kZXgsXG4gICAgcHJldmlvdXNJbmRleDogcHJldmlvdXNJbmRleCxcbiAgICBhY3RpdmVJbmRleDogYWN0aXZlSW5kZXhcbiAgfSk7XG4gIHN3aXBlci5lbWl0KCdhY3RpdmVJbmRleENoYW5nZScpO1xuICBzd2lwZXIuZW1pdCgnc25hcEluZGV4Q2hhbmdlJyk7XG5cbiAgaWYgKHByZXZpb3VzUmVhbEluZGV4ICE9PSByZWFsSW5kZXgpIHtcbiAgICBzd2lwZXIuZW1pdCgncmVhbEluZGV4Q2hhbmdlJyk7XG4gIH1cblxuICBpZiAoc3dpcGVyLmluaXRpYWxpemVkIHx8IHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KSB7XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlQ2hhbmdlJyk7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVBdXRvSGVpZ2h0KHNwZWVkKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgYWN0aXZlU2xpZGVzID0gW107XG4gIHZhciBuZXdIZWlnaHQgPSAwO1xuICB2YXIgaTtcblxuICBpZiAodHlwZW9mIHNwZWVkID09PSAnbnVtYmVyJykge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHNwZWVkKTtcbiAgfSBlbHNlIGlmIChzcGVlZCA9PT0gdHJ1ZSkge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHN3aXBlci5wYXJhbXMuc3BlZWQpO1xuICB9IC8vIEZpbmQgc2xpZGVzIGN1cnJlbnRseSBpbiB2aWV3XG5cblxuICBpZiAoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBzd2lwZXIudmlzaWJsZVNsaWRlcy5lYWNoKGZ1bmN0aW9uIChzbGlkZSkge1xuICAgICAgICBhY3RpdmVTbGlkZXMucHVzaChzbGlkZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMDsgaSA8IE1hdGguY2VpbChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcpOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4ICsgaTtcbiAgICAgICAgaWYgKGluZGV4ID4gc3dpcGVyLnNsaWRlcy5sZW5ndGgpIGJyZWFrO1xuICAgICAgICBhY3RpdmVTbGlkZXMucHVzaChzd2lwZXIuc2xpZGVzLmVxKGluZGV4KVswXSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGFjdGl2ZVNsaWRlcy5wdXNoKHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KVswXSk7XG4gIH0gLy8gRmluZCBuZXcgaGVpZ2h0IGZyb20gaGlnaGVzdCBzbGlkZSBpbiB2aWV3XG5cblxuICBmb3IgKGkgPSAwOyBpIDwgYWN0aXZlU2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHR5cGVvZiBhY3RpdmVTbGlkZXNbaV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgaGVpZ2h0ID0gYWN0aXZlU2xpZGVzW2ldLm9mZnNldEhlaWdodDtcbiAgICAgIG5ld0hlaWdodCA9IGhlaWdodCA+IG5ld0hlaWdodCA/IGhlaWdodCA6IG5ld0hlaWdodDtcbiAgICB9XG4gIH0gLy8gVXBkYXRlIEhlaWdodFxuXG5cbiAgaWYgKG5ld0hlaWdodCkgc3dpcGVyLiR3cmFwcGVyRWwuY3NzKCdoZWlnaHQnLCBuZXdIZWlnaHQgKyBcInB4XCIpO1xufSIsImltcG9ydCAkIGZyb20gJy4uLy4uLy4uL3V0aWxzL2RvbSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVDbGlja2VkU2xpZGUoZSkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gIHZhciBzbGlkZSA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcylbMF07XG4gIHZhciBzbGlkZUZvdW5kID0gZmFsc2U7XG5cbiAgaWYgKHNsaWRlKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzd2lwZXIuc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoc3dpcGVyLnNsaWRlc1tpXSA9PT0gc2xpZGUpIHNsaWRlRm91bmQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzbGlkZSAmJiBzbGlkZUZvdW5kKSB7XG4gICAgc3dpcGVyLmNsaWNrZWRTbGlkZSA9IHNsaWRlO1xuXG4gICAgaWYgKHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgICBzd2lwZXIuY2xpY2tlZEluZGV4ID0gcGFyc2VJbnQoJChzbGlkZSkuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuY2xpY2tlZEluZGV4ID0gJChzbGlkZSkuaW5kZXgoKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLmNsaWNrZWRTbGlkZSA9IHVuZGVmaW5lZDtcbiAgICBzd2lwZXIuY2xpY2tlZEluZGV4ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChwYXJhbXMuc2xpZGVUb0NsaWNrZWRTbGlkZSAmJiBzd2lwZXIuY2xpY2tlZEluZGV4ICE9PSB1bmRlZmluZWQgJiYgc3dpcGVyLmNsaWNrZWRJbmRleCAhPT0gc3dpcGVyLmFjdGl2ZUluZGV4KSB7XG4gICAgc3dpcGVyLnNsaWRlVG9DbGlja2VkU2xpZGUoKTtcbiAgfVxufSIsImltcG9ydCB7IGV4dGVuZCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZVByb2dyZXNzKHRyYW5zbGF0ZSkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcblxuICBpZiAodHlwZW9mIHRyYW5zbGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbXVsdGlwbGllciA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyAtMSA6IDE7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG4gICAgdHJhbnNsYXRlID0gc3dpcGVyICYmIHN3aXBlci50cmFuc2xhdGUgJiYgc3dpcGVyLnRyYW5zbGF0ZSAqIG11bHRpcGxpZXIgfHwgMDtcbiAgfVxuXG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICB2YXIgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gIHZhciBwcm9ncmVzcyA9IHN3aXBlci5wcm9ncmVzcyxcbiAgICAgIGlzQmVnaW5uaW5nID0gc3dpcGVyLmlzQmVnaW5uaW5nLFxuICAgICAgaXNFbmQgPSBzd2lwZXIuaXNFbmQ7XG4gIHZhciB3YXNCZWdpbm5pbmcgPSBpc0JlZ2lubmluZztcbiAgdmFyIHdhc0VuZCA9IGlzRW5kO1xuXG4gIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgIHByb2dyZXNzID0gMDtcbiAgICBpc0JlZ2lubmluZyA9IHRydWU7XG4gICAgaXNFbmQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHByb2dyZXNzID0gKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgLyB0cmFuc2xhdGVzRGlmZjtcbiAgICBpc0JlZ2lubmluZyA9IHByb2dyZXNzIDw9IDA7XG4gICAgaXNFbmQgPSBwcm9ncmVzcyA+PSAxO1xuICB9XG5cbiAgZXh0ZW5kKHN3aXBlciwge1xuICAgIHByb2dyZXNzOiBwcm9ncmVzcyxcbiAgICBpc0JlZ2lubmluZzogaXNCZWdpbm5pbmcsXG4gICAgaXNFbmQ6IGlzRW5kXG4gIH0pO1xuICBpZiAocGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgfHwgcGFyYW1zLndhdGNoU2xpZGVzVmlzaWJpbGl0eSB8fCBwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmF1dG9IZWlnaHQpIHN3aXBlci51cGRhdGVTbGlkZXNQcm9ncmVzcyh0cmFuc2xhdGUpO1xuXG4gIGlmIChpc0JlZ2lubmluZyAmJiAhd2FzQmVnaW5uaW5nKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3JlYWNoQmVnaW5uaW5nIHRvRWRnZScpO1xuICB9XG5cbiAgaWYgKGlzRW5kICYmICF3YXNFbmQpIHtcbiAgICBzd2lwZXIuZW1pdCgncmVhY2hFbmQgdG9FZGdlJyk7XG4gIH1cblxuICBpZiAod2FzQmVnaW5uaW5nICYmICFpc0JlZ2lubmluZyB8fCB3YXNFbmQgJiYgIWlzRW5kKSB7XG4gICAgc3dpcGVyLmVtaXQoJ2Zyb21FZGdlJyk7XG4gIH1cblxuICBzd2lwZXIuZW1pdCgncHJvZ3Jlc3MnLCBwcm9ncmVzcyk7XG59IiwiaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlU2l6ZSgpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciB3aWR0aDtcbiAgdmFyIGhlaWdodDtcbiAgdmFyICRlbCA9IHN3aXBlci4kZWw7XG5cbiAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zLndpZHRoICE9PSAndW5kZWZpbmVkJyAmJiBzd2lwZXIucGFyYW1zLndpZHRoICE9PSBudWxsKSB7XG4gICAgd2lkdGggPSBzd2lwZXIucGFyYW1zLndpZHRoO1xuICB9IGVsc2Uge1xuICAgIHdpZHRoID0gJGVsWzBdLmNsaWVudFdpZHRoO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zLmhlaWdodCAhPT0gJ3VuZGVmaW5lZCcgJiYgc3dpcGVyLnBhcmFtcy53aWR0aCAhPT0gbnVsbCkge1xuICAgIGhlaWdodCA9IHN3aXBlci5wYXJhbXMuaGVpZ2h0O1xuICB9IGVsc2Uge1xuICAgIGhlaWdodCA9ICRlbFswXS5jbGllbnRIZWlnaHQ7XG4gIH1cblxuICBpZiAod2lkdGggPT09IDAgJiYgc3dpcGVyLmlzSG9yaXpvbnRhbCgpIHx8IGhlaWdodCA9PT0gMCAmJiBzd2lwZXIuaXNWZXJ0aWNhbCgpKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIFN1YnRyYWN0IHBhZGRpbmdzXG5cblxuICB3aWR0aCA9IHdpZHRoIC0gcGFyc2VJbnQoJGVsLmNzcygncGFkZGluZy1sZWZ0JykgfHwgMCwgMTApIC0gcGFyc2VJbnQoJGVsLmNzcygncGFkZGluZy1yaWdodCcpIHx8IDAsIDEwKTtcbiAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoJGVsLmNzcygncGFkZGluZy10b3AnKSB8fCAwLCAxMCkgLSBwYXJzZUludCgkZWwuY3NzKCdwYWRkaW5nLWJvdHRvbScpIHx8IDAsIDEwKTtcbiAgaWYgKE51bWJlci5pc05hTih3aWR0aCkpIHdpZHRoID0gMDtcbiAgaWYgKE51bWJlci5pc05hTihoZWlnaHQpKSBoZWlnaHQgPSAwO1xuICBleHRlbmQoc3dpcGVyLCB7XG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIHNpemU6IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHdpZHRoIDogaGVpZ2h0XG4gIH0pO1xufSIsImltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlU2xpZGVzKCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgdmFyICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbCxcbiAgICAgIHN3aXBlclNpemUgPSBzd2lwZXIuc2l6ZSxcbiAgICAgIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGUsXG4gICAgICB3cm9uZ1JUTCA9IHN3aXBlci53cm9uZ1JUTDtcbiAgdmFyIGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIHZhciBwcmV2aW91c1NsaWRlc0xlbmd0aCA9IGlzVmlydHVhbCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgdmFyIHNsaWRlcyA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3MpO1xuICB2YXIgc2xpZGVzTGVuZ3RoID0gaXNWaXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHNsaWRlcy5sZW5ndGg7XG4gIHZhciBzbmFwR3JpZCA9IFtdO1xuICB2YXIgc2xpZGVzR3JpZCA9IFtdO1xuICB2YXIgc2xpZGVzU2l6ZXNHcmlkID0gW107XG5cbiAgZnVuY3Rpb24gc2xpZGVzRm9yTWFyZ2luKHNsaWRlRWwsIHNsaWRlSW5kZXgpIHtcbiAgICBpZiAoIXBhcmFtcy5jc3NNb2RlKSByZXR1cm4gdHJ1ZTtcblxuICAgIGlmIChzbGlkZUluZGV4ID09PSBzbGlkZXMubGVuZ3RoIC0gMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdmFyIG9mZnNldEJlZm9yZSA9IHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmU7XG5cbiAgaWYgKHR5cGVvZiBvZmZzZXRCZWZvcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvZmZzZXRCZWZvcmUgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlLmNhbGwoc3dpcGVyKTtcbiAgfVxuXG4gIHZhciBvZmZzZXRBZnRlciA9IHBhcmFtcy5zbGlkZXNPZmZzZXRBZnRlcjtcblxuICBpZiAodHlwZW9mIG9mZnNldEFmdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb2Zmc2V0QWZ0ZXIgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QWZ0ZXIuY2FsbChzd2lwZXIpO1xuICB9XG5cbiAgdmFyIHByZXZpb3VzU25hcEdyaWRMZW5ndGggPSBzd2lwZXIuc25hcEdyaWQubGVuZ3RoO1xuICB2YXIgcHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoID0gc3dpcGVyLnNuYXBHcmlkLmxlbmd0aDtcbiAgdmFyIHNwYWNlQmV0d2VlbiA9IHBhcmFtcy5zcGFjZUJldHdlZW47XG4gIHZhciBzbGlkZVBvc2l0aW9uID0gLW9mZnNldEJlZm9yZTtcbiAgdmFyIHByZXZTbGlkZVNpemUgPSAwO1xuICB2YXIgaW5kZXggPSAwO1xuXG4gIGlmICh0eXBlb2Ygc3dpcGVyU2l6ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodHlwZW9mIHNwYWNlQmV0d2VlbiA9PT0gJ3N0cmluZycgJiYgc3BhY2VCZXR3ZWVuLmluZGV4T2YoJyUnKSA+PSAwKSB7XG4gICAgc3BhY2VCZXR3ZWVuID0gcGFyc2VGbG9hdChzcGFjZUJldHdlZW4ucmVwbGFjZSgnJScsICcnKSkgLyAxMDAgKiBzd2lwZXJTaXplO1xuICB9XG5cbiAgc3dpcGVyLnZpcnR1YWxTaXplID0gLXNwYWNlQmV0d2VlbjsgLy8gcmVzZXQgbWFyZ2luc1xuXG4gIGlmIChydGwpIHNsaWRlcy5jc3Moe1xuICAgIG1hcmdpbkxlZnQ6ICcnLFxuICAgIG1hcmdpblRvcDogJydcbiAgfSk7ZWxzZSBzbGlkZXMuY3NzKHtcbiAgICBtYXJnaW5SaWdodDogJycsXG4gICAgbWFyZ2luQm90dG9tOiAnJ1xuICB9KTtcbiAgdmFyIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3M7XG5cbiAgaWYgKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxKSB7XG4gICAgaWYgKE1hdGguZmxvb3Ioc2xpZGVzTGVuZ3RoIC8gcGFyYW1zLnNsaWRlc1BlckNvbHVtbikgPT09IHNsaWRlc0xlbmd0aCAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyQ29sdW1uKSB7XG4gICAgICBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzID0gc2xpZGVzTGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzID0gTWF0aC5jZWlsKHNsaWRlc0xlbmd0aCAvIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pICogcGFyYW1zLnNsaWRlc1BlckNvbHVtbjtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgIT09ICdhdXRvJyAmJiBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uRmlsbCA9PT0gJ3JvdycpIHtcbiAgICAgIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgPSBNYXRoLm1heChzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzLCBwYXJhbXMuc2xpZGVzUGVyVmlldyAqIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pO1xuICAgIH1cbiAgfSAvLyBDYWxjIHNsaWRlc1xuXG5cbiAgdmFyIHNsaWRlU2l6ZTtcbiAgdmFyIHNsaWRlc1BlckNvbHVtbiA9IHBhcmFtcy5zbGlkZXNQZXJDb2x1bW47XG4gIHZhciBzbGlkZXNQZXJSb3cgPSBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzIC8gc2xpZGVzUGVyQ29sdW1uO1xuICB2YXIgbnVtRnVsbENvbHVtbnMgPSBNYXRoLmZsb29yKHNsaWRlc0xlbmd0aCAvIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzTGVuZ3RoOyBpICs9IDEpIHtcbiAgICBzbGlkZVNpemUgPSAwO1xuICAgIHZhciBzbGlkZSA9IHNsaWRlcy5lcShpKTtcblxuICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyQ29sdW1uID4gMSkge1xuICAgICAgLy8gU2V0IHNsaWRlcyBvcmRlclxuICAgICAgdmFyIG5ld1NsaWRlT3JkZXJJbmRleCA9IHZvaWQgMDtcbiAgICAgIHZhciBjb2x1bW4gPSB2b2lkIDA7XG4gICAgICB2YXIgcm93ID0gdm9pZCAwO1xuXG4gICAgICBpZiAocGFyYW1zLnNsaWRlc1BlckNvbHVtbkZpbGwgPT09ICdyb3cnICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA+IDEpIHtcbiAgICAgICAgdmFyIGdyb3VwSW5kZXggPSBNYXRoLmZsb29yKGkgLyAocGFyYW1zLnNsaWRlc1Blckdyb3VwICogcGFyYW1zLnNsaWRlc1BlckNvbHVtbikpO1xuICAgICAgICB2YXIgc2xpZGVJbmRleEluR3JvdXAgPSBpIC0gcGFyYW1zLnNsaWRlc1BlckNvbHVtbiAqIHBhcmFtcy5zbGlkZXNQZXJHcm91cCAqIGdyb3VwSW5kZXg7XG4gICAgICAgIHZhciBjb2x1bW5zSW5Hcm91cCA9IGdyb3VwSW5kZXggPT09IDAgPyBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgOiBNYXRoLm1pbihNYXRoLmNlaWwoKHNsaWRlc0xlbmd0aCAtIGdyb3VwSW5kZXggKiBzbGlkZXNQZXJDb2x1bW4gKiBwYXJhbXMuc2xpZGVzUGVyR3JvdXApIC8gc2xpZGVzUGVyQ29sdW1uKSwgcGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgICAgICAgcm93ID0gTWF0aC5mbG9vcihzbGlkZUluZGV4SW5Hcm91cCAvIGNvbHVtbnNJbkdyb3VwKTtcbiAgICAgICAgY29sdW1uID0gc2xpZGVJbmRleEluR3JvdXAgLSByb3cgKiBjb2x1bW5zSW5Hcm91cCArIGdyb3VwSW5kZXggKiBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgICAgIG5ld1NsaWRlT3JkZXJJbmRleCA9IGNvbHVtbiArIHJvdyAqIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgLyBzbGlkZXNQZXJDb2x1bW47XG4gICAgICAgIHNsaWRlLmNzcyh7XG4gICAgICAgICAgJy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXAnOiBuZXdTbGlkZU9yZGVySW5kZXgsXG4gICAgICAgICAgJy1tb3otYm94LW9yZGluYWwtZ3JvdXAnOiBuZXdTbGlkZU9yZGVySW5kZXgsXG4gICAgICAgICAgJy1tcy1mbGV4LW9yZGVyJzogbmV3U2xpZGVPcmRlckluZGV4LFxuICAgICAgICAgICctd2Via2l0LW9yZGVyJzogbmV3U2xpZGVPcmRlckluZGV4LFxuICAgICAgICAgIG9yZGVyOiBuZXdTbGlkZU9yZGVySW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW5GaWxsID09PSAnY29sdW1uJykge1xuICAgICAgICBjb2x1bW4gPSBNYXRoLmZsb29yKGkgLyBzbGlkZXNQZXJDb2x1bW4pO1xuICAgICAgICByb3cgPSBpIC0gY29sdW1uICogc2xpZGVzUGVyQ29sdW1uO1xuXG4gICAgICAgIGlmIChjb2x1bW4gPiBudW1GdWxsQ29sdW1ucyB8fCBjb2x1bW4gPT09IG51bUZ1bGxDb2x1bW5zICYmIHJvdyA9PT0gc2xpZGVzUGVyQ29sdW1uIC0gMSkge1xuICAgICAgICAgIHJvdyArPSAxO1xuXG4gICAgICAgICAgaWYgKHJvdyA+PSBzbGlkZXNQZXJDb2x1bW4pIHtcbiAgICAgICAgICAgIHJvdyA9IDA7XG4gICAgICAgICAgICBjb2x1bW4gKz0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJvdyA9IE1hdGguZmxvb3IoaSAvIHNsaWRlc1BlclJvdyk7XG4gICAgICAgIGNvbHVtbiA9IGkgLSByb3cgKiBzbGlkZXNQZXJSb3c7XG4gICAgICB9XG5cbiAgICAgIHNsaWRlLmNzcyhcIm1hcmdpbi1cIiArIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAndG9wJyA6ICdsZWZ0JyksIHJvdyAhPT0gMCAmJiBwYXJhbXMuc3BhY2VCZXR3ZWVuICYmIHBhcmFtcy5zcGFjZUJldHdlZW4gKyBcInB4XCIpO1xuICAgIH1cblxuICAgIGlmIChzbGlkZS5jc3MoJ2Rpc3BsYXknKSA9PT0gJ25vbmUnKSBjb250aW51ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycpIHtcbiAgICAgIHZhciBzbGlkZVN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHNsaWRlWzBdLCBudWxsKTtcbiAgICAgIHZhciBjdXJyZW50VHJhbnNmb3JtID0gc2xpZGVbMF0uc3R5bGUudHJhbnNmb3JtO1xuICAgICAgdmFyIGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0gPSBzbGlkZVswXS5zdHlsZS53ZWJraXRUcmFuc2Zvcm07XG5cbiAgICAgIGlmIChjdXJyZW50VHJhbnNmb3JtKSB7XG4gICAgICAgIHNsaWRlWzBdLnN0eWxlLnRyYW5zZm9ybSA9ICdub25lJztcbiAgICAgIH1cblxuICAgICAgaWYgKGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGVbMF0uc3R5bGUud2Via2l0VHJhbnNmb3JtID0gJ25vbmUnO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykge1xuICAgICAgICBzbGlkZVNpemUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBzbGlkZS5vdXRlcldpZHRoKHRydWUpIDogc2xpZGUub3V0ZXJIZWlnaHQodHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgIHZhciB3aWR0aCA9IHBhcnNlRmxvYXQoc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnd2lkdGgnKSB8fCAwKTtcbiAgICAgICAgICB2YXIgcGFkZGluZ0xlZnQgPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctbGVmdCcpIHx8IDApO1xuICAgICAgICAgIHZhciBwYWRkaW5nUmlnaHQgPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctcmlnaHQnKSB8fCAwKTtcbiAgICAgICAgICB2YXIgbWFyZ2luTGVmdCA9IHBhcnNlRmxvYXQoc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLWxlZnQnKSB8fCAwKTtcbiAgICAgICAgICB2YXIgbWFyZ2luUmlnaHQgPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1yaWdodCcpIHx8IDApO1xuICAgICAgICAgIHZhciBib3hTaXppbmcgPSBzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdib3gtc2l6aW5nJyk7XG5cbiAgICAgICAgICBpZiAoYm94U2l6aW5nICYmIGJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnKSB7XG4gICAgICAgICAgICBzbGlkZVNpemUgPSB3aWR0aCArIG1hcmdpbkxlZnQgKyBtYXJnaW5SaWdodDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2xpZGVTaXplID0gd2lkdGggKyBwYWRkaW5nTGVmdCArIHBhZGRpbmdSaWdodCArIG1hcmdpbkxlZnQgKyBtYXJnaW5SaWdodDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlRmxvYXQoc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnaGVpZ2h0JykgfHwgMCk7XG4gICAgICAgICAgdmFyIHBhZGRpbmdUb3AgPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctdG9wJykgfHwgMCk7XG4gICAgICAgICAgdmFyIHBhZGRpbmdCb3R0b20gPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctYm90dG9tJykgfHwgMCk7XG4gICAgICAgICAgdmFyIG1hcmdpblRvcCA9IHBhcnNlRmxvYXQoc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLXRvcCcpIHx8IDApO1xuICAgICAgICAgIHZhciBtYXJnaW5Cb3R0b20gPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1ib3R0b20nKSB8fCAwKTtcblxuICAgICAgICAgIHZhciBfYm94U2l6aW5nID0gc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnYm94LXNpemluZycpO1xuXG4gICAgICAgICAgaWYgKF9ib3hTaXppbmcgJiYgX2JveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnKSB7XG4gICAgICAgICAgICBzbGlkZVNpemUgPSBoZWlnaHQgKyBtYXJnaW5Ub3AgKyBtYXJnaW5Cb3R0b207XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNsaWRlU2l6ZSA9IGhlaWdodCArIHBhZGRpbmdUb3AgKyBwYWRkaW5nQm90dG9tICsgbWFyZ2luVG9wICsgbWFyZ2luQm90dG9tO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZVswXS5zdHlsZS50cmFuc2Zvcm0gPSBjdXJyZW50VHJhbnNmb3JtO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3VycmVudFdlYktpdFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZVswXS5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSBjdXJyZW50V2ViS2l0VHJhbnNmb3JtO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVTaXplID0gTWF0aC5mbG9vcihzbGlkZVNpemUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZVNpemUgPSAoc3dpcGVyU2l6ZSAtIChwYXJhbXMuc2xpZGVzUGVyVmlldyAtIDEpICogc3BhY2VCZXR3ZWVuKSAvIHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlU2l6ZSA9IE1hdGguZmxvb3Ioc2xpZGVTaXplKTtcblxuICAgICAgaWYgKHNsaWRlc1tpXSkge1xuICAgICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgc2xpZGVzW2ldLnN0eWxlLndpZHRoID0gc2xpZGVTaXplICsgXCJweFwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNsaWRlc1tpXS5zdHlsZS5oZWlnaHQgPSBzbGlkZVNpemUgKyBcInB4XCI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2xpZGVzW2ldKSB7XG4gICAgICBzbGlkZXNbaV0uc3dpcGVyU2xpZGVTaXplID0gc2xpZGVTaXplO1xuICAgIH1cblxuICAgIHNsaWRlc1NpemVzR3JpZC5wdXNoKHNsaWRlU2l6ZSk7XG5cbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiArIHNsaWRlU2l6ZSAvIDIgKyBwcmV2U2xpZGVTaXplIC8gMiArIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChwcmV2U2xpZGVTaXplID09PSAwICYmIGkgIT09IDApIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uIC0gc3dpcGVyU2l6ZSAvIDIgLSBzcGFjZUJldHdlZW47XG4gICAgICBpZiAoaSA9PT0gMCkgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gLSBzd2lwZXJTaXplIC8gMiAtIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChNYXRoLmFicyhzbGlkZVBvc2l0aW9uKSA8IDEgLyAxMDAwKSBzbGlkZVBvc2l0aW9uID0gMDtcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVBvc2l0aW9uID0gTWF0aC5mbG9vcihzbGlkZVBvc2l0aW9uKTtcbiAgICAgIGlmIChpbmRleCAlIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMCkgc25hcEdyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlUG9zaXRpb24gPSBNYXRoLmZsb29yKHNsaWRlUG9zaXRpb24pO1xuICAgICAgaWYgKChpbmRleCAtIE1hdGgubWluKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBpbmRleCkpICUgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMCkgc25hcEdyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uICsgc2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuO1xuICAgIH1cblxuICAgIHN3aXBlci52aXJ0dWFsU2l6ZSArPSBzbGlkZVNpemUgKyBzcGFjZUJldHdlZW47XG4gICAgcHJldlNsaWRlU2l6ZSA9IHNsaWRlU2l6ZTtcbiAgICBpbmRleCArPSAxO1xuICB9XG5cbiAgc3dpcGVyLnZpcnR1YWxTaXplID0gTWF0aC5tYXgoc3dpcGVyLnZpcnR1YWxTaXplLCBzd2lwZXJTaXplKSArIG9mZnNldEFmdGVyO1xuICB2YXIgbmV3U2xpZGVzR3JpZDtcblxuICBpZiAocnRsICYmIHdyb25nUlRMICYmIChwYXJhbXMuZWZmZWN0ID09PSAnc2xpZGUnIHx8IHBhcmFtcy5lZmZlY3QgPT09ICdjb3ZlcmZsb3cnKSkge1xuICAgICR3cmFwcGVyRWwuY3NzKHtcbiAgICAgIHdpZHRoOiBzd2lwZXIudmlydHVhbFNpemUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVuICsgXCJweFwiXG4gICAgfSk7XG4gIH1cblxuICBpZiAocGFyYW1zLnNldFdyYXBwZXJTaXplKSB7XG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkgJHdyYXBwZXJFbC5jc3Moe1xuICAgICAgd2lkdGg6IHN3aXBlci52aXJ0dWFsU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW4gKyBcInB4XCJcbiAgICB9KTtlbHNlICR3cmFwcGVyRWwuY3NzKHtcbiAgICAgIGhlaWdodDogc3dpcGVyLnZpcnR1YWxTaXplICsgcGFyYW1zLnNwYWNlQmV0d2VlbiArIFwicHhcIlxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxKSB7XG4gICAgc3dpcGVyLnZpcnR1YWxTaXplID0gKHNsaWRlU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW4pICogc2xpZGVzTnVtYmVyRXZlblRvUm93cztcbiAgICBzd2lwZXIudmlydHVhbFNpemUgPSBNYXRoLmNlaWwoc3dpcGVyLnZpcnR1YWxTaXplIC8gcGFyYW1zLnNsaWRlc1BlckNvbHVtbikgLSBwYXJhbXMuc3BhY2VCZXR3ZWVuO1xuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpICR3cmFwcGVyRWwuY3NzKHtcbiAgICAgIHdpZHRoOiBzd2lwZXIudmlydHVhbFNpemUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVuICsgXCJweFwiXG4gICAgfSk7ZWxzZSAkd3JhcHBlckVsLmNzcyh7XG4gICAgICBoZWlnaHQ6IHN3aXBlci52aXJ0dWFsU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW4gKyBcInB4XCJcbiAgICB9KTtcblxuICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIG5ld1NsaWRlc0dyaWQgPSBbXTtcblxuICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHNuYXBHcmlkLmxlbmd0aDsgX2kgKz0gMSkge1xuICAgICAgICB2YXIgc2xpZGVzR3JpZEl0ZW0gPSBzbmFwR3JpZFtfaV07XG4gICAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZXNHcmlkSXRlbSA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZEl0ZW0pO1xuICAgICAgICBpZiAoc25hcEdyaWRbX2ldIDwgc3dpcGVyLnZpcnR1YWxTaXplICsgc25hcEdyaWRbMF0pIG5ld1NsaWRlc0dyaWQucHVzaChzbGlkZXNHcmlkSXRlbSk7XG4gICAgICB9XG5cbiAgICAgIHNuYXBHcmlkID0gbmV3U2xpZGVzR3JpZDtcbiAgICB9XG4gIH0gLy8gUmVtb3ZlIGxhc3QgZ3JpZCBlbGVtZW50cyBkZXBlbmRpbmcgb24gd2lkdGhcblxuXG4gIGlmICghcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgbmV3U2xpZGVzR3JpZCA9IFtdO1xuXG4gICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgc25hcEdyaWQubGVuZ3RoOyBfaTIgKz0gMSkge1xuICAgICAgdmFyIF9zbGlkZXNHcmlkSXRlbSA9IHNuYXBHcmlkW19pMl07XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3RocykgX3NsaWRlc0dyaWRJdGVtID0gTWF0aC5mbG9vcihfc2xpZGVzR3JpZEl0ZW0pO1xuXG4gICAgICBpZiAoc25hcEdyaWRbX2kyXSA8PSBzd2lwZXIudmlydHVhbFNpemUgLSBzd2lwZXJTaXplKSB7XG4gICAgICAgIG5ld1NsaWRlc0dyaWQucHVzaChfc2xpZGVzR3JpZEl0ZW0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNuYXBHcmlkID0gbmV3U2xpZGVzR3JpZDtcblxuICAgIGlmIChNYXRoLmZsb29yKHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpIC0gTWF0aC5mbG9vcihzbmFwR3JpZFtzbmFwR3JpZC5sZW5ndGggLSAxXSkgPiAxKSB7XG4gICAgICBzbmFwR3JpZC5wdXNoKHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzbmFwR3JpZC5sZW5ndGggPT09IDApIHNuYXBHcmlkID0gWzBdO1xuXG4gIGlmIChwYXJhbXMuc3BhY2VCZXR3ZWVuICE9PSAwKSB7XG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgaWYgKHJ0bCkgc2xpZGVzLmZpbHRlcihzbGlkZXNGb3JNYXJnaW4pLmNzcyh7XG4gICAgICAgIG1hcmdpbkxlZnQ6IHNwYWNlQmV0d2VlbiArIFwicHhcIlxuICAgICAgfSk7ZWxzZSBzbGlkZXMuZmlsdGVyKHNsaWRlc0Zvck1hcmdpbikuY3NzKHtcbiAgICAgICAgbWFyZ2luUmlnaHQ6IHNwYWNlQmV0d2VlbiArIFwicHhcIlxuICAgICAgfSk7XG4gICAgfSBlbHNlIHNsaWRlcy5maWx0ZXIoc2xpZGVzRm9yTWFyZ2luKS5jc3Moe1xuICAgICAgbWFyZ2luQm90dG9tOiBzcGFjZUJldHdlZW4gKyBcInB4XCJcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzQm91bmRzKSB7XG4gICAgdmFyIGFsbFNsaWRlc1NpemUgPSAwO1xuICAgIHNsaWRlc1NpemVzR3JpZC5mb3JFYWNoKGZ1bmN0aW9uIChzbGlkZVNpemVWYWx1ZSkge1xuICAgICAgYWxsU2xpZGVzU2l6ZSArPSBzbGlkZVNpemVWYWx1ZSArIChwYXJhbXMuc3BhY2VCZXR3ZWVuID8gcGFyYW1zLnNwYWNlQmV0d2VlbiA6IDApO1xuICAgIH0pO1xuICAgIGFsbFNsaWRlc1NpemUgLT0gcGFyYW1zLnNwYWNlQmV0d2VlbjtcbiAgICB2YXIgbWF4U25hcCA9IGFsbFNsaWRlc1NpemUgLSBzd2lwZXJTaXplO1xuICAgIHNuYXBHcmlkID0gc25hcEdyaWQubWFwKGZ1bmN0aW9uIChzbmFwKSB7XG4gICAgICBpZiAoc25hcCA8IDApIHJldHVybiAtb2Zmc2V0QmVmb3JlO1xuICAgICAgaWYgKHNuYXAgPiBtYXhTbmFwKSByZXR1cm4gbWF4U25hcCArIG9mZnNldEFmdGVyO1xuICAgICAgcmV0dXJuIHNuYXA7XG4gICAgfSk7XG4gIH1cblxuICBpZiAocGFyYW1zLmNlbnRlckluc3VmZmljaWVudFNsaWRlcykge1xuICAgIHZhciBfYWxsU2xpZGVzU2l6ZSA9IDA7XG4gICAgc2xpZGVzU2l6ZXNHcmlkLmZvckVhY2goZnVuY3Rpb24gKHNsaWRlU2l6ZVZhbHVlKSB7XG4gICAgICBfYWxsU2xpZGVzU2l6ZSArPSBzbGlkZVNpemVWYWx1ZSArIChwYXJhbXMuc3BhY2VCZXR3ZWVuID8gcGFyYW1zLnNwYWNlQmV0d2VlbiA6IDApO1xuICAgIH0pO1xuICAgIF9hbGxTbGlkZXNTaXplIC09IHBhcmFtcy5zcGFjZUJldHdlZW47XG5cbiAgICBpZiAoX2FsbFNsaWRlc1NpemUgPCBzd2lwZXJTaXplKSB7XG4gICAgICB2YXIgYWxsU2xpZGVzT2Zmc2V0ID0gKHN3aXBlclNpemUgLSBfYWxsU2xpZGVzU2l6ZSkgLyAyO1xuICAgICAgc25hcEdyaWQuZm9yRWFjaChmdW5jdGlvbiAoc25hcCwgc25hcEluZGV4KSB7XG4gICAgICAgIHNuYXBHcmlkW3NuYXBJbmRleF0gPSBzbmFwIC0gYWxsU2xpZGVzT2Zmc2V0O1xuICAgICAgfSk7XG4gICAgICBzbGlkZXNHcmlkLmZvckVhY2goZnVuY3Rpb24gKHNuYXAsIHNuYXBJbmRleCkge1xuICAgICAgICBzbGlkZXNHcmlkW3NuYXBJbmRleF0gPSBzbmFwICsgYWxsU2xpZGVzT2Zmc2V0O1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZXh0ZW5kKHN3aXBlciwge1xuICAgIHNsaWRlczogc2xpZGVzLFxuICAgIHNuYXBHcmlkOiBzbmFwR3JpZCxcbiAgICBzbGlkZXNHcmlkOiBzbGlkZXNHcmlkLFxuICAgIHNsaWRlc1NpemVzR3JpZDogc2xpZGVzU2l6ZXNHcmlkXG4gIH0pO1xuXG4gIGlmIChzbGlkZXNMZW5ndGggIT09IHByZXZpb3VzU2xpZGVzTGVuZ3RoKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlc0xlbmd0aENoYW5nZScpO1xuICB9XG5cbiAgaWYgKHNuYXBHcmlkLmxlbmd0aCAhPT0gcHJldmlvdXNTbmFwR3JpZExlbmd0aCkge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cpIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gICAgc3dpcGVyLmVtaXQoJ3NuYXBHcmlkTGVuZ3RoQ2hhbmdlJyk7XG4gIH1cblxuICBpZiAoc2xpZGVzR3JpZC5sZW5ndGggIT09IHByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCkge1xuICAgIHN3aXBlci5lbWl0KCdzbGlkZXNHcmlkTGVuZ3RoQ2hhbmdlJyk7XG4gIH1cblxuICBpZiAocGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgfHwgcGFyYW1zLndhdGNoU2xpZGVzVmlzaWJpbGl0eSkge1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNPZmZzZXQoKTtcbiAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZVNsaWRlc0NsYXNzZXMoKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgc2xpZGVzID0gc3dpcGVyLnNsaWRlcyxcbiAgICAgIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWwsXG4gICAgICBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCxcbiAgICAgIHJlYWxJbmRleCA9IHN3aXBlci5yZWFsSW5kZXg7XG4gIHZhciBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICBzbGlkZXMucmVtb3ZlQ2xhc3MocGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MgKyBcIiBcIiArIHBhcmFtcy5zbGlkZU5leHRDbGFzcyArIFwiIFwiICsgcGFyYW1zLnNsaWRlUHJldkNsYXNzICsgXCIgXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzcyArIFwiIFwiICsgcGFyYW1zLnNsaWRlRHVwbGljYXRlTmV4dENsYXNzICsgXCIgXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3MpO1xuICB2YXIgYWN0aXZlU2xpZGU7XG5cbiAgaWYgKGlzVmlydHVhbCkge1xuICAgIGFjdGl2ZVNsaWRlID0gc3dpcGVyLiR3cmFwcGVyRWwuZmluZChcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzICsgXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgYWN0aXZlSW5kZXggKyBcIlxcXCJdXCIpO1xuICB9IGVsc2Uge1xuICAgIGFjdGl2ZVNsaWRlID0gc2xpZGVzLmVxKGFjdGl2ZUluZGV4KTtcbiAgfSAvLyBBY3RpdmUgY2xhc3Nlc1xuXG5cbiAgYWN0aXZlU2xpZGUuYWRkQ2xhc3MocGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpO1xuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIC8vIER1cGxpY2F0ZSB0byBhbGwgbG9vcGVkIHNsaWRlc1xuICAgIGlmIChhY3RpdmVTbGlkZS5oYXNDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHtcbiAgICAgICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiOm5vdCguXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArIFwiKVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyByZWFsSW5kZXggKyBcIlxcXCJdXCIpLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzICsgXCIuXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArIFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIHJlYWxJbmRleCArIFwiXFxcIl1cIikuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3MpO1xuICAgIH1cbiAgfSAvLyBOZXh0IFNsaWRlXG5cblxuICB2YXIgbmV4dFNsaWRlID0gYWN0aXZlU2xpZGUubmV4dEFsbChcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzKS5lcSgwKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVOZXh0Q2xhc3MpO1xuXG4gIGlmIChwYXJhbXMubG9vcCAmJiBuZXh0U2xpZGUubGVuZ3RoID09PSAwKSB7XG4gICAgbmV4dFNsaWRlID0gc2xpZGVzLmVxKDApO1xuICAgIG5leHRTbGlkZS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVOZXh0Q2xhc3MpO1xuICB9IC8vIFByZXYgU2xpZGVcblxuXG4gIHZhciBwcmV2U2xpZGUgPSBhY3RpdmVTbGlkZS5wcmV2QWxsKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MpLmVxKDApLmFkZENsYXNzKHBhcmFtcy5zbGlkZVByZXZDbGFzcyk7XG5cbiAgaWYgKHBhcmFtcy5sb29wICYmIHByZXZTbGlkZS5sZW5ndGggPT09IDApIHtcbiAgICBwcmV2U2xpZGUgPSBzbGlkZXMuZXEoLTEpO1xuICAgIHByZXZTbGlkZS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVQcmV2Q2xhc3MpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgLy8gRHVwbGljYXRlIHRvIGFsbCBsb29wZWQgc2xpZGVzXG4gICAgaWYgKG5leHRTbGlkZS5oYXNDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHtcbiAgICAgICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiOm5vdCguXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArIFwiKVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBuZXh0U2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSArIFwiXFxcIl1cIikuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlTmV4dENsYXNzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzICsgXCIuXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArIFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIG5leHRTbGlkZS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICsgXCJcXFwiXVwiKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3MpO1xuICAgIH1cblxuICAgIGlmIChwcmV2U2xpZGUuaGFzQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MgKyBcIjpub3QoLlwiICsgcGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MgKyBcIilbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgcHJldlNsaWRlLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgKyBcIlxcXCJdXCIpLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZVByZXZDbGFzcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiLlwiICsgcGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MgKyBcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBwcmV2U2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSArIFwiXFxcIl1cIikuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlUHJldkNsYXNzKTtcbiAgICB9XG4gIH1cblxuICBzd2lwZXIuZW1pdFNsaWRlc0NsYXNzZXMoKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVTbGlkZXNPZmZzZXQoKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgc2xpZGVzID0gc3dpcGVyLnNsaWRlcztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlc1tpXS5zd2lwZXJTbGlkZU9mZnNldCA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHNsaWRlc1tpXS5vZmZzZXRMZWZ0IDogc2xpZGVzW2ldLm9mZnNldFRvcDtcbiAgfVxufSIsImltcG9ydCAkIGZyb20gJy4uLy4uLy4uL3V0aWxzL2RvbSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVTbGlkZXNQcm9ncmVzcyh0cmFuc2xhdGUpIHtcbiAgaWYgKHRyYW5zbGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgdHJhbnNsYXRlID0gdGhpcyAmJiB0aGlzLnRyYW5zbGF0ZSB8fCAwO1xuICB9XG5cbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICB2YXIgc2xpZGVzID0gc3dpcGVyLnNsaWRlcyxcbiAgICAgIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGU7XG4gIGlmIChzbGlkZXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gIGlmICh0eXBlb2Ygc2xpZGVzWzBdLnN3aXBlclNsaWRlT2Zmc2V0ID09PSAndW5kZWZpbmVkJykgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICB2YXIgb2Zmc2V0Q2VudGVyID0gLXRyYW5zbGF0ZTtcbiAgaWYgKHJ0bCkgb2Zmc2V0Q2VudGVyID0gdHJhbnNsYXRlOyAvLyBWaXNpYmxlIFNsaWRlc1xuXG4gIHNsaWRlcy5yZW1vdmVDbGFzcyhwYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3MpO1xuICBzd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMgPSBbXTtcbiAgc3dpcGVyLnZpc2libGVTbGlkZXMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBzbGlkZSA9IHNsaWRlc1tpXTtcbiAgICB2YXIgc2xpZGVQcm9ncmVzcyA9IChvZmZzZXRDZW50ZXIgKyAocGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIDogMCkgLSBzbGlkZS5zd2lwZXJTbGlkZU9mZnNldCkgLyAoc2xpZGUuc3dpcGVyU2xpZGVTaXplICsgcGFyYW1zLnNwYWNlQmV0d2Vlbik7XG5cbiAgICBpZiAocGFyYW1zLndhdGNoU2xpZGVzVmlzaWJpbGl0eSB8fCBwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgIHZhciBzbGlkZUJlZm9yZSA9IC0ob2Zmc2V0Q2VudGVyIC0gc2xpZGUuc3dpcGVyU2xpZGVPZmZzZXQpO1xuICAgICAgdmFyIHNsaWRlQWZ0ZXIgPSBzbGlkZUJlZm9yZSArIHN3aXBlci5zbGlkZXNTaXplc0dyaWRbaV07XG4gICAgICB2YXIgaXNWaXNpYmxlID0gc2xpZGVCZWZvcmUgPj0gMCAmJiBzbGlkZUJlZm9yZSA8IHN3aXBlci5zaXplIC0gMSB8fCBzbGlkZUFmdGVyID4gMSAmJiBzbGlkZUFmdGVyIDw9IHN3aXBlci5zaXplIHx8IHNsaWRlQmVmb3JlIDw9IDAgJiYgc2xpZGVBZnRlciA+PSBzd2lwZXIuc2l6ZTtcblxuICAgICAgaWYgKGlzVmlzaWJsZSkge1xuICAgICAgICBzd2lwZXIudmlzaWJsZVNsaWRlcy5wdXNoKHNsaWRlKTtcbiAgICAgICAgc3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzLnB1c2goaSk7XG4gICAgICAgIHNsaWRlcy5lcShpKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3MpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNsaWRlLnByb2dyZXNzID0gcnRsID8gLXNsaWRlUHJvZ3Jlc3MgOiBzbGlkZVByb2dyZXNzO1xuICB9XG5cbiAgc3dpcGVyLnZpc2libGVTbGlkZXMgPSAkKHN3aXBlci52aXNpYmxlU2xpZGVzKTtcbn0iLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5pbXBvcnQgJCBmcm9tICcuLi8uLi91dGlscy9kb20nO1xuaW1wb3J0IHsgYmluZE1vZHVsZU1ldGhvZHMgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG52YXIgQ292ZXJmbG93ID0ge1xuICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgc3dpcGVyV2lkdGggPSBzd2lwZXIud2lkdGgsXG4gICAgICAgIHN3aXBlckhlaWdodCA9IHN3aXBlci5oZWlnaHQsXG4gICAgICAgIHNsaWRlcyA9IHN3aXBlci5zbGlkZXMsXG4gICAgICAgIHNsaWRlc1NpemVzR3JpZCA9IHN3aXBlci5zbGlkZXNTaXplc0dyaWQ7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuY292ZXJmbG93RWZmZWN0O1xuICAgIHZhciBpc0hvcml6b250YWwgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG4gICAgdmFyIHRyYW5zZm9ybSA9IHN3aXBlci50cmFuc2xhdGU7XG4gICAgdmFyIGNlbnRlciA9IGlzSG9yaXpvbnRhbCA/IC10cmFuc2Zvcm0gKyBzd2lwZXJXaWR0aCAvIDIgOiAtdHJhbnNmb3JtICsgc3dpcGVySGVpZ2h0IC8gMjtcbiAgICB2YXIgcm90YXRlID0gaXNIb3Jpem9udGFsID8gcGFyYW1zLnJvdGF0ZSA6IC1wYXJhbXMucm90YXRlO1xuICAgIHZhciB0cmFuc2xhdGUgPSBwYXJhbXMuZGVwdGg7IC8vIEVhY2ggc2xpZGUgb2Zmc2V0IGZyb20gY2VudGVyXG5cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gc2xpZGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2YXIgJHNsaWRlRWwgPSBzbGlkZXMuZXEoaSk7XG4gICAgICB2YXIgc2xpZGVTaXplID0gc2xpZGVzU2l6ZXNHcmlkW2ldO1xuICAgICAgdmFyIHNsaWRlT2Zmc2V0ID0gJHNsaWRlRWxbMF0uc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgICB2YXIgb2Zmc2V0TXVsdGlwbGllciA9IChjZW50ZXIgLSBzbGlkZU9mZnNldCAtIHNsaWRlU2l6ZSAvIDIpIC8gc2xpZGVTaXplICogcGFyYW1zLm1vZGlmaWVyO1xuICAgICAgdmFyIHJvdGF0ZVkgPSBpc0hvcml6b250YWwgPyByb3RhdGUgKiBvZmZzZXRNdWx0aXBsaWVyIDogMDtcbiAgICAgIHZhciByb3RhdGVYID0gaXNIb3Jpem9udGFsID8gMCA6IHJvdGF0ZSAqIG9mZnNldE11bHRpcGxpZXI7IC8vIHZhciByb3RhdGVaID0gMFxuXG4gICAgICB2YXIgdHJhbnNsYXRlWiA9IC10cmFuc2xhdGUgKiBNYXRoLmFicyhvZmZzZXRNdWx0aXBsaWVyKTtcbiAgICAgIHZhciBzdHJldGNoID0gcGFyYW1zLnN0cmV0Y2g7IC8vIEFsbG93IHBlcmNlbnRhZ2UgdG8gbWFrZSBhIHJlbGF0aXZlIHN0cmV0Y2ggZm9yIHJlc3BvbnNpdmUgc2xpZGVyc1xuXG4gICAgICBpZiAodHlwZW9mIHN0cmV0Y2ggPT09ICdzdHJpbmcnICYmIHN0cmV0Y2guaW5kZXhPZignJScpICE9PSAtMSkge1xuICAgICAgICBzdHJldGNoID0gcGFyc2VGbG9hdChwYXJhbXMuc3RyZXRjaCkgLyAxMDAgKiBzbGlkZVNpemU7XG4gICAgICB9XG5cbiAgICAgIHZhciB0cmFuc2xhdGVZID0gaXNIb3Jpem9udGFsID8gMCA6IHN0cmV0Y2ggKiBvZmZzZXRNdWx0aXBsaWVyO1xuICAgICAgdmFyIHRyYW5zbGF0ZVggPSBpc0hvcml6b250YWwgPyBzdHJldGNoICogb2Zmc2V0TXVsdGlwbGllciA6IDA7XG4gICAgICB2YXIgc2NhbGUgPSAxIC0gKDEgLSBwYXJhbXMuc2NhbGUpICogTWF0aC5hYnMob2Zmc2V0TXVsdGlwbGllcik7IC8vIEZpeCBmb3IgdWx0cmEgc21hbGwgdmFsdWVzXG5cbiAgICAgIGlmIChNYXRoLmFicyh0cmFuc2xhdGVYKSA8IDAuMDAxKSB0cmFuc2xhdGVYID0gMDtcbiAgICAgIGlmIChNYXRoLmFicyh0cmFuc2xhdGVZKSA8IDAuMDAxKSB0cmFuc2xhdGVZID0gMDtcbiAgICAgIGlmIChNYXRoLmFicyh0cmFuc2xhdGVaKSA8IDAuMDAxKSB0cmFuc2xhdGVaID0gMDtcbiAgICAgIGlmIChNYXRoLmFicyhyb3RhdGVZKSA8IDAuMDAxKSByb3RhdGVZID0gMDtcbiAgICAgIGlmIChNYXRoLmFicyhyb3RhdGVYKSA8IDAuMDAxKSByb3RhdGVYID0gMDtcbiAgICAgIGlmIChNYXRoLmFicyhzY2FsZSkgPCAwLjAwMSkgc2NhbGUgPSAwO1xuICAgICAgdmFyIHNsaWRlVHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUzZChcIiArIHRyYW5zbGF0ZVggKyBcInB4LFwiICsgdHJhbnNsYXRlWSArIFwicHgsXCIgKyB0cmFuc2xhdGVaICsgXCJweCkgIHJvdGF0ZVgoXCIgKyByb3RhdGVYICsgXCJkZWcpIHJvdGF0ZVkoXCIgKyByb3RhdGVZICsgXCJkZWcpIHNjYWxlKFwiICsgc2NhbGUgKyBcIilcIjtcbiAgICAgICRzbGlkZUVsLnRyYW5zZm9ybShzbGlkZVRyYW5zZm9ybSk7XG4gICAgICAkc2xpZGVFbFswXS5zdHlsZS56SW5kZXggPSAtTWF0aC5hYnMoTWF0aC5yb3VuZChvZmZzZXRNdWx0aXBsaWVyKSkgKyAxO1xuXG4gICAgICBpZiAocGFyYW1zLnNsaWRlU2hhZG93cykge1xuICAgICAgICAvLyBTZXQgc2hhZG93c1xuICAgICAgICB2YXIgJHNoYWRvd0JlZm9yZUVsID0gaXNIb3Jpem9udGFsID8gJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpIDogJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wJyk7XG4gICAgICAgIHZhciAkc2hhZG93QWZ0ZXJFbCA9IGlzSG9yaXpvbnRhbCA/ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0JykgOiAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20nKTtcblxuICAgICAgICBpZiAoJHNoYWRvd0JlZm9yZUVsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICRzaGFkb3dCZWZvcmVFbCA9ICQoXCI8ZGl2IGNsYXNzPVxcXCJzd2lwZXItc2xpZGUtc2hhZG93LVwiICsgKGlzSG9yaXpvbnRhbCA/ICdsZWZ0JyA6ICd0b3AnKSArIFwiXFxcIj48L2Rpdj5cIik7XG4gICAgICAgICAgJHNsaWRlRWwuYXBwZW5kKCRzaGFkb3dCZWZvcmVFbCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJHNoYWRvd0FmdGVyRWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgJHNoYWRvd0FmdGVyRWwgPSAkKFwiPGRpdiBjbGFzcz1cXFwic3dpcGVyLXNsaWRlLXNoYWRvdy1cIiArIChpc0hvcml6b250YWwgPyAncmlnaHQnIDogJ2JvdHRvbScpICsgXCJcXFwiPjwvZGl2PlwiKTtcbiAgICAgICAgICAkc2xpZGVFbC5hcHBlbmQoJHNoYWRvd0FmdGVyRWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCRzaGFkb3dCZWZvcmVFbC5sZW5ndGgpICRzaGFkb3dCZWZvcmVFbFswXS5zdHlsZS5vcGFjaXR5ID0gb2Zmc2V0TXVsdGlwbGllciA+IDAgPyBvZmZzZXRNdWx0aXBsaWVyIDogMDtcbiAgICAgICAgaWYgKCRzaGFkb3dBZnRlckVsLmxlbmd0aCkgJHNoYWRvd0FmdGVyRWxbMF0uc3R5bGUub3BhY2l0eSA9IC1vZmZzZXRNdWx0aXBsaWVyID4gMCA/IC1vZmZzZXRNdWx0aXBsaWVyIDogMDtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBzd2lwZXIuc2xpZGVzLnRyYW5zaXRpb24oZHVyYXRpb24pLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnZWZmZWN0LWNvdmVyZmxvdycsXG4gIHBhcmFtczoge1xuICAgIGNvdmVyZmxvd0VmZmVjdDoge1xuICAgICAgcm90YXRlOiA1MCxcbiAgICAgIHN0cmV0Y2g6IDAsXG4gICAgICBkZXB0aDogMTAwLFxuICAgICAgc2NhbGU6IDEsXG4gICAgICBtb2RpZmllcjogMSxcbiAgICAgIHNsaWRlU2hhZG93czogdHJ1ZVxuICAgIH1cbiAgfSxcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICBjb3ZlcmZsb3dFZmZlY3Q6IF9leHRlbmRzKHt9LCBDb3ZlcmZsb3cpXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgYmVmb3JlSW5pdDogZnVuY3Rpb24gYmVmb3JlSW5pdChzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2NvdmVyZmxvdycpIHJldHVybjtcbiAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgXCJjb3ZlcmZsb3dcIik7XG4gICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIFwiM2RcIik7XG4gICAgICBzd2lwZXIucGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgc3dpcGVyLm9yaWdpbmFsUGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgPSB0cnVlO1xuICAgIH0sXG4gICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdjb3ZlcmZsb3cnKSByZXR1cm47XG4gICAgICBzd2lwZXIuY292ZXJmbG93RWZmZWN0LnNldFRyYW5zbGF0ZSgpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihzd2lwZXIsIGR1cmF0aW9uKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdjb3ZlcmZsb3cnKSByZXR1cm47XG4gICAgICBzd2lwZXIuY292ZXJmbG93RWZmZWN0LnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH1cbiAgfVxufTsiLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5pbXBvcnQgJCBmcm9tICcuLi8uLi91dGlscy9kb20nO1xuaW1wb3J0IHsgZXh0ZW5kLCBiaW5kTW9kdWxlTWV0aG9kcyB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbnZhciBDdWJlID0ge1xuICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgJGVsID0gc3dpcGVyLiRlbCxcbiAgICAgICAgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsLFxuICAgICAgICBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzLFxuICAgICAgICBzd2lwZXJXaWR0aCA9IHN3aXBlci53aWR0aCxcbiAgICAgICAgc3dpcGVySGVpZ2h0ID0gc3dpcGVyLmhlaWdodCxcbiAgICAgICAgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSxcbiAgICAgICAgc3dpcGVyU2l6ZSA9IHN3aXBlci5zaXplLFxuICAgICAgICBicm93c2VyID0gc3dpcGVyLmJyb3dzZXI7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuY3ViZUVmZmVjdDtcbiAgICB2YXIgaXNIb3Jpem9udGFsID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpO1xuICAgIHZhciBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgICB2YXIgd3JhcHBlclJvdGF0ZSA9IDA7XG4gICAgdmFyICRjdWJlU2hhZG93RWw7XG5cbiAgICBpZiAocGFyYW1zLnNoYWRvdykge1xuICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAkY3ViZVNoYWRvd0VsID0gJHdyYXBwZXJFbC5maW5kKCcuc3dpcGVyLWN1YmUtc2hhZG93Jyk7XG5cbiAgICAgICAgaWYgKCRjdWJlU2hhZG93RWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgJGN1YmVTaGFkb3dFbCA9ICQoJzxkaXYgY2xhc3M9XCJzd2lwZXItY3ViZS1zaGFkb3dcIj48L2Rpdj4nKTtcbiAgICAgICAgICAkd3JhcHBlckVsLmFwcGVuZCgkY3ViZVNoYWRvd0VsKTtcbiAgICAgICAgfVxuXG4gICAgICAgICRjdWJlU2hhZG93RWwuY3NzKHtcbiAgICAgICAgICBoZWlnaHQ6IHN3aXBlcldpZHRoICsgXCJweFwiXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJGN1YmVTaGFkb3dFbCA9ICRlbC5maW5kKCcuc3dpcGVyLWN1YmUtc2hhZG93Jyk7XG5cbiAgICAgICAgaWYgKCRjdWJlU2hhZG93RWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgJGN1YmVTaGFkb3dFbCA9ICQoJzxkaXYgY2xhc3M9XCJzd2lwZXItY3ViZS1zaGFkb3dcIj48L2Rpdj4nKTtcbiAgICAgICAgICAkZWwuYXBwZW5kKCRjdWJlU2hhZG93RWwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHZhciAkc2xpZGVFbCA9IHNsaWRlcy5lcShpKTtcbiAgICAgIHZhciBzbGlkZUluZGV4ID0gaTtcblxuICAgICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgICBzbGlkZUluZGV4ID0gcGFyc2VJbnQoJHNsaWRlRWwuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2xpZGVBbmdsZSA9IHNsaWRlSW5kZXggKiA5MDtcbiAgICAgIHZhciByb3VuZCA9IE1hdGguZmxvb3Ioc2xpZGVBbmdsZSAvIDM2MCk7XG5cbiAgICAgIGlmIChydGwpIHtcbiAgICAgICAgc2xpZGVBbmdsZSA9IC1zbGlkZUFuZ2xlO1xuICAgICAgICByb3VuZCA9IE1hdGguZmxvb3IoLXNsaWRlQW5nbGUgLyAzNjApO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJvZ3Jlc3MgPSBNYXRoLm1heChNYXRoLm1pbigkc2xpZGVFbFswXS5wcm9ncmVzcywgMSksIC0xKTtcbiAgICAgIHZhciB0eCA9IDA7XG4gICAgICB2YXIgdHkgPSAwO1xuICAgICAgdmFyIHR6ID0gMDtcblxuICAgICAgaWYgKHNsaWRlSW5kZXggJSA0ID09PSAwKSB7XG4gICAgICAgIHR4ID0gLXJvdW5kICogNCAqIHN3aXBlclNpemU7XG4gICAgICAgIHR6ID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoKHNsaWRlSW5kZXggLSAxKSAlIDQgPT09IDApIHtcbiAgICAgICAgdHggPSAwO1xuICAgICAgICB0eiA9IC1yb3VuZCAqIDQgKiBzd2lwZXJTaXplO1xuICAgICAgfSBlbHNlIGlmICgoc2xpZGVJbmRleCAtIDIpICUgNCA9PT0gMCkge1xuICAgICAgICB0eCA9IHN3aXBlclNpemUgKyByb3VuZCAqIDQgKiBzd2lwZXJTaXplO1xuICAgICAgICB0eiA9IHN3aXBlclNpemU7XG4gICAgICB9IGVsc2UgaWYgKChzbGlkZUluZGV4IC0gMykgJSA0ID09PSAwKSB7XG4gICAgICAgIHR4ID0gLXN3aXBlclNpemU7XG4gICAgICAgIHR6ID0gMyAqIHN3aXBlclNpemUgKyBzd2lwZXJTaXplICogNCAqIHJvdW5kO1xuICAgICAgfVxuXG4gICAgICBpZiAocnRsKSB7XG4gICAgICAgIHR4ID0gLXR4O1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzSG9yaXpvbnRhbCkge1xuICAgICAgICB0eSA9IHR4O1xuICAgICAgICB0eCA9IDA7XG4gICAgICB9XG5cbiAgICAgIHZhciB0cmFuc2Zvcm0gPSBcInJvdGF0ZVgoXCIgKyAoaXNIb3Jpem9udGFsID8gMCA6IC1zbGlkZUFuZ2xlKSArIFwiZGVnKSByb3RhdGVZKFwiICsgKGlzSG9yaXpvbnRhbCA/IHNsaWRlQW5nbGUgOiAwKSArIFwiZGVnKSB0cmFuc2xhdGUzZChcIiArIHR4ICsgXCJweCwgXCIgKyB0eSArIFwicHgsIFwiICsgdHogKyBcInB4KVwiO1xuXG4gICAgICBpZiAocHJvZ3Jlc3MgPD0gMSAmJiBwcm9ncmVzcyA+IC0xKSB7XG4gICAgICAgIHdyYXBwZXJSb3RhdGUgPSBzbGlkZUluZGV4ICogOTAgKyBwcm9ncmVzcyAqIDkwO1xuICAgICAgICBpZiAocnRsKSB3cmFwcGVyUm90YXRlID0gLXNsaWRlSW5kZXggKiA5MCAtIHByb2dyZXNzICogOTA7XG4gICAgICB9XG5cbiAgICAgICRzbGlkZUVsLnRyYW5zZm9ybSh0cmFuc2Zvcm0pO1xuXG4gICAgICBpZiAocGFyYW1zLnNsaWRlU2hhZG93cykge1xuICAgICAgICAvLyBTZXQgc2hhZG93c1xuICAgICAgICB2YXIgc2hhZG93QmVmb3JlID0gaXNIb3Jpem9udGFsID8gJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpIDogJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wJyk7XG4gICAgICAgIHZhciBzaGFkb3dBZnRlciA9IGlzSG9yaXpvbnRhbCA/ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0JykgOiAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20nKTtcblxuICAgICAgICBpZiAoc2hhZG93QmVmb3JlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHNoYWRvd0JlZm9yZSA9ICQoXCI8ZGl2IGNsYXNzPVxcXCJzd2lwZXItc2xpZGUtc2hhZG93LVwiICsgKGlzSG9yaXpvbnRhbCA/ICdsZWZ0JyA6ICd0b3AnKSArIFwiXFxcIj48L2Rpdj5cIik7XG4gICAgICAgICAgJHNsaWRlRWwuYXBwZW5kKHNoYWRvd0JlZm9yZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hhZG93QWZ0ZXIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgc2hhZG93QWZ0ZXIgPSAkKFwiPGRpdiBjbGFzcz1cXFwic3dpcGVyLXNsaWRlLXNoYWRvdy1cIiArIChpc0hvcml6b250YWwgPyAncmlnaHQnIDogJ2JvdHRvbScpICsgXCJcXFwiPjwvZGl2PlwiKTtcbiAgICAgICAgICAkc2xpZGVFbC5hcHBlbmQoc2hhZG93QWZ0ZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYWRvd0JlZm9yZS5sZW5ndGgpIHNoYWRvd0JlZm9yZVswXS5zdHlsZS5vcGFjaXR5ID0gTWF0aC5tYXgoLXByb2dyZXNzLCAwKTtcbiAgICAgICAgaWYgKHNoYWRvd0FmdGVyLmxlbmd0aCkgc2hhZG93QWZ0ZXJbMF0uc3R5bGUub3BhY2l0eSA9IE1hdGgubWF4KHByb2dyZXNzLCAwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAkd3JhcHBlckVsLmNzcyh7XG4gICAgICAnLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luJzogXCI1MCUgNTAlIC1cIiArIHN3aXBlclNpemUgLyAyICsgXCJweFwiLFxuICAgICAgJy1tb3otdHJhbnNmb3JtLW9yaWdpbic6IFwiNTAlIDUwJSAtXCIgKyBzd2lwZXJTaXplIC8gMiArIFwicHhcIixcbiAgICAgICctbXMtdHJhbnNmb3JtLW9yaWdpbic6IFwiNTAlIDUwJSAtXCIgKyBzd2lwZXJTaXplIC8gMiArIFwicHhcIixcbiAgICAgICd0cmFuc2Zvcm0tb3JpZ2luJzogXCI1MCUgNTAlIC1cIiArIHN3aXBlclNpemUgLyAyICsgXCJweFwiXG4gICAgfSk7XG5cbiAgICBpZiAocGFyYW1zLnNoYWRvdykge1xuICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAkY3ViZVNoYWRvd0VsLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKDBweCwgXCIgKyAoc3dpcGVyV2lkdGggLyAyICsgcGFyYW1zLnNoYWRvd09mZnNldCkgKyBcInB4LCBcIiArIC1zd2lwZXJXaWR0aCAvIDIgKyBcInB4KSByb3RhdGVYKDkwZGVnKSByb3RhdGVaKDBkZWcpIHNjYWxlKFwiICsgcGFyYW1zLnNoYWRvd1NjYWxlICsgXCIpXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHNoYWRvd0FuZ2xlID0gTWF0aC5hYnMod3JhcHBlclJvdGF0ZSkgLSBNYXRoLmZsb29yKE1hdGguYWJzKHdyYXBwZXJSb3RhdGUpIC8gOTApICogOTA7XG4gICAgICAgIHZhciBtdWx0aXBsaWVyID0gMS41IC0gKE1hdGguc2luKHNoYWRvd0FuZ2xlICogMiAqIE1hdGguUEkgLyAzNjApIC8gMiArIE1hdGguY29zKHNoYWRvd0FuZ2xlICogMiAqIE1hdGguUEkgLyAzNjApIC8gMik7XG4gICAgICAgIHZhciBzY2FsZTEgPSBwYXJhbXMuc2hhZG93U2NhbGU7XG4gICAgICAgIHZhciBzY2FsZTIgPSBwYXJhbXMuc2hhZG93U2NhbGUgLyBtdWx0aXBsaWVyO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gcGFyYW1zLnNoYWRvd09mZnNldDtcbiAgICAgICAgJGN1YmVTaGFkb3dFbC50cmFuc2Zvcm0oXCJzY2FsZTNkKFwiICsgc2NhbGUxICsgXCIsIDEsIFwiICsgc2NhbGUyICsgXCIpIHRyYW5zbGF0ZTNkKDBweCwgXCIgKyAoc3dpcGVySGVpZ2h0IC8gMiArIG9mZnNldCkgKyBcInB4LCBcIiArIC1zd2lwZXJIZWlnaHQgLyAyIC8gc2NhbGUyICsgXCJweCkgcm90YXRlWCgtOTBkZWcpXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciB6RmFjdG9yID0gYnJvd3Nlci5pc1NhZmFyaSB8fCBicm93c2VyLmlzV2ViVmlldyA/IC1zd2lwZXJTaXplIC8gMiA6IDA7XG4gICAgJHdyYXBwZXJFbC50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZCgwcHgsMCxcIiArIHpGYWN0b3IgKyBcInB4KSByb3RhdGVYKFwiICsgKHN3aXBlci5pc0hvcml6b250YWwoKSA/IDAgOiB3cmFwcGVyUm90YXRlKSArIFwiZGVnKSByb3RhdGVZKFwiICsgKHN3aXBlci5pc0hvcml6b250YWwoKSA/IC13cmFwcGVyUm90YXRlIDogMCkgKyBcImRlZylcIik7XG4gIH0sXG4gIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgJGVsID0gc3dpcGVyLiRlbCxcbiAgICAgICAgc2xpZGVzID0gc3dpcGVyLnNsaWRlcztcbiAgICBzbGlkZXMudHJhbnNpdGlvbihkdXJhdGlvbikuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0JykudHJhbnNpdGlvbihkdXJhdGlvbik7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jdWJlRWZmZWN0LnNoYWRvdyAmJiAhc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAkZWwuZmluZCgnLnN3aXBlci1jdWJlLXNoYWRvdycpLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH1cbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2VmZmVjdC1jdWJlJyxcbiAgcGFyYW1zOiB7XG4gICAgY3ViZUVmZmVjdDoge1xuICAgICAgc2xpZGVTaGFkb3dzOiB0cnVlLFxuICAgICAgc2hhZG93OiB0cnVlLFxuICAgICAgc2hhZG93T2Zmc2V0OiAyMCxcbiAgICAgIHNoYWRvd1NjYWxlOiAwLjk0XG4gICAgfVxuICB9LFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBiaW5kTW9kdWxlTWV0aG9kcyhzd2lwZXIsIHtcbiAgICAgIGN1YmVFZmZlY3Q6IF9leHRlbmRzKHt9LCBDdWJlKVxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGJlZm9yZUluaXQ6IGZ1bmN0aW9uIGJlZm9yZUluaXQoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdjdWJlJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBcImN1YmVcIik7XG4gICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIFwiM2RcIik7XG4gICAgICB2YXIgb3ZlcndyaXRlUGFyYW1zID0ge1xuICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgICAgICBzbGlkZXNQZXJDb2x1bW46IDEsXG4gICAgICAgIHNsaWRlc1Blckdyb3VwOiAxLFxuICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgICByZXNpc3RhbmNlUmF0aW86IDAsXG4gICAgICAgIHNwYWNlQmV0d2VlbjogMCxcbiAgICAgICAgY2VudGVyZWRTbGlkZXM6IGZhbHNlLFxuICAgICAgICB2aXJ0dWFsVHJhbnNsYXRlOiB0cnVlXG4gICAgICB9O1xuICAgICAgZXh0ZW5kKHN3aXBlci5wYXJhbXMsIG92ZXJ3cml0ZVBhcmFtcyk7XG4gICAgICBleHRlbmQoc3dpcGVyLm9yaWdpbmFsUGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdjdWJlJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmN1YmVFZmZlY3Quc2V0VHJhbnNsYXRlKCk7XG4gICAgfSxcbiAgICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKHN3aXBlciwgZHVyYXRpb24pIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2N1YmUnKSByZXR1cm47XG4gICAgICBzd2lwZXIuY3ViZUVmZmVjdC5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICB9XG4gIH1cbn07IiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuaW1wb3J0IHsgZXh0ZW5kLCBiaW5kTW9kdWxlTWV0aG9kcyB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbnZhciBGYWRlID0ge1xuICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgc2xpZGVzID0gc3dpcGVyLnNsaWRlcztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2YXIgJHNsaWRlRWwgPSBzd2lwZXIuc2xpZGVzLmVxKGkpO1xuICAgICAgdmFyIG9mZnNldCA9ICRzbGlkZUVsWzBdLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgICAgdmFyIHR4ID0gLW9mZnNldDtcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB0eCAtPSBzd2lwZXIudHJhbnNsYXRlO1xuICAgICAgdmFyIHR5ID0gMDtcblxuICAgICAgaWYgKCFzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgdHkgPSB0eDtcbiAgICAgICAgdHggPSAwO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2xpZGVPcGFjaXR5ID0gc3dpcGVyLnBhcmFtcy5mYWRlRWZmZWN0LmNyb3NzRmFkZSA/IE1hdGgubWF4KDEgLSBNYXRoLmFicygkc2xpZGVFbFswXS5wcm9ncmVzcyksIDApIDogMSArIE1hdGgubWluKE1hdGgubWF4KCRzbGlkZUVsWzBdLnByb2dyZXNzLCAtMSksIDApO1xuICAgICAgJHNsaWRlRWwuY3NzKHtcbiAgICAgICAgb3BhY2l0eTogc2xpZGVPcGFjaXR5XG4gICAgICB9KS50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZChcIiArIHR4ICsgXCJweCwgXCIgKyB0eSArIFwicHgsIDBweClcIik7XG4gICAgfVxuICB9LFxuICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHNsaWRlcyA9IHN3aXBlci5zbGlkZXMsXG4gICAgICAgICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcbiAgICBzbGlkZXMudHJhbnNpdGlvbihkdXJhdGlvbik7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlICYmIGR1cmF0aW9uICE9PSAwKSB7XG4gICAgICB2YXIgZXZlbnRUcmlnZ2VyZWQgPSBmYWxzZTtcbiAgICAgIHNsaWRlcy50cmFuc2l0aW9uRW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGV2ZW50VHJpZ2dlcmVkKSByZXR1cm47XG4gICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgZXZlbnRUcmlnZ2VyZWQgPSB0cnVlO1xuICAgICAgICBzd2lwZXIuYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICAgIHZhciB0cmlnZ2VyRXZlbnRzID0gWyd3ZWJraXRUcmFuc2l0aW9uRW5kJywgJ3RyYW5zaXRpb25lbmQnXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyaWdnZXJFdmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAkd3JhcHBlckVsLnRyaWdnZXIodHJpZ2dlckV2ZW50c1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2VmZmVjdC1mYWRlJyxcbiAgcGFyYW1zOiB7XG4gICAgZmFkZUVmZmVjdDoge1xuICAgICAgY3Jvc3NGYWRlOiBmYWxzZVxuICAgIH1cbiAgfSxcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICBmYWRlRWZmZWN0OiBfZXh0ZW5kcyh7fSwgRmFkZSlcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBiZWZvcmVJbml0OiBmdW5jdGlvbiBiZWZvcmVJbml0KHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnZmFkZScpIHJldHVybjtcbiAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgXCJmYWRlXCIpO1xuICAgICAgdmFyIG92ZXJ3cml0ZVBhcmFtcyA9IHtcbiAgICAgICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICAgICAgc2xpZGVzUGVyQ29sdW1uOiAxLFxuICAgICAgICBzbGlkZXNQZXJHcm91cDogMSxcbiAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgc3BhY2VCZXR3ZWVuOiAwLFxuICAgICAgICB2aXJ0dWFsVHJhbnNsYXRlOiB0cnVlXG4gICAgICB9O1xuICAgICAgZXh0ZW5kKHN3aXBlci5wYXJhbXMsIG92ZXJ3cml0ZVBhcmFtcyk7XG4gICAgICBleHRlbmQoc3dpcGVyLm9yaWdpbmFsUGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdmYWRlJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmZhZGVFZmZlY3Quc2V0VHJhbnNsYXRlKCk7XG4gICAgfSxcbiAgICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKHN3aXBlciwgZHVyYXRpb24pIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2ZhZGUnKSByZXR1cm47XG4gICAgICBzd2lwZXIuZmFkZUVmZmVjdC5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICB9XG4gIH1cbn07IiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuaW1wb3J0ICQgZnJvbSAnLi4vLi4vdXRpbHMvZG9tJztcbmltcG9ydCB7IGV4dGVuZCwgYmluZE1vZHVsZU1ldGhvZHMgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG52YXIgRmxpcCA9IHtcbiAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHNsaWRlcyA9IHN3aXBlci5zbGlkZXMsXG4gICAgICAgIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGU7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmFyICRzbGlkZUVsID0gc2xpZGVzLmVxKGkpO1xuICAgICAgdmFyIHByb2dyZXNzID0gJHNsaWRlRWxbMF0ucHJvZ3Jlc3M7XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZsaXBFZmZlY3QubGltaXRSb3RhdGlvbikge1xuICAgICAgICBwcm9ncmVzcyA9IE1hdGgubWF4KE1hdGgubWluKCRzbGlkZUVsWzBdLnByb2dyZXNzLCAxKSwgLTEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2Zmc2V0ID0gJHNsaWRlRWxbMF0uc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgICB2YXIgcm90YXRlID0gLTE4MCAqIHByb2dyZXNzO1xuICAgICAgdmFyIHJvdGF0ZVkgPSByb3RhdGU7XG4gICAgICB2YXIgcm90YXRlWCA9IDA7XG4gICAgICB2YXIgdHggPSAtb2Zmc2V0O1xuICAgICAgdmFyIHR5ID0gMDtcblxuICAgICAgaWYgKCFzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgdHkgPSB0eDtcbiAgICAgICAgdHggPSAwO1xuICAgICAgICByb3RhdGVYID0gLXJvdGF0ZVk7XG4gICAgICAgIHJvdGF0ZVkgPSAwO1xuICAgICAgfSBlbHNlIGlmIChydGwpIHtcbiAgICAgICAgcm90YXRlWSA9IC1yb3RhdGVZO1xuICAgICAgfVxuXG4gICAgICAkc2xpZGVFbFswXS5zdHlsZS56SW5kZXggPSAtTWF0aC5hYnMoTWF0aC5yb3VuZChwcm9ncmVzcykpICsgc2xpZGVzLmxlbmd0aDtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZmxpcEVmZmVjdC5zbGlkZVNoYWRvd3MpIHtcbiAgICAgICAgLy8gU2V0IHNoYWRvd3NcbiAgICAgICAgdmFyIHNoYWRvd0JlZm9yZSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKSA6ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCcpO1xuICAgICAgICB2YXIgc2hhZG93QWZ0ZXIgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCcpIDogJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tJyk7XG5cbiAgICAgICAgaWYgKHNoYWRvd0JlZm9yZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBzaGFkb3dCZWZvcmUgPSAkKFwiPGRpdiBjbGFzcz1cXFwic3dpcGVyLXNsaWRlLXNoYWRvdy1cIiArIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnbGVmdCcgOiAndG9wJykgKyBcIlxcXCI+PC9kaXY+XCIpO1xuICAgICAgICAgICRzbGlkZUVsLmFwcGVuZChzaGFkb3dCZWZvcmUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYWRvd0FmdGVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHNoYWRvd0FmdGVyID0gJChcIjxkaXYgY2xhc3M9XFxcInN3aXBlci1zbGlkZS1zaGFkb3ctXCIgKyAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3JpZ2h0JyA6ICdib3R0b20nKSArIFwiXFxcIj48L2Rpdj5cIik7XG4gICAgICAgICAgJHNsaWRlRWwuYXBwZW5kKHNoYWRvd0FmdGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaGFkb3dCZWZvcmUubGVuZ3RoKSBzaGFkb3dCZWZvcmVbMF0uc3R5bGUub3BhY2l0eSA9IE1hdGgubWF4KC1wcm9ncmVzcywgMCk7XG4gICAgICAgIGlmIChzaGFkb3dBZnRlci5sZW5ndGgpIHNoYWRvd0FmdGVyWzBdLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1heChwcm9ncmVzcywgMCk7XG4gICAgICB9XG5cbiAgICAgICRzbGlkZUVsLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKFwiICsgdHggKyBcInB4LCBcIiArIHR5ICsgXCJweCwgMHB4KSByb3RhdGVYKFwiICsgcm90YXRlWCArIFwiZGVnKSByb3RhdGVZKFwiICsgcm90YXRlWSArIFwiZGVnKVwiKTtcbiAgICB9XG4gIH0sXG4gIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgc2xpZGVzID0gc3dpcGVyLnNsaWRlcyxcbiAgICAgICAgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXgsXG4gICAgICAgICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcbiAgICBzbGlkZXMudHJhbnNpdGlvbihkdXJhdGlvbikuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0JykudHJhbnNpdGlvbihkdXJhdGlvbik7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlICYmIGR1cmF0aW9uICE9PSAwKSB7XG4gICAgICB2YXIgZXZlbnRUcmlnZ2VyZWQgPSBmYWxzZTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cbiAgICAgIHNsaWRlcy5lcShhY3RpdmVJbmRleCkudHJhbnNpdGlvbkVuZChmdW5jdGlvbiBvblRyYW5zaXRpb25FbmQoKSB7XG4gICAgICAgIGlmIChldmVudFRyaWdnZXJlZCkgcmV0dXJuO1xuICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47IC8vIGlmICghJCh0aGlzKS5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpKSByZXR1cm47XG5cbiAgICAgICAgZXZlbnRUcmlnZ2VyZWQgPSB0cnVlO1xuICAgICAgICBzd2lwZXIuYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICAgIHZhciB0cmlnZ2VyRXZlbnRzID0gWyd3ZWJraXRUcmFuc2l0aW9uRW5kJywgJ3RyYW5zaXRpb25lbmQnXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyaWdnZXJFdmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAkd3JhcHBlckVsLnRyaWdnZXIodHJpZ2dlckV2ZW50c1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2VmZmVjdC1mbGlwJyxcbiAgcGFyYW1zOiB7XG4gICAgZmxpcEVmZmVjdDoge1xuICAgICAgc2xpZGVTaGFkb3dzOiB0cnVlLFxuICAgICAgbGltaXRSb3RhdGlvbjogdHJ1ZVxuICAgIH1cbiAgfSxcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICBmbGlwRWZmZWN0OiBfZXh0ZW5kcyh7fSwgRmxpcClcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBiZWZvcmVJbml0OiBmdW5jdGlvbiBiZWZvcmVJbml0KHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnZmxpcCcpIHJldHVybjtcbiAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgXCJmbGlwXCIpO1xuICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBcIjNkXCIpO1xuICAgICAgdmFyIG92ZXJ3cml0ZVBhcmFtcyA9IHtcbiAgICAgICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICAgICAgc2xpZGVzUGVyQ29sdW1uOiAxLFxuICAgICAgICBzbGlkZXNQZXJHcm91cDogMSxcbiAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgc3BhY2VCZXR3ZWVuOiAwLFxuICAgICAgICB2aXJ0dWFsVHJhbnNsYXRlOiB0cnVlXG4gICAgICB9O1xuICAgICAgZXh0ZW5kKHN3aXBlci5wYXJhbXMsIG92ZXJ3cml0ZVBhcmFtcyk7XG4gICAgICBleHRlbmQoc3dpcGVyLm9yaWdpbmFsUGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdmbGlwJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmZsaXBFZmZlY3Quc2V0VHJhbnNsYXRlKCk7XG4gICAgfSxcbiAgICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKHN3aXBlciwgZHVyYXRpb24pIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2ZsaXAnKSByZXR1cm47XG4gICAgICBzd2lwZXIuZmxpcEVmZmVjdC5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICB9XG4gIH1cbn07IiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuaW1wb3J0IHsgZ2V0V2luZG93LCBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0ICQgZnJvbSAnLi4vLi4vdXRpbHMvZG9tJztcbmltcG9ydCB7IGJpbmRNb2R1bGVNZXRob2RzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xudmFyIEhhc2hOYXZpZ2F0aW9uID0ge1xuICBvbkhhc2hDYW5nZTogZnVuY3Rpb24gb25IYXNoQ2FuZ2UoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICBzd2lwZXIuZW1pdCgnaGFzaENoYW5nZScpO1xuICAgIHZhciBuZXdIYXNoID0gZG9jdW1lbnQubG9jYXRpb24uaGFzaC5yZXBsYWNlKCcjJywgJycpO1xuICAgIHZhciBhY3RpdmVTbGlkZUhhc2ggPSBzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleCkuYXR0cignZGF0YS1oYXNoJyk7XG5cbiAgICBpZiAobmV3SGFzaCAhPT0gYWN0aXZlU2xpZGVIYXNoKSB7XG4gICAgICB2YXIgbmV3SW5kZXggPSBzd2lwZXIuJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcyArIFwiW2RhdGEtaGFzaD1cXFwiXCIgKyBuZXdIYXNoICsgXCJcXFwiXVwiKS5pbmRleCgpO1xuICAgICAgaWYgKHR5cGVvZiBuZXdJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcbiAgICAgIHN3aXBlci5zbGlkZVRvKG5ld0luZGV4KTtcbiAgICB9XG4gIH0sXG4gIHNldEhhc2g6IGZ1bmN0aW9uIHNldEhhc2goKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgaWYgKCFzd2lwZXIuaGFzaE5hdmlnYXRpb24uaW5pdGlhbGl6ZWQgfHwgIXN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZCkgcmV0dXJuO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24ucmVwbGFjZVN0YXRlICYmIHdpbmRvdy5oaXN0b3J5ICYmIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKG51bGwsIG51bGwsIFwiI1wiICsgc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpLmF0dHIoJ2RhdGEtaGFzaCcpIHx8ICcnKTtcbiAgICAgIHN3aXBlci5lbWl0KCdoYXNoU2V0Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzbGlkZSA9IHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIHZhciBoYXNoID0gc2xpZGUuYXR0cignZGF0YS1oYXNoJykgfHwgc2xpZGUuYXR0cignZGF0YS1oaXN0b3J5Jyk7XG4gICAgICBkb2N1bWVudC5sb2NhdGlvbi5oYXNoID0gaGFzaCB8fCAnJztcbiAgICAgIHN3aXBlci5lbWl0KCdoYXNoU2V0Jyk7XG4gICAgfVxuICB9LFxuICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkIHx8IHN3aXBlci5wYXJhbXMuaGlzdG9yeSAmJiBzd2lwZXIucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCkgcmV0dXJuO1xuICAgIHN3aXBlci5oYXNoTmF2aWdhdGlvbi5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgdmFyIGhhc2ggPSBkb2N1bWVudC5sb2NhdGlvbi5oYXNoLnJlcGxhY2UoJyMnLCAnJyk7XG5cbiAgICBpZiAoaGFzaCkge1xuICAgICAgdmFyIHNwZWVkID0gMDtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIHNsaWRlID0gc3dpcGVyLnNsaWRlcy5lcShpKTtcbiAgICAgICAgdmFyIHNsaWRlSGFzaCA9IHNsaWRlLmF0dHIoJ2RhdGEtaGFzaCcpIHx8IHNsaWRlLmF0dHIoJ2RhdGEtaGlzdG9yeScpO1xuXG4gICAgICAgIGlmIChzbGlkZUhhc2ggPT09IGhhc2ggJiYgIXNsaWRlLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHtcbiAgICAgICAgICB2YXIgaW5kZXggPSBzbGlkZS5pbmRleCgpO1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKGluZGV4LCBzcGVlZCwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24ud2F0Y2hTdGF0ZSkge1xuICAgICAgJCh3aW5kb3cpLm9uKCdoYXNoY2hhbmdlJywgc3dpcGVyLmhhc2hOYXZpZ2F0aW9uLm9uSGFzaENhbmdlKTtcbiAgICB9XG4gIH0sXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24ud2F0Y2hTdGF0ZSkge1xuICAgICAgJCh3aW5kb3cpLm9mZignaGFzaGNoYW5nZScsIHN3aXBlci5oYXNoTmF2aWdhdGlvbi5vbkhhc2hDYW5nZSk7XG4gICAgfVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnaGFzaC1uYXZpZ2F0aW9uJyxcbiAgcGFyYW1zOiB7XG4gICAgaGFzaE5hdmlnYXRpb246IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgcmVwbGFjZVN0YXRlOiBmYWxzZSxcbiAgICAgIHdhdGNoU3RhdGU6IGZhbHNlXG4gICAgfVxuICB9LFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBiaW5kTW9kdWxlTWV0aG9kcyhzd2lwZXIsIHtcbiAgICAgIGhhc2hOYXZpZ2F0aW9uOiBfZXh0ZW5kcyh7XG4gICAgICAgIGluaXRpYWxpemVkOiBmYWxzZVxuICAgICAgfSwgSGFzaE5hdmlnYXRpb24pXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdDogZnVuY3Rpb24gaW5pdChzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQpIHtcbiAgICAgICAgc3dpcGVyLmhhc2hOYXZpZ2F0aW9uLmluaXQoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci5oYXNoTmF2aWdhdGlvbi5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgfSxcbiAgICB0cmFuc2l0aW9uRW5kOiBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5oYXNoTmF2aWdhdGlvbi5pbml0aWFsaXplZCkge1xuICAgICAgICBzd2lwZXIuaGFzaE5hdmlnYXRpb24uc2V0SGFzaCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2xpZGVDaGFuZ2U6IGZ1bmN0aW9uIHNsaWRlQ2hhbmdlKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5oYXNoTmF2aWdhdGlvbi5pbml0aWFsaXplZCAmJiBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgc3dpcGVyLmhhc2hOYXZpZ2F0aW9uLnNldEhhc2goKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07IiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgeyBiaW5kTW9kdWxlTWV0aG9kcyB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbnZhciBIaXN0b3J5ID0ge1xuICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuaGlzdG9yeSkgcmV0dXJuO1xuXG4gICAgaWYgKCF3aW5kb3cuaGlzdG9yeSB8fCAhd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKSB7XG4gICAgICBzd2lwZXIucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkID0gdHJ1ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaGlzdG9yeSA9IHN3aXBlci5oaXN0b3J5O1xuICAgIGhpc3RvcnkuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIGhpc3RvcnkucGF0aHMgPSBIaXN0b3J5LmdldFBhdGhWYWx1ZXMoc3dpcGVyLnBhcmFtcy51cmwpO1xuICAgIGlmICghaGlzdG9yeS5wYXRocy5rZXkgJiYgIWhpc3RvcnkucGF0aHMudmFsdWUpIHJldHVybjtcbiAgICBoaXN0b3J5LnNjcm9sbFRvU2xpZGUoMCwgaGlzdG9yeS5wYXRocy52YWx1ZSwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQpO1xuXG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBzd2lwZXIuaGlzdG9yeS5zZXRIaXN0b3J5UG9wU3RhdGUpO1xuICAgIH1cbiAgfSxcbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG5cbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuaGlzdG9yeS5yZXBsYWNlU3RhdGUpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHN3aXBlci5oaXN0b3J5LnNldEhpc3RvcnlQb3BTdGF0ZSk7XG4gICAgfVxuICB9LFxuICBzZXRIaXN0b3J5UG9wU3RhdGU6IGZ1bmN0aW9uIHNldEhpc3RvcnlQb3BTdGF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBzd2lwZXIuaGlzdG9yeS5wYXRocyA9IEhpc3RvcnkuZ2V0UGF0aFZhbHVlcyhzd2lwZXIucGFyYW1zLnVybCk7XG4gICAgc3dpcGVyLmhpc3Rvcnkuc2Nyb2xsVG9TbGlkZShzd2lwZXIucGFyYW1zLnNwZWVkLCBzd2lwZXIuaGlzdG9yeS5wYXRocy52YWx1ZSwgZmFsc2UpO1xuICB9LFxuICBnZXRQYXRoVmFsdWVzOiBmdW5jdGlvbiBnZXRQYXRoVmFsdWVzKHVybE92ZXJyaWRlKSB7XG4gICAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgIHZhciBsb2NhdGlvbjtcblxuICAgIGlmICh1cmxPdmVycmlkZSkge1xuICAgICAgbG9jYXRpb24gPSBuZXcgVVJMKHVybE92ZXJyaWRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG4gICAgfVxuXG4gICAgdmFyIHBhdGhBcnJheSA9IGxvY2F0aW9uLnBhdGhuYW1lLnNsaWNlKDEpLnNwbGl0KCcvJykuZmlsdGVyKGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgICByZXR1cm4gcGFydCAhPT0gJyc7XG4gICAgfSk7XG4gICAgdmFyIHRvdGFsID0gcGF0aEFycmF5Lmxlbmd0aDtcbiAgICB2YXIga2V5ID0gcGF0aEFycmF5W3RvdGFsIC0gMl07XG4gICAgdmFyIHZhbHVlID0gcGF0aEFycmF5W3RvdGFsIC0gMV07XG4gICAgcmV0dXJuIHtcbiAgICAgIGtleToga2V5LFxuICAgICAgdmFsdWU6IHZhbHVlXG4gICAgfTtcbiAgfSxcbiAgc2V0SGlzdG9yeTogZnVuY3Rpb24gc2V0SGlzdG9yeShrZXksIGluZGV4KSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgIGlmICghc3dpcGVyLmhpc3RvcnkuaW5pdGlhbGl6ZWQgfHwgIXN3aXBlci5wYXJhbXMuaGlzdG9yeS5lbmFibGVkKSByZXR1cm47XG4gICAgdmFyIGxvY2F0aW9uO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMudXJsKSB7XG4gICAgICBsb2NhdGlvbiA9IG5ldyBVUkwoc3dpcGVyLnBhcmFtcy51cmwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICB9XG5cbiAgICB2YXIgc2xpZGUgPSBzd2lwZXIuc2xpZGVzLmVxKGluZGV4KTtcbiAgICB2YXIgdmFsdWUgPSBIaXN0b3J5LnNsdWdpZnkoc2xpZGUuYXR0cignZGF0YS1oaXN0b3J5JykpO1xuXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZS5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICB2YWx1ZSA9IGtleSArIFwiL1wiICsgdmFsdWU7XG4gICAgfVxuXG4gICAgdmFyIGN1cnJlbnRTdGF0ZSA9IHdpbmRvdy5oaXN0b3J5LnN0YXRlO1xuXG4gICAgaWYgKGN1cnJlbnRTdGF0ZSAmJiBjdXJyZW50U3RhdGUudmFsdWUgPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaGlzdG9yeS5yZXBsYWNlU3RhdGUpIHtcbiAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh7XG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfSwgbnVsbCwgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe1xuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH0sIG51bGwsIHZhbHVlKTtcbiAgICB9XG4gIH0sXG4gIHNsdWdpZnk6IGZ1bmN0aW9uIHNsdWdpZnkodGV4dCkge1xuICAgIHJldHVybiB0ZXh0LnRvU3RyaW5nKCkucmVwbGFjZSgvXFxzKy9nLCAnLScpLnJlcGxhY2UoL1teXFx3LV0rL2csICcnKS5yZXBsYWNlKC8tLSsvZywgJy0nKS5yZXBsYWNlKC9eLSsvLCAnJykucmVwbGFjZSgvLSskLywgJycpO1xuICB9LFxuICBzY3JvbGxUb1NsaWRlOiBmdW5jdGlvbiBzY3JvbGxUb1NsaWRlKHNwZWVkLCB2YWx1ZSwgcnVuQ2FsbGJhY2tzKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG5cbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBzd2lwZXIuc2xpZGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBzbGlkZSA9IHN3aXBlci5zbGlkZXMuZXEoaSk7XG4gICAgICAgIHZhciBzbGlkZUhpc3RvcnkgPSBIaXN0b3J5LnNsdWdpZnkoc2xpZGUuYXR0cignZGF0YS1oaXN0b3J5JykpO1xuXG4gICAgICAgIGlmIChzbGlkZUhpc3RvcnkgPT09IHZhbHVlICYmICFzbGlkZS5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAgICAgdmFyIGluZGV4ID0gc2xpZGUuaW5kZXgoKTtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhpbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oMCwgc3BlZWQsIHJ1bkNhbGxiYWNrcyk7XG4gICAgfVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnaGlzdG9yeScsXG4gIHBhcmFtczoge1xuICAgIGhpc3Rvcnk6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgcmVwbGFjZVN0YXRlOiBmYWxzZSxcbiAgICAgIGtleTogJ3NsaWRlcydcbiAgICB9XG4gIH0sXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGJpbmRNb2R1bGVNZXRob2RzKHN3aXBlciwge1xuICAgICAgaGlzdG9yeTogX2V4dGVuZHMoe30sIEhpc3RvcnkpXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdDogZnVuY3Rpb24gaW5pdChzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCkge1xuICAgICAgICBzd2lwZXIuaGlzdG9yeS5pbml0KCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuaGlzdG9yeS5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci5oaXN0b3J5LmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHRyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLmhpc3RvcnkuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgc3dpcGVyLmhpc3Rvcnkuc2V0SGlzdG9yeShzd2lwZXIucGFyYW1zLmhpc3Rvcnkua2V5LCBzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2xpZGVDaGFuZ2U6IGZ1bmN0aW9uIHNsaWRlQ2hhbmdlKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5oaXN0b3J5LmluaXRpYWxpemVkICYmIHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgICBzd2lwZXIuaGlzdG9yeS5zZXRIaXN0b3J5KHN3aXBlci5wYXJhbXMuaGlzdG9yeS5rZXksIHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59OyIsImZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmltcG9ydCB7IGdldFdpbmRvdywgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCAkIGZyb20gJy4uLy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQgeyBiaW5kTW9kdWxlTWV0aG9kcyB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbnZhciBLZXlib2FyZCA9IHtcbiAgaGFuZGxlOiBmdW5jdGlvbiBoYW5kbGUoZXZlbnQpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICB2YXIgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZTtcbiAgICB2YXIgZSA9IGV2ZW50O1xuICAgIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7IC8vIGpxdWVyeSBmaXhcblxuICAgIHZhciBrYyA9IGUua2V5Q29kZSB8fCBlLmNoYXJDb2RlO1xuICAgIHZhciBwYWdlVXBEb3duID0gc3dpcGVyLnBhcmFtcy5rZXlib2FyZC5wYWdlVXBEb3duO1xuICAgIHZhciBpc1BhZ2VVcCA9IHBhZ2VVcERvd24gJiYga2MgPT09IDMzO1xuICAgIHZhciBpc1BhZ2VEb3duID0gcGFnZVVwRG93biAmJiBrYyA9PT0gMzQ7XG4gICAgdmFyIGlzQXJyb3dMZWZ0ID0ga2MgPT09IDM3O1xuICAgIHZhciBpc0Fycm93UmlnaHQgPSBrYyA9PT0gMzk7XG4gICAgdmFyIGlzQXJyb3dVcCA9IGtjID09PSAzODtcbiAgICB2YXIgaXNBcnJvd0Rvd24gPSBrYyA9PT0gNDA7IC8vIERpcmVjdGlvbnMgbG9ja3NcblxuICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgaXNBcnJvd1JpZ2h0IHx8IHN3aXBlci5pc1ZlcnRpY2FsKCkgJiYgaXNBcnJvd0Rvd24gfHwgaXNQYWdlRG93bikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlUHJldiAmJiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIGlzQXJyb3dMZWZ0IHx8IHN3aXBlci5pc1ZlcnRpY2FsKCkgJiYgaXNBcnJvd1VwIHx8IGlzUGFnZVVwKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChlLnNoaWZ0S2V5IHx8IGUuYWx0S2V5IHx8IGUuY3RybEtleSB8fCBlLm1ldGFLZXkpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ub2RlTmFtZSAmJiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnIHx8IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RleHRhcmVhJykpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMua2V5Ym9hcmQub25seUluVmlld3BvcnQgJiYgKGlzUGFnZVVwIHx8IGlzUGFnZURvd24gfHwgaXNBcnJvd0xlZnQgfHwgaXNBcnJvd1JpZ2h0IHx8IGlzQXJyb3dVcCB8fCBpc0Fycm93RG93bikpIHtcbiAgICAgIHZhciBpblZpZXcgPSBmYWxzZTsgLy8gQ2hlY2sgdGhhdCBzd2lwZXIgc2hvdWxkIGJlIGluc2lkZSBvZiB2aXNpYmxlIGFyZWEgb2Ygd2luZG93XG5cbiAgICAgIGlmIChzd2lwZXIuJGVsLnBhcmVudHMoXCIuXCIgKyBzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3MpLmxlbmd0aCA+IDAgJiYgc3dpcGVyLiRlbC5wYXJlbnRzKFwiLlwiICsgc3dpcGVyLnBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgdmFyIHdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICB2YXIgd2luZG93SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgdmFyIHN3aXBlck9mZnNldCA9IHN3aXBlci4kZWwub2Zmc2V0KCk7XG4gICAgICBpZiAocnRsKSBzd2lwZXJPZmZzZXQubGVmdCAtPSBzd2lwZXIuJGVsWzBdLnNjcm9sbExlZnQ7XG4gICAgICB2YXIgc3dpcGVyQ29vcmQgPSBbW3N3aXBlck9mZnNldC5sZWZ0LCBzd2lwZXJPZmZzZXQudG9wXSwgW3N3aXBlck9mZnNldC5sZWZ0ICsgc3dpcGVyLndpZHRoLCBzd2lwZXJPZmZzZXQudG9wXSwgW3N3aXBlck9mZnNldC5sZWZ0LCBzd2lwZXJPZmZzZXQudG9wICsgc3dpcGVyLmhlaWdodF0sIFtzd2lwZXJPZmZzZXQubGVmdCArIHN3aXBlci53aWR0aCwgc3dpcGVyT2Zmc2V0LnRvcCArIHN3aXBlci5oZWlnaHRdXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzd2lwZXJDb29yZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgcG9pbnQgPSBzd2lwZXJDb29yZFtpXTtcblxuICAgICAgICBpZiAocG9pbnRbMF0gPj0gMCAmJiBwb2ludFswXSA8PSB3aW5kb3dXaWR0aCAmJiBwb2ludFsxXSA+PSAwICYmIHBvaW50WzFdIDw9IHdpbmRvd0hlaWdodCkge1xuICAgICAgICAgIGluVmlldyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFpblZpZXcpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgaWYgKGlzUGFnZVVwIHx8IGlzUGFnZURvd24gfHwgaXNBcnJvd0xlZnQgfHwgaXNBcnJvd1JpZ2h0KSB7XG4gICAgICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSBlLnByZXZlbnREZWZhdWx0KCk7ZWxzZSBlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICgoaXNQYWdlRG93biB8fCBpc0Fycm93UmlnaHQpICYmICFydGwgfHwgKGlzUGFnZVVwIHx8IGlzQXJyb3dMZWZ0KSAmJiBydGwpIHN3aXBlci5zbGlkZU5leHQoKTtcbiAgICAgIGlmICgoaXNQYWdlVXAgfHwgaXNBcnJvd0xlZnQpICYmICFydGwgfHwgKGlzUGFnZURvd24gfHwgaXNBcnJvd1JpZ2h0KSAmJiBydGwpIHN3aXBlci5zbGlkZVByZXYoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzUGFnZVVwIHx8IGlzUGFnZURvd24gfHwgaXNBcnJvd1VwIHx8IGlzQXJyb3dEb3duKSB7XG4gICAgICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSBlLnByZXZlbnREZWZhdWx0KCk7ZWxzZSBlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1BhZ2VEb3duIHx8IGlzQXJyb3dEb3duKSBzd2lwZXIuc2xpZGVOZXh0KCk7XG4gICAgICBpZiAoaXNQYWdlVXAgfHwgaXNBcnJvd1VwKSBzd2lwZXIuc2xpZGVQcmV2KCk7XG4gICAgfVxuXG4gICAgc3dpcGVyLmVtaXQoJ2tleVByZXNzJywga2MpO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0sXG4gIGVuYWJsZTogZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgaWYgKHN3aXBlci5rZXlib2FyZC5lbmFibGVkKSByZXR1cm47XG4gICAgJChkb2N1bWVudCkub24oJ2tleWRvd24nLCBzd2lwZXIua2V5Ym9hcmQuaGFuZGxlKTtcbiAgICBzd2lwZXIua2V5Ym9hcmQuZW5hYmxlZCA9IHRydWU7XG4gIH0sXG4gIGRpc2FibGU6IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICBpZiAoIXN3aXBlci5rZXlib2FyZC5lbmFibGVkKSByZXR1cm47XG4gICAgJChkb2N1bWVudCkub2ZmKCdrZXlkb3duJywgc3dpcGVyLmtleWJvYXJkLmhhbmRsZSk7XG4gICAgc3dpcGVyLmtleWJvYXJkLmVuYWJsZWQgPSBmYWxzZTtcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2tleWJvYXJkJyxcbiAgcGFyYW1zOiB7XG4gICAga2V5Ym9hcmQ6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgb25seUluVmlld3BvcnQ6IHRydWUsXG4gICAgICBwYWdlVXBEb3duOiB0cnVlXG4gICAgfVxuICB9LFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBiaW5kTW9kdWxlTWV0aG9kcyhzd2lwZXIsIHtcbiAgICAgIGtleWJvYXJkOiBfZXh0ZW5kcyh7XG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICB9LCBLZXlib2FyZClcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMua2V5Ym9hcmQuZW5hYmxlZCkge1xuICAgICAgICBzd2lwZXIua2V5Ym9hcmQuZW5hYmxlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5rZXlib2FyZC5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci5rZXlib2FyZC5kaXNhYmxlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59OyIsImZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmltcG9ydCAkIGZyb20gJy4uLy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQgeyBiaW5kTW9kdWxlTWV0aG9kcyB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbnZhciBMYXp5ID0ge1xuICBsb2FkSW5TbGlkZTogZnVuY3Rpb24gbG9hZEluU2xpZGUoaW5kZXgsIGxvYWRJbkR1cGxpY2F0ZSkge1xuICAgIGlmIChsb2FkSW5EdXBsaWNhdGUgPT09IHZvaWQgMCkge1xuICAgICAgbG9hZEluRHVwbGljYXRlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5sYXp5O1xuICAgIGlmICh0eXBlb2YgaW5kZXggPT09ICd1bmRlZmluZWQnKSByZXR1cm47XG4gICAgaWYgKHN3aXBlci5zbGlkZXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgdmFyIGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICAgIHZhciAkc2xpZGVFbCA9IGlzVmlydHVhbCA/IHN3aXBlci4kd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgc3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzICsgXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgaW5kZXggKyBcIlxcXCJdXCIpIDogc3dpcGVyLnNsaWRlcy5lcShpbmRleCk7XG4gICAgdmFyICRpbWFnZXMgPSAkc2xpZGVFbC5maW5kKFwiLlwiICsgcGFyYW1zLmVsZW1lbnRDbGFzcyArIFwiOm5vdCguXCIgKyBwYXJhbXMubG9hZGVkQ2xhc3MgKyBcIik6bm90KC5cIiArIHBhcmFtcy5sb2FkaW5nQ2xhc3MgKyBcIilcIik7XG5cbiAgICBpZiAoJHNsaWRlRWwuaGFzQ2xhc3MocGFyYW1zLmVsZW1lbnRDbGFzcykgJiYgISRzbGlkZUVsLmhhc0NsYXNzKHBhcmFtcy5sb2FkZWRDbGFzcykgJiYgISRzbGlkZUVsLmhhc0NsYXNzKHBhcmFtcy5sb2FkaW5nQ2xhc3MpKSB7XG4gICAgICAkaW1hZ2VzLnB1c2goJHNsaWRlRWxbMF0pO1xuICAgIH1cblxuICAgIGlmICgkaW1hZ2VzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgICRpbWFnZXMuZWFjaChmdW5jdGlvbiAoaW1hZ2VFbCkge1xuICAgICAgdmFyICRpbWFnZUVsID0gJChpbWFnZUVsKTtcbiAgICAgICRpbWFnZUVsLmFkZENsYXNzKHBhcmFtcy5sb2FkaW5nQ2xhc3MpO1xuICAgICAgdmFyIGJhY2tncm91bmQgPSAkaW1hZ2VFbC5hdHRyKCdkYXRhLWJhY2tncm91bmQnKTtcbiAgICAgIHZhciBzcmMgPSAkaW1hZ2VFbC5hdHRyKCdkYXRhLXNyYycpO1xuICAgICAgdmFyIHNyY3NldCA9ICRpbWFnZUVsLmF0dHIoJ2RhdGEtc3Jjc2V0Jyk7XG4gICAgICB2YXIgc2l6ZXMgPSAkaW1hZ2VFbC5hdHRyKCdkYXRhLXNpemVzJyk7XG4gICAgICB2YXIgJHBpY3R1cmVFbCA9ICRpbWFnZUVsLnBhcmVudCgncGljdHVyZScpO1xuICAgICAgc3dpcGVyLmxvYWRJbWFnZSgkaW1hZ2VFbFswXSwgc3JjIHx8IGJhY2tncm91bmQsIHNyY3NldCwgc2l6ZXMsIGZhbHNlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc3dpcGVyID09PSAndW5kZWZpbmVkJyB8fCBzd2lwZXIgPT09IG51bGwgfHwgIXN3aXBlciB8fCBzd2lwZXIgJiYgIXN3aXBlci5wYXJhbXMgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuXG4gICAgICAgIGlmIChiYWNrZ3JvdW5kKSB7XG4gICAgICAgICAgJGltYWdlRWwuY3NzKCdiYWNrZ3JvdW5kLWltYWdlJywgXCJ1cmwoXFxcIlwiICsgYmFja2dyb3VuZCArIFwiXFxcIilcIik7XG4gICAgICAgICAgJGltYWdlRWwucmVtb3ZlQXR0cignZGF0YS1iYWNrZ3JvdW5kJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHNyY3NldCkge1xuICAgICAgICAgICAgJGltYWdlRWwuYXR0cignc3Jjc2V0Jywgc3Jjc2V0KTtcbiAgICAgICAgICAgICRpbWFnZUVsLnJlbW92ZUF0dHIoJ2RhdGEtc3Jjc2V0Jyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNpemVzKSB7XG4gICAgICAgICAgICAkaW1hZ2VFbC5hdHRyKCdzaXplcycsIHNpemVzKTtcbiAgICAgICAgICAgICRpbWFnZUVsLnJlbW92ZUF0dHIoJ2RhdGEtc2l6ZXMnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoJHBpY3R1cmVFbC5sZW5ndGgpIHtcbiAgICAgICAgICAgICRwaWN0dXJlRWwuY2hpbGRyZW4oJ3NvdXJjZScpLmVhY2goZnVuY3Rpb24gKHNvdXJjZUVsKSB7XG4gICAgICAgICAgICAgIHZhciAkc291cmNlID0gJChzb3VyY2VFbCk7XG5cbiAgICAgICAgICAgICAgaWYgKCRzb3VyY2UuYXR0cignZGF0YS1zcmNzZXQnKSkge1xuICAgICAgICAgICAgICAgICRzb3VyY2UuYXR0cignc3Jjc2V0JywgJHNvdXJjZS5hdHRyKCdkYXRhLXNyY3NldCcpKTtcbiAgICAgICAgICAgICAgICAkc291cmNlLnJlbW92ZUF0dHIoJ2RhdGEtc3Jjc2V0Jyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzcmMpIHtcbiAgICAgICAgICAgICRpbWFnZUVsLmF0dHIoJ3NyYycsIHNyYyk7XG4gICAgICAgICAgICAkaW1hZ2VFbC5yZW1vdmVBdHRyKCdkYXRhLXNyYycpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgICRpbWFnZUVsLmFkZENsYXNzKHBhcmFtcy5sb2FkZWRDbGFzcykucmVtb3ZlQ2xhc3MocGFyYW1zLmxvYWRpbmdDbGFzcyk7XG4gICAgICAgICRzbGlkZUVsLmZpbmQoXCIuXCIgKyBwYXJhbXMucHJlbG9hZGVyQ2xhc3MpLnJlbW92ZSgpO1xuXG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3AgJiYgbG9hZEluRHVwbGljYXRlKSB7XG4gICAgICAgICAgdmFyIHNsaWRlT3JpZ2luYWxJbmRleCA9ICRzbGlkZUVsLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG5cbiAgICAgICAgICBpZiAoJHNsaWRlRWwuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICAgICAgdmFyIG9yaWdpbmFsU2xpZGUgPSBzd2lwZXIuJHdyYXBwZXJFbC5jaGlsZHJlbihcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBzbGlkZU9yaWdpbmFsSW5kZXggKyBcIlxcXCJdOm5vdCguXCIgKyBzd2lwZXIucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MgKyBcIilcIik7XG4gICAgICAgICAgICBzd2lwZXIubGF6eS5sb2FkSW5TbGlkZShvcmlnaW5hbFNsaWRlLmluZGV4KCksIGZhbHNlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGR1cGxpY2F0ZWRTbGlkZSA9IHN3aXBlci4kd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgc3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzICsgXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgc2xpZGVPcmlnaW5hbEluZGV4ICsgXCJcXFwiXVwiKTtcbiAgICAgICAgICAgIHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKGR1cGxpY2F0ZWRTbGlkZS5pbmRleCgpLCBmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc3dpcGVyLmVtaXQoJ2xhenlJbWFnZVJlYWR5JywgJHNsaWRlRWxbMF0sICRpbWFnZUVsWzBdKTtcblxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICAgICAgc3dpcGVyLnVwZGF0ZUF1dG9IZWlnaHQoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBzd2lwZXIuZW1pdCgnbGF6eUltYWdlTG9hZCcsICRzbGlkZUVsWzBdLCAkaW1hZ2VFbFswXSk7XG4gICAgfSk7XG4gIH0sXG4gIGxvYWQ6IGZ1bmN0aW9uIGxvYWQoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbCxcbiAgICAgICAgc3dpcGVyUGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgICAgc2xpZGVzID0gc3dpcGVyLnNsaWRlcyxcbiAgICAgICAgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgdmFyIGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlclBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlclBhcmFtcy5sYXp5O1xuICAgIHZhciBzbGlkZXNQZXJWaWV3ID0gc3dpcGVyUGFyYW1zLnNsaWRlc1BlclZpZXc7XG5cbiAgICBpZiAoc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nKSB7XG4gICAgICBzbGlkZXNQZXJWaWV3ID0gMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzbGlkZUV4aXN0KGluZGV4KSB7XG4gICAgICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgICAgIGlmICgkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgc3dpcGVyUGFyYW1zLnNsaWRlQ2xhc3MgKyBcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBpbmRleCArIFwiXFxcIl1cIikubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc2xpZGVzW2luZGV4XSkgcmV0dXJuIHRydWU7XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzbGlkZUluZGV4KHNsaWRlRWwpIHtcbiAgICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgICAgcmV0dXJuICQoc2xpZGVFbCkuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICQoc2xpZGVFbCkuaW5kZXgoKTtcbiAgICB9XG5cbiAgICBpZiAoIXN3aXBlci5sYXp5LmluaXRpYWxJbWFnZUxvYWRlZCkgc3dpcGVyLmxhenkuaW5pdGlhbEltYWdlTG9hZGVkID0gdHJ1ZTtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoU2xpZGVzVmlzaWJpbGl0eSkge1xuICAgICAgJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHN3aXBlclBhcmFtcy5zbGlkZVZpc2libGVDbGFzcykuZWFjaChmdW5jdGlvbiAoc2xpZGVFbCkge1xuICAgICAgICB2YXIgaW5kZXggPSBpc1ZpcnR1YWwgPyAkKHNsaWRlRWwpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgOiAkKHNsaWRlRWwpLmluZGV4KCk7XG4gICAgICAgIHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKGluZGV4KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoc2xpZGVzUGVyVmlldyA+IDEpIHtcbiAgICAgIGZvciAodmFyIGkgPSBhY3RpdmVJbmRleDsgaSA8IGFjdGl2ZUluZGV4ICsgc2xpZGVzUGVyVmlldzsgaSArPSAxKSB7XG4gICAgICAgIGlmIChzbGlkZUV4aXN0KGkpKSBzd2lwZXIubGF6eS5sb2FkSW5TbGlkZShpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmxhenkubG9hZEluU2xpZGUoYWN0aXZlSW5kZXgpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMubG9hZFByZXZOZXh0KSB7XG4gICAgICBpZiAoc2xpZGVzUGVyVmlldyA+IDEgfHwgcGFyYW1zLmxvYWRQcmV2TmV4dEFtb3VudCAmJiBwYXJhbXMubG9hZFByZXZOZXh0QW1vdW50ID4gMSkge1xuICAgICAgICB2YXIgYW1vdW50ID0gcGFyYW1zLmxvYWRQcmV2TmV4dEFtb3VudDtcbiAgICAgICAgdmFyIHNwdiA9IHNsaWRlc1BlclZpZXc7XG4gICAgICAgIHZhciBtYXhJbmRleCA9IE1hdGgubWluKGFjdGl2ZUluZGV4ICsgc3B2ICsgTWF0aC5tYXgoYW1vdW50LCBzcHYpLCBzbGlkZXMubGVuZ3RoKTtcbiAgICAgICAgdmFyIG1pbkluZGV4ID0gTWF0aC5tYXgoYWN0aXZlSW5kZXggLSBNYXRoLm1heChzcHYsIGFtb3VudCksIDApOyAvLyBOZXh0IFNsaWRlc1xuXG4gICAgICAgIGZvciAodmFyIF9pID0gYWN0aXZlSW5kZXggKyBzbGlkZXNQZXJWaWV3OyBfaSA8IG1heEluZGV4OyBfaSArPSAxKSB7XG4gICAgICAgICAgaWYgKHNsaWRlRXhpc3QoX2kpKSBzd2lwZXIubGF6eS5sb2FkSW5TbGlkZShfaSk7XG4gICAgICAgIH0gLy8gUHJldiBTbGlkZXNcblxuXG4gICAgICAgIGZvciAodmFyIF9pMiA9IG1pbkluZGV4OyBfaTIgPCBhY3RpdmVJbmRleDsgX2kyICs9IDEpIHtcbiAgICAgICAgICBpZiAoc2xpZGVFeGlzdChfaTIpKSBzd2lwZXIubGF6eS5sb2FkSW5TbGlkZShfaTIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbmV4dFNsaWRlID0gJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHN3aXBlclBhcmFtcy5zbGlkZU5leHRDbGFzcyk7XG4gICAgICAgIGlmIChuZXh0U2xpZGUubGVuZ3RoID4gMCkgc3dpcGVyLmxhenkubG9hZEluU2xpZGUoc2xpZGVJbmRleChuZXh0U2xpZGUpKTtcbiAgICAgICAgdmFyIHByZXZTbGlkZSA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBzd2lwZXJQYXJhbXMuc2xpZGVQcmV2Q2xhc3MpO1xuICAgICAgICBpZiAocHJldlNsaWRlLmxlbmd0aCA+IDApIHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKHNsaWRlSW5kZXgocHJldlNsaWRlKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnbGF6eScsXG4gIHBhcmFtczoge1xuICAgIGxhenk6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgbG9hZFByZXZOZXh0OiBmYWxzZSxcbiAgICAgIGxvYWRQcmV2TmV4dEFtb3VudDogMSxcbiAgICAgIGxvYWRPblRyYW5zaXRpb25TdGFydDogZmFsc2UsXG4gICAgICBlbGVtZW50Q2xhc3M6ICdzd2lwZXItbGF6eScsXG4gICAgICBsb2FkaW5nQ2xhc3M6ICdzd2lwZXItbGF6eS1sb2FkaW5nJyxcbiAgICAgIGxvYWRlZENsYXNzOiAnc3dpcGVyLWxhenktbG9hZGVkJyxcbiAgICAgIHByZWxvYWRlckNsYXNzOiAnc3dpcGVyLWxhenktcHJlbG9hZGVyJ1xuICAgIH1cbiAgfSxcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICBsYXp5OiBfZXh0ZW5kcyh7XG4gICAgICAgIGluaXRpYWxJbWFnZUxvYWRlZDogZmFsc2VcbiAgICAgIH0sIExhenkpXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgYmVmb3JlSW5pdDogZnVuY3Rpb24gYmVmb3JlSW5pdChzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLnByZWxvYWRJbWFnZXMpIHtcbiAgICAgICAgc3dpcGVyLnBhcmFtcy5wcmVsb2FkSW1hZ2VzID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSxcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkICYmICFzd2lwZXIucGFyYW1zLmxvb3AgJiYgc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUgPT09IDApIHtcbiAgICAgICAgc3dpcGVyLmxhenkubG9hZCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2Nyb2xsOiBmdW5jdGlvbiBzY3JvbGwoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSAmJiAhc3dpcGVyLnBhcmFtcy5mcmVlTW9kZVN0aWNreSkge1xuICAgICAgICBzd2lwZXIubGF6eS5sb2FkKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZXNpemU6IGZ1bmN0aW9uIHJlc2l6ZShzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCkge1xuICAgICAgICBzd2lwZXIubGF6eS5sb2FkKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzY3JvbGxiYXJEcmFnTW92ZTogZnVuY3Rpb24gc2Nyb2xsYmFyRHJhZ01vdmUoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmVuYWJsZWQpIHtcbiAgICAgICAgc3dpcGVyLmxhenkubG9hZCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdHJhbnNpdGlvblN0YXJ0OiBmdW5jdGlvbiB0cmFuc2l0aW9uU3RhcnQoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmVuYWJsZWQpIHtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5sb2FkT25UcmFuc2l0aW9uU3RhcnQgfHwgIXN3aXBlci5wYXJhbXMubGF6eS5sb2FkT25UcmFuc2l0aW9uU3RhcnQgJiYgIXN3aXBlci5sYXp5LmluaXRpYWxJbWFnZUxvYWRlZCkge1xuICAgICAgICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgdHJhbnNpdGlvbkVuZDogZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCAmJiAhc3dpcGVyLnBhcmFtcy5sYXp5LmxvYWRPblRyYW5zaXRpb25TdGFydCkge1xuICAgICAgICBzd2lwZXIubGF6eS5sb2FkKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzbGlkZUNoYW5nZTogZnVuY3Rpb24gc2xpZGVDaGFuZ2Uoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmVuYWJsZWQgJiYgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07IiwiaW1wb3J0IHsgZ2V0V2luZG93LCBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0ICQgZnJvbSAnLi4vLi4vdXRpbHMvZG9tJztcbmltcG9ydCB7IG5vdywgbmV4dFRpY2ssIGJpbmRNb2R1bGVNZXRob2RzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xuXG5mdW5jdGlvbiBpc0V2ZW50U3VwcG9ydGVkKCkge1xuICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICB2YXIgZXZlbnROYW1lID0gJ29ud2hlZWwnO1xuICB2YXIgaXNTdXBwb3J0ZWQgPSAoZXZlbnROYW1lIGluIGRvY3VtZW50KTtcblxuICBpZiAoIWlzU3VwcG9ydGVkKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShldmVudE5hbWUsICdyZXR1cm47Jyk7XG4gICAgaXNTdXBwb3J0ZWQgPSB0eXBlb2YgZWxlbWVudFtldmVudE5hbWVdID09PSAnZnVuY3Rpb24nO1xuICB9XG5cbiAgaWYgKCFpc1N1cHBvcnRlZCAmJiBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbiAmJiBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlICYmIC8vIGFsd2F5cyByZXR1cm5zIHRydWUgaW4gbmV3ZXIgYnJvd3NlcnMgYXMgcGVyIHRoZSBzdGFuZGFyZC5cbiAgLy8gQHNlZSBodHRwOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLWRvbWltcGxlbWVudGF0aW9uLWhhc2ZlYXR1cmVcbiAgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnJywgJycpICE9PSB0cnVlKSB7XG4gICAgLy8gVGhpcyBpcyB0aGUgb25seSB3YXkgdG8gdGVzdCBzdXBwb3J0IGZvciB0aGUgYHdoZWVsYCBldmVudCBpbiBJRTkrLlxuICAgIGlzU3VwcG9ydGVkID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnRXZlbnRzLndoZWVsJywgJzMuMCcpO1xuICB9XG5cbiAgcmV0dXJuIGlzU3VwcG9ydGVkO1xufVxuXG52YXIgTW91c2V3aGVlbCA9IHtcbiAgbGFzdFNjcm9sbFRpbWU6IG5vdygpLFxuICBsYXN0RXZlbnRCZWZvcmVTbmFwOiB1bmRlZmluZWQsXG4gIHJlY2VudFdoZWVsRXZlbnRzOiBbXSxcbiAgZXZlbnQ6IGZ1bmN0aW9uIGV2ZW50KCkge1xuICAgIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICBpZiAod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignZmlyZWZveCcpID4gLTEpIHJldHVybiAnRE9NTW91c2VTY3JvbGwnO1xuICAgIHJldHVybiBpc0V2ZW50U3VwcG9ydGVkKCkgPyAnd2hlZWwnIDogJ21vdXNld2hlZWwnO1xuICB9LFxuICBub3JtYWxpemU6IGZ1bmN0aW9uIG5vcm1hbGl6ZShlKSB7XG4gICAgLy8gUmVhc29uYWJsZSBkZWZhdWx0c1xuICAgIHZhciBQSVhFTF9TVEVQID0gMTA7XG4gICAgdmFyIExJTkVfSEVJR0hUID0gNDA7XG4gICAgdmFyIFBBR0VfSEVJR0hUID0gODAwO1xuICAgIHZhciBzWCA9IDA7XG4gICAgdmFyIHNZID0gMDsgLy8gc3BpblgsIHNwaW5ZXG5cbiAgICB2YXIgcFggPSAwO1xuICAgIHZhciBwWSA9IDA7IC8vIHBpeGVsWCwgcGl4ZWxZXG4gICAgLy8gTGVnYWN5XG5cbiAgICBpZiAoJ2RldGFpbCcgaW4gZSkge1xuICAgICAgc1kgPSBlLmRldGFpbDtcbiAgICB9XG5cbiAgICBpZiAoJ3doZWVsRGVsdGEnIGluIGUpIHtcbiAgICAgIHNZID0gLWUud2hlZWxEZWx0YSAvIDEyMDtcbiAgICB9XG5cbiAgICBpZiAoJ3doZWVsRGVsdGFZJyBpbiBlKSB7XG4gICAgICBzWSA9IC1lLndoZWVsRGVsdGFZIC8gMTIwO1xuICAgIH1cblxuICAgIGlmICgnd2hlZWxEZWx0YVgnIGluIGUpIHtcbiAgICAgIHNYID0gLWUud2hlZWxEZWx0YVggLyAxMjA7XG4gICAgfSAvLyBzaWRlIHNjcm9sbGluZyBvbiBGRiB3aXRoIERPTU1vdXNlU2Nyb2xsXG5cblxuICAgIGlmICgnYXhpcycgaW4gZSAmJiBlLmF4aXMgPT09IGUuSE9SSVpPTlRBTF9BWElTKSB7XG4gICAgICBzWCA9IHNZO1xuICAgICAgc1kgPSAwO1xuICAgIH1cblxuICAgIHBYID0gc1ggKiBQSVhFTF9TVEVQO1xuICAgIHBZID0gc1kgKiBQSVhFTF9TVEVQO1xuXG4gICAgaWYgKCdkZWx0YVknIGluIGUpIHtcbiAgICAgIHBZID0gZS5kZWx0YVk7XG4gICAgfVxuXG4gICAgaWYgKCdkZWx0YVgnIGluIGUpIHtcbiAgICAgIHBYID0gZS5kZWx0YVg7XG4gICAgfVxuXG4gICAgaWYgKGUuc2hpZnRLZXkgJiYgIXBYKSB7XG4gICAgICAvLyBpZiB1c2VyIHNjcm9sbHMgd2l0aCBzaGlmdCBoZSB3YW50cyBob3Jpem9udGFsIHNjcm9sbFxuICAgICAgcFggPSBwWTtcbiAgICAgIHBZID0gMDtcbiAgICB9XG5cbiAgICBpZiAoKHBYIHx8IHBZKSAmJiBlLmRlbHRhTW9kZSkge1xuICAgICAgaWYgKGUuZGVsdGFNb2RlID09PSAxKSB7XG4gICAgICAgIC8vIGRlbHRhIGluIExJTkUgdW5pdHNcbiAgICAgICAgcFggKj0gTElORV9IRUlHSFQ7XG4gICAgICAgIHBZICo9IExJTkVfSEVJR0hUO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVsdGEgaW4gUEFHRSB1bml0c1xuICAgICAgICBwWCAqPSBQQUdFX0hFSUdIVDtcbiAgICAgICAgcFkgKj0gUEFHRV9IRUlHSFQ7XG4gICAgICB9XG4gICAgfSAvLyBGYWxsLWJhY2sgaWYgc3BpbiBjYW5ub3QgYmUgZGV0ZXJtaW5lZFxuXG5cbiAgICBpZiAocFggJiYgIXNYKSB7XG4gICAgICBzWCA9IHBYIDwgMSA/IC0xIDogMTtcbiAgICB9XG5cbiAgICBpZiAocFkgJiYgIXNZKSB7XG4gICAgICBzWSA9IHBZIDwgMSA/IC0xIDogMTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgc3Bpblg6IHNYLFxuICAgICAgc3Bpblk6IHNZLFxuICAgICAgcGl4ZWxYOiBwWCxcbiAgICAgIHBpeGVsWTogcFlcbiAgICB9O1xuICB9LFxuICBoYW5kbGVNb3VzZUVudGVyOiBmdW5jdGlvbiBoYW5kbGVNb3VzZUVudGVyKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5tb3VzZUVudGVyZWQgPSB0cnVlO1xuICB9LFxuICBoYW5kbGVNb3VzZUxlYXZlOiBmdW5jdGlvbiBoYW5kbGVNb3VzZUxlYXZlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5tb3VzZUVudGVyZWQgPSBmYWxzZTtcbiAgfSxcbiAgaGFuZGxlOiBmdW5jdGlvbiBoYW5kbGUoZXZlbnQpIHtcbiAgICB2YXIgZSA9IGV2ZW50O1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLm1vdXNld2hlZWw7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldCA9IHN3aXBlci4kZWw7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdldCAhPT0gJ2NvbnRhaW5lcicpIHtcbiAgICAgIHRhcmdldCA9ICQoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdldCk7XG4gICAgfVxuXG4gICAgaWYgKCFzd2lwZXIubW91c2VFbnRlcmVkICYmICF0YXJnZXRbMF0uY29udGFpbnMoZS50YXJnZXQpICYmICFwYXJhbXMucmVsZWFzZU9uRWRnZXMpIHJldHVybiB0cnVlO1xuICAgIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7IC8vIGpxdWVyeSBmaXhcblxuICAgIHZhciBkZWx0YSA9IDA7XG4gICAgdmFyIHJ0bEZhY3RvciA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyAtMSA6IDE7XG4gICAgdmFyIGRhdGEgPSBNb3VzZXdoZWVsLm5vcm1hbGl6ZShlKTtcblxuICAgIGlmIChwYXJhbXMuZm9yY2VUb0F4aXMpIHtcbiAgICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgaWYgKE1hdGguYWJzKGRhdGEucGl4ZWxYKSA+IE1hdGguYWJzKGRhdGEucGl4ZWxZKSkgZGVsdGEgPSAtZGF0YS5waXhlbFggKiBydGxGYWN0b3I7ZWxzZSByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoTWF0aC5hYnMoZGF0YS5waXhlbFkpID4gTWF0aC5hYnMoZGF0YS5waXhlbFgpKSBkZWx0YSA9IC1kYXRhLnBpeGVsWTtlbHNlIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWx0YSA9IE1hdGguYWJzKGRhdGEucGl4ZWxYKSA+IE1hdGguYWJzKGRhdGEucGl4ZWxZKSA/IC1kYXRhLnBpeGVsWCAqIHJ0bEZhY3RvciA6IC1kYXRhLnBpeGVsWTtcbiAgICB9XG5cbiAgICBpZiAoZGVsdGEgPT09IDApIHJldHVybiB0cnVlO1xuICAgIGlmIChwYXJhbXMuaW52ZXJ0KSBkZWx0YSA9IC1kZWx0YTtcblxuICAgIGlmICghc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSkge1xuICAgICAgLy8gUmVnaXN0ZXIgdGhlIG5ldyBldmVudCBpbiBhIHZhcmlhYmxlIHdoaWNoIHN0b3JlcyB0aGUgcmVsZXZhbnQgZGF0YVxuICAgICAgdmFyIG5ld0V2ZW50ID0ge1xuICAgICAgICB0aW1lOiBub3coKSxcbiAgICAgICAgZGVsdGE6IE1hdGguYWJzKGRlbHRhKSxcbiAgICAgICAgZGlyZWN0aW9uOiBNYXRoLnNpZ24oZGVsdGEpLFxuICAgICAgICByYXc6IGV2ZW50XG4gICAgICB9OyAvLyBLZWVwIHRoZSBtb3N0IHJlY2VudCBldmVudHNcblxuICAgICAgdmFyIHJlY2VudFdoZWVsRXZlbnRzID0gc3dpcGVyLm1vdXNld2hlZWwucmVjZW50V2hlZWxFdmVudHM7XG5cbiAgICAgIGlmIChyZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggPj0gMikge1xuICAgICAgICByZWNlbnRXaGVlbEV2ZW50cy5zaGlmdCgpOyAvLyBvbmx5IHN0b3JlIHRoZSBsYXN0IE4gZXZlbnRzXG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2RXZlbnQgPSByZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggPyByZWNlbnRXaGVlbEV2ZW50c1tyZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcbiAgICAgIHJlY2VudFdoZWVsRXZlbnRzLnB1c2gobmV3RXZlbnQpOyAvLyBJZiB0aGVyZSBpcyBhdCBsZWFzdCBvbmUgcHJldmlvdXMgcmVjb3JkZWQgZXZlbnQ6XG4gICAgICAvLyAgIElmIGRpcmVjdGlvbiBoYXMgY2hhbmdlZCBvclxuICAgICAgLy8gICBpZiB0aGUgc2Nyb2xsIGlzIHF1aWNrZXIgdGhhbiB0aGUgcHJldmlvdXMgb25lOlxuICAgICAgLy8gICAgIEFuaW1hdGUgdGhlIHNsaWRlci5cbiAgICAgIC8vIEVsc2UgKHRoaXMgaXMgdGhlIGZpcnN0IHRpbWUgdGhlIHdoZWVsIGlzIG1vdmVkKTpcbiAgICAgIC8vICAgICBBbmltYXRlIHRoZSBzbGlkZXIuXG5cbiAgICAgIGlmIChwcmV2RXZlbnQpIHtcbiAgICAgICAgaWYgKG5ld0V2ZW50LmRpcmVjdGlvbiAhPT0gcHJldkV2ZW50LmRpcmVjdGlvbiB8fCBuZXdFdmVudC5kZWx0YSA+IHByZXZFdmVudC5kZWx0YSB8fCBuZXdFdmVudC50aW1lID4gcHJldkV2ZW50LnRpbWUgKyAxNTApIHtcbiAgICAgICAgICBzd2lwZXIubW91c2V3aGVlbC5hbmltYXRlU2xpZGVyKG5ld0V2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwuYW5pbWF0ZVNsaWRlcihuZXdFdmVudCk7XG4gICAgICB9IC8vIElmIGl0J3MgdGltZSB0byByZWxlYXNlIHRoZSBzY3JvbGw6XG4gICAgICAvLyAgIFJldHVybiBub3cgc28geW91IGRvbid0IGhpdCB0aGUgcHJldmVudERlZmF1bHQuXG5cblxuICAgICAgaWYgKHN3aXBlci5tb3VzZXdoZWVsLnJlbGVhc2VTY3JvbGwobmV3RXZlbnQpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBGcmVlbW9kZSBvciBzY3JvbGxDb250YWluZXI6XG4gICAgICAvLyBJZiB3ZSByZWNlbnRseSBzbmFwcGVkIGFmdGVyIGEgbW9tZW50dW0gc2Nyb2xsLCB0aGVuIGlnbm9yZSB3aGVlbCBldmVudHNcbiAgICAgIC8vIHRvIGdpdmUgdGltZSBmb3IgdGhlIGRlY2VsZXJhdGlvbiB0byBmaW5pc2guIFN0b3AgaWdub3JpbmcgYWZ0ZXIgNTAwIG1zZWNzXG4gICAgICAvLyBvciBpZiBpdCdzIGEgbmV3IHNjcm9sbCAobGFyZ2VyIGRlbHRhIG9yIGludmVyc2Ugc2lnbiBhcyBsYXN0IGV2ZW50IGJlZm9yZVxuICAgICAgLy8gYW4gZW5kLW9mLW1vbWVudHVtIHNuYXApLlxuICAgICAgdmFyIF9uZXdFdmVudCA9IHtcbiAgICAgICAgdGltZTogbm93KCksXG4gICAgICAgIGRlbHRhOiBNYXRoLmFicyhkZWx0YSksXG4gICAgICAgIGRpcmVjdGlvbjogTWF0aC5zaWduKGRlbHRhKVxuICAgICAgfTtcbiAgICAgIHZhciBsYXN0RXZlbnRCZWZvcmVTbmFwID0gc3dpcGVyLm1vdXNld2hlZWwubGFzdEV2ZW50QmVmb3JlU25hcDtcbiAgICAgIHZhciBpZ25vcmVXaGVlbEV2ZW50cyA9IGxhc3RFdmVudEJlZm9yZVNuYXAgJiYgX25ld0V2ZW50LnRpbWUgPCBsYXN0RXZlbnRCZWZvcmVTbmFwLnRpbWUgKyA1MDAgJiYgX25ld0V2ZW50LmRlbHRhIDw9IGxhc3RFdmVudEJlZm9yZVNuYXAuZGVsdGEgJiYgX25ld0V2ZW50LmRpcmVjdGlvbiA9PT0gbGFzdEV2ZW50QmVmb3JlU25hcC5kaXJlY3Rpb247XG5cbiAgICAgIGlmICghaWdub3JlV2hlZWxFdmVudHMpIHtcbiAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwubGFzdEV2ZW50QmVmb3JlU25hcCA9IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwb3NpdGlvbiA9IHN3aXBlci5nZXRUcmFuc2xhdGUoKSArIGRlbHRhICogcGFyYW1zLnNlbnNpdGl2aXR5O1xuICAgICAgICB2YXIgd2FzQmVnaW5uaW5nID0gc3dpcGVyLmlzQmVnaW5uaW5nO1xuICAgICAgICB2YXIgd2FzRW5kID0gc3dpcGVyLmlzRW5kO1xuICAgICAgICBpZiAocG9zaXRpb24gPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSBwb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgICAgICAgaWYgKHBvc2l0aW9uIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkgcG9zaXRpb24gPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gICAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHBvc2l0aW9uKTtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuXG4gICAgICAgIGlmICghd2FzQmVnaW5uaW5nICYmIHN3aXBlci5pc0JlZ2lubmluZyB8fCAhd2FzRW5kICYmIHN3aXBlci5pc0VuZCkge1xuICAgICAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5mcmVlTW9kZVN0aWNreSkge1xuICAgICAgICAgIC8vIFdoZW4gd2hlZWwgc2Nyb2xsaW5nIHN0YXJ0cyB3aXRoIHN0aWNreSAoYWthIHNuYXApIGVuYWJsZWQsIHRoZW4gZGV0ZWN0XG4gICAgICAgICAgLy8gdGhlIGVuZCBvZiBhIG1vbWVudHVtIHNjcm9sbCBieSBzdG9yaW5nIHJlY2VudCAoTj0xNT8pIHdoZWVsIGV2ZW50cy5cbiAgICAgICAgICAvLyAxLiBkbyBhbGwgTiBldmVudHMgaGF2ZSBkZWNyZWFzaW5nIG9yIHNhbWUgKGFic29sdXRlIHZhbHVlKSBkZWx0YT9cbiAgICAgICAgICAvLyAyLiBkaWQgYWxsIE4gZXZlbnRzIGFycml2ZSBpbiB0aGUgbGFzdCBNIChNPTUwMD8pIG1zZWNzP1xuICAgICAgICAgIC8vIDMuIGRvZXMgdGhlIGVhcmxpZXN0IGV2ZW50IGhhdmUgYW4gKGFic29sdXRlIHZhbHVlKSBkZWx0YSB0aGF0J3NcbiAgICAgICAgICAvLyAgICBhdCBsZWFzdCBQIChQPTE/KSBsYXJnZXIgdGhhbiB0aGUgbW9zdCByZWNlbnQgZXZlbnQncyBkZWx0YT9cbiAgICAgICAgICAvLyA0LiBkb2VzIHRoZSBsYXRlc3QgZXZlbnQgaGF2ZSBhIGRlbHRhIHRoYXQncyBzbWFsbGVyIHRoYW4gUSAoUT02PykgcGl4ZWxzP1xuICAgICAgICAgIC8vIElmIDEtNCBhcmUgXCJ5ZXNcIiB0aGVuIHdlJ3JlIG5lYXIgdGhlIGVuZCBvZiBhIG1vbXVudHVtIHNjcm9sbCBkZWNlbGVyYXRpb24uXG4gICAgICAgICAgLy8gU25hcCBpbW1lZGlhdGVseSBhbmQgaWdub3JlIHJlbWFpbmluZyB3aGVlbCBldmVudHMgaW4gdGhpcyBzY3JvbGwuXG4gICAgICAgICAgLy8gU2VlIGNvbW1lbnQgYWJvdmUgZm9yIFwicmVtYWluaW5nIHdoZWVsIGV2ZW50cyBpbiB0aGlzIHNjcm9sbFwiIGRldGVybWluYXRpb24uXG4gICAgICAgICAgLy8gSWYgMS00IGFyZW4ndCBzYXRpc2ZpZWQsIHRoZW4gd2FpdCB0byBzbmFwIHVudGlsIDUwMG1zIGFmdGVyIHRoZSBsYXN0IGV2ZW50LlxuICAgICAgICAgIGNsZWFyVGltZW91dChzd2lwZXIubW91c2V3aGVlbC50aW1lb3V0KTtcbiAgICAgICAgICBzd2lwZXIubW91c2V3aGVlbC50aW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHZhciBfcmVjZW50V2hlZWxFdmVudHMgPSBzd2lwZXIubW91c2V3aGVlbC5yZWNlbnRXaGVlbEV2ZW50cztcblxuICAgICAgICAgIGlmIChfcmVjZW50V2hlZWxFdmVudHMubGVuZ3RoID49IDE1KSB7XG4gICAgICAgICAgICBfcmVjZW50V2hlZWxFdmVudHMuc2hpZnQoKTsgLy8gb25seSBzdG9yZSB0aGUgbGFzdCBOIGV2ZW50c1xuXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIF9wcmV2RXZlbnQgPSBfcmVjZW50V2hlZWxFdmVudHMubGVuZ3RoID8gX3JlY2VudFdoZWVsRXZlbnRzW19yZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgIHZhciBmaXJzdEV2ZW50ID0gX3JlY2VudFdoZWVsRXZlbnRzWzBdO1xuXG4gICAgICAgICAgX3JlY2VudFdoZWVsRXZlbnRzLnB1c2goX25ld0V2ZW50KTtcblxuICAgICAgICAgIGlmIChfcHJldkV2ZW50ICYmIChfbmV3RXZlbnQuZGVsdGEgPiBfcHJldkV2ZW50LmRlbHRhIHx8IF9uZXdFdmVudC5kaXJlY3Rpb24gIT09IF9wcmV2RXZlbnQuZGlyZWN0aW9uKSkge1xuICAgICAgICAgICAgLy8gSW5jcmVhc2luZyBvciByZXZlcnNlLXNpZ24gZGVsdGEgbWVhbnMgdGhlIHVzZXIgc3RhcnRlZCBzY3JvbGxpbmcgYWdhaW4uIENsZWFyIHRoZSB3aGVlbCBldmVudCBsb2cuXG4gICAgICAgICAgICBfcmVjZW50V2hlZWxFdmVudHMuc3BsaWNlKDApO1xuICAgICAgICAgIH0gZWxzZSBpZiAoX3JlY2VudFdoZWVsRXZlbnRzLmxlbmd0aCA+PSAxNSAmJiBfbmV3RXZlbnQudGltZSAtIGZpcnN0RXZlbnQudGltZSA8IDUwMCAmJiBmaXJzdEV2ZW50LmRlbHRhIC0gX25ld0V2ZW50LmRlbHRhID49IDEgJiYgX25ld0V2ZW50LmRlbHRhIDw9IDYpIHtcbiAgICAgICAgICAgIC8vIFdlJ3JlIGF0IHRoZSBlbmQgb2YgdGhlIGRlY2VsZXJhdGlvbiBvZiBhIG1vbWVudHVtIHNjcm9sbCwgc28gdGhlcmUncyBubyBuZWVkXG4gICAgICAgICAgICAvLyB0byB3YWl0IGZvciBtb3JlIGV2ZW50cy4gU25hcCBBU0FQIG9uIHRoZSBuZXh0IHRpY2suXG4gICAgICAgICAgICAvLyBBbHNvLCBiZWNhdXNlIHRoZXJlJ3Mgc29tZSByZW1haW5pbmcgbW9tZW50dW0gd2UnbGwgYmlhcyB0aGUgc25hcCBpbiB0aGVcbiAgICAgICAgICAgIC8vIGRpcmVjdGlvbiBvZiB0aGUgb25nb2luZyBzY3JvbGwgYmVjYXVzZSBpdCdzIGJldHRlciBVWCBmb3IgdGhlIHNjcm9sbCB0byBzbmFwXG4gICAgICAgICAgICAvLyBpbiB0aGUgc2FtZSBkaXJlY3Rpb24gYXMgdGhlIHNjcm9sbCBpbnN0ZWFkIG9mIHJldmVyc2luZyB0byBzbmFwLiAgVGhlcmVmb3JlLFxuICAgICAgICAgICAgLy8gaWYgaXQncyBhbHJlYWR5IHNjcm9sbGVkIG1vcmUgdGhhbiAyMCUgaW4gdGhlIGN1cnJlbnQgZGlyZWN0aW9uLCBrZWVwIGdvaW5nLlxuICAgICAgICAgICAgdmFyIHNuYXBUb1RocmVzaG9sZCA9IGRlbHRhID4gMCA/IDAuOCA6IDAuMjtcbiAgICAgICAgICAgIHN3aXBlci5tb3VzZXdoZWVsLmxhc3RFdmVudEJlZm9yZVNuYXAgPSBfbmV3RXZlbnQ7XG5cbiAgICAgICAgICAgIF9yZWNlbnRXaGVlbEV2ZW50cy5zcGxpY2UoMCk7XG5cbiAgICAgICAgICAgIHN3aXBlci5tb3VzZXdoZWVsLnRpbWVvdXQgPSBuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdChzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB1bmRlZmluZWQsIHNuYXBUb1RocmVzaG9sZCk7XG4gICAgICAgICAgICB9LCAwKTsgLy8gbm8gZGVsYXk7IG1vdmUgb24gbmV4dCB0aWNrXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFzd2lwZXIubW91c2V3aGVlbC50aW1lb3V0KSB7XG4gICAgICAgICAgICAvLyBpZiB3ZSBnZXQgaGVyZSwgdGhlbiB3ZSBoYXZlbid0IGRldGVjdGVkIHRoZSBlbmQgb2YgYSBtb21lbnR1bSBzY3JvbGwsIHNvXG4gICAgICAgICAgICAvLyB3ZSdsbCBjb25zaWRlciBhIHNjcm9sbCBcImNvbXBsZXRlXCIgd2hlbiB0aGVyZSBoYXZlbid0IGJlZW4gYW55IHdoZWVsIGV2ZW50c1xuICAgICAgICAgICAgLy8gZm9yIDUwMG1zLlxuICAgICAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwudGltZW91dCA9IG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdmFyIHNuYXBUb1RocmVzaG9sZCA9IDAuNTtcbiAgICAgICAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwubGFzdEV2ZW50QmVmb3JlU25hcCA9IF9uZXdFdmVudDtcblxuICAgICAgICAgICAgICBfcmVjZW50V2hlZWxFdmVudHMuc3BsaWNlKDApO1xuXG4gICAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdChzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB1bmRlZmluZWQsIHNuYXBUb1RocmVzaG9sZCk7XG4gICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBFbWl0IGV2ZW50XG5cblxuICAgICAgICBpZiAoIWlnbm9yZVdoZWVsRXZlbnRzKSBzd2lwZXIuZW1pdCgnc2Nyb2xsJywgZSk7IC8vIFN0b3AgYXV0b3BsYXlcblxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheSAmJiBzd2lwZXIucGFyYW1zLmF1dG9wbGF5RGlzYWJsZU9uSW50ZXJhY3Rpb24pIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7IC8vIFJldHVybiBwYWdlIHNjcm9sbCBvbiBlZGdlIHBvc2l0aW9uc1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIHx8IHBvc2l0aW9uID09PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSBlLnByZXZlbnREZWZhdWx0KCk7ZWxzZSBlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBhbmltYXRlU2xpZGVyOiBmdW5jdGlvbiBhbmltYXRlU2xpZGVyKG5ld0V2ZW50KSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuXG4gICAgaWYgKHRoaXMucGFyYW1zLm1vdXNld2hlZWwudGhyZXNob2xkRGVsdGEgJiYgbmV3RXZlbnQuZGVsdGEgPCB0aGlzLnBhcmFtcy5tb3VzZXdoZWVsLnRocmVzaG9sZERlbHRhKSB7XG4gICAgICAvLyBQcmV2ZW50IGlmIGRlbHRhIG9mIHdoZWVsIHNjcm9sbCBkZWx0YSBpcyBiZWxvdyBjb25maWd1cmVkIHRocmVzaG9sZFxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnBhcmFtcy5tb3VzZXdoZWVsLnRocmVzaG9sZFRpbWUgJiYgbm93KCkgLSBzd2lwZXIubW91c2V3aGVlbC5sYXN0U2Nyb2xsVGltZSA8IHRoaXMucGFyYW1zLm1vdXNld2hlZWwudGhyZXNob2xkVGltZSkge1xuICAgICAgLy8gUHJldmVudCBpZiB0aW1lIGJldHdlZW4gc2Nyb2xscyBpcyBiZWxvdyBjb25maWd1cmVkIHRocmVzaG9sZFxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gLy8gSWYgdGhlIG1vdmVtZW50IGlzIE5PVCBiaWcgZW5vdWdoIGFuZFxuICAgIC8vIGlmIHRoZSBsYXN0IHRpbWUgdGhlIHVzZXIgc2Nyb2xsZWQgd2FzIHRvbyBjbG9zZSB0byB0aGUgY3VycmVudCBvbmUgKGF2b2lkIGNvbnRpbnVvdXNseSB0cmlnZ2VyaW5nIHRoZSBzbGlkZXIpOlxuICAgIC8vICAgRG9uJ3QgZ28gYW55IGZ1cnRoZXIgKGF2b2lkIGluc2lnbmlmaWNhbnQgc2Nyb2xsIG1vdmVtZW50KS5cblxuXG4gICAgaWYgKG5ld0V2ZW50LmRlbHRhID49IDYgJiYgbm93KCkgLSBzd2lwZXIubW91c2V3aGVlbC5sYXN0U2Nyb2xsVGltZSA8IDYwKSB7XG4gICAgICAvLyBSZXR1cm4gZmFsc2UgYXMgYSBkZWZhdWx0XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IC8vIElmIHVzZXIgaXMgc2Nyb2xsaW5nIHRvd2FyZHMgdGhlIGVuZDpcbiAgICAvLyAgIElmIHRoZSBzbGlkZXIgaGFzbid0IGhpdCB0aGUgbGF0ZXN0IHNsaWRlIG9yXG4gICAgLy8gICBpZiB0aGUgc2xpZGVyIGlzIGEgbG9vcCBhbmRcbiAgICAvLyAgIGlmIHRoZSBzbGlkZXIgaXNuJ3QgbW92aW5nIHJpZ2h0IG5vdzpcbiAgICAvLyAgICAgR28gdG8gbmV4dCBzbGlkZSBhbmRcbiAgICAvLyAgICAgZW1pdCBhIHNjcm9sbCBldmVudC5cbiAgICAvLyBFbHNlICh0aGUgdXNlciBpcyBzY3JvbGxpbmcgdG93YXJkcyB0aGUgYmVnaW5uaW5nKSBhbmRcbiAgICAvLyBpZiB0aGUgc2xpZGVyIGhhc24ndCBoaXQgdGhlIGZpcnN0IHNsaWRlIG9yXG4gICAgLy8gaWYgdGhlIHNsaWRlciBpcyBhIGxvb3AgYW5kXG4gICAgLy8gaWYgdGhlIHNsaWRlciBpc24ndCBtb3ZpbmcgcmlnaHQgbm93OlxuICAgIC8vICAgR28gdG8gcHJldiBzbGlkZSBhbmRcbiAgICAvLyAgIGVtaXQgYSBzY3JvbGwgZXZlbnQuXG5cblxuICAgIGlmIChuZXdFdmVudC5kaXJlY3Rpb24gPCAwKSB7XG4gICAgICBpZiAoKCFzd2lwZXIuaXNFbmQgfHwgc3dpcGVyLnBhcmFtcy5sb29wKSAmJiAhc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgICBzd2lwZXIuc2xpZGVOZXh0KCk7XG4gICAgICAgIHN3aXBlci5lbWl0KCdzY3JvbGwnLCBuZXdFdmVudC5yYXcpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoKCFzd2lwZXIuaXNCZWdpbm5pbmcgfHwgc3dpcGVyLnBhcmFtcy5sb29wKSAmJiAhc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgICAgc3dpcGVyLmVtaXQoJ3Njcm9sbCcsIG5ld0V2ZW50LnJhdyk7XG4gICAgfSAvLyBJZiB5b3UgZ290IGhlcmUgaXMgYmVjYXVzZSBhbiBhbmltYXRpb24gaGFzIGJlZW4gdHJpZ2dlcmVkIHNvIHN0b3JlIHRoZSBjdXJyZW50IHRpbWVcblxuXG4gICAgc3dpcGVyLm1vdXNld2hlZWwubGFzdFNjcm9sbFRpbWUgPSBuZXcgd2luZG93LkRhdGUoKS5nZXRUaW1lKCk7IC8vIFJldHVybiBmYWxzZSBhcyBhIGRlZmF1bHRcblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgcmVsZWFzZVNjcm9sbDogZnVuY3Rpb24gcmVsZWFzZVNjcm9sbChuZXdFdmVudCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLm1vdXNld2hlZWw7XG5cbiAgICBpZiAobmV3RXZlbnQuZGlyZWN0aW9uIDwgMCkge1xuICAgICAgaWYgKHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wICYmIHBhcmFtcy5yZWxlYXNlT25FZGdlcykge1xuICAgICAgICAvLyBSZXR1cm4gdHJ1ZSB0byBhbmltYXRlIHNjcm9sbCBvbiBlZGdlc1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5sb29wICYmIHBhcmFtcy5yZWxlYXNlT25FZGdlcykge1xuICAgICAgLy8gUmV0dXJuIHRydWUgdG8gYW5pbWF0ZSBzY3JvbGwgb24gZWRnZXNcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgZW5hYmxlOiBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIGV2ZW50ID0gTW91c2V3aGVlbC5ldmVudCgpO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBzd2lwZXIubW91c2V3aGVlbC5oYW5kbGUpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKCFldmVudCkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChzd2lwZXIubW91c2V3aGVlbC5lbmFibGVkKSByZXR1cm4gZmFsc2U7XG4gICAgdmFyIHRhcmdldCA9IHN3aXBlci4kZWw7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdldCAhPT0gJ2NvbnRhaW5lcicpIHtcbiAgICAgIHRhcmdldCA9ICQoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdldCk7XG4gICAgfVxuXG4gICAgdGFyZ2V0Lm9uKCdtb3VzZWVudGVyJywgc3dpcGVyLm1vdXNld2hlZWwuaGFuZGxlTW91c2VFbnRlcik7XG4gICAgdGFyZ2V0Lm9uKCdtb3VzZWxlYXZlJywgc3dpcGVyLm1vdXNld2hlZWwuaGFuZGxlTW91c2VMZWF2ZSk7XG4gICAgdGFyZ2V0Lm9uKGV2ZW50LCBzd2lwZXIubW91c2V3aGVlbC5oYW5kbGUpO1xuICAgIHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQgPSB0cnVlO1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBkaXNhYmxlOiBmdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBldmVudCA9IE1vdXNld2hlZWwuZXZlbnQoKTtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHN3aXBlci53cmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgc3dpcGVyLm1vdXNld2hlZWwuaGFuZGxlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmICghZXZlbnQpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoIXN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQpIHJldHVybiBmYWxzZTtcbiAgICB2YXIgdGFyZ2V0ID0gc3dpcGVyLiRlbDtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZXZlbnRzVGFyZ2V0ICE9PSAnY29udGFpbmVyJykge1xuICAgICAgdGFyZ2V0ID0gJChzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZXZlbnRzVGFyZ2V0KTtcbiAgICB9XG5cbiAgICB0YXJnZXQub2ZmKGV2ZW50LCBzd2lwZXIubW91c2V3aGVlbC5oYW5kbGUpO1xuICAgIHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ21vdXNld2hlZWwnLFxuICBwYXJhbXM6IHtcbiAgICBtb3VzZXdoZWVsOiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIHJlbGVhc2VPbkVkZ2VzOiBmYWxzZSxcbiAgICAgIGludmVydDogZmFsc2UsXG4gICAgICBmb3JjZVRvQXhpczogZmFsc2UsXG4gICAgICBzZW5zaXRpdml0eTogMSxcbiAgICAgIGV2ZW50c1RhcmdldDogJ2NvbnRhaW5lcicsXG4gICAgICB0aHJlc2hvbGREZWx0YTogbnVsbCxcbiAgICAgIHRocmVzaG9sZFRpbWU6IG51bGxcbiAgICB9XG4gIH0sXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGJpbmRNb2R1bGVNZXRob2RzKHN3aXBlciwge1xuICAgICAgbW91c2V3aGVlbDoge1xuICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgbGFzdFNjcm9sbFRpbWU6IG5vdygpLFxuICAgICAgICBsYXN0RXZlbnRCZWZvcmVTbmFwOiB1bmRlZmluZWQsXG4gICAgICAgIHJlY2VudFdoZWVsRXZlbnRzOiBbXSxcbiAgICAgICAgZW5hYmxlOiBNb3VzZXdoZWVsLmVuYWJsZSxcbiAgICAgICAgZGlzYWJsZTogTW91c2V3aGVlbC5kaXNhYmxlLFxuICAgICAgICBoYW5kbGU6IE1vdXNld2hlZWwuaGFuZGxlLFxuICAgICAgICBoYW5kbGVNb3VzZUVudGVyOiBNb3VzZXdoZWVsLmhhbmRsZU1vdXNlRW50ZXIsXG4gICAgICAgIGhhbmRsZU1vdXNlTGVhdmU6IE1vdXNld2hlZWwuaGFuZGxlTW91c2VMZWF2ZSxcbiAgICAgICAgYW5pbWF0ZVNsaWRlcjogTW91c2V3aGVlbC5hbmltYXRlU2xpZGVyLFxuICAgICAgICByZWxlYXNlU2Nyb2xsOiBNb3VzZXdoZWVsLnJlbGVhc2VTY3JvbGxcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHN3aXBlcikge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwuZGlzYWJsZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmVuYWJsZWQpIHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZSgpO1xuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveShzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwuZW5hYmxlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzd2lwZXIubW91c2V3aGVlbC5lbmFibGVkKSBzd2lwZXIubW91c2V3aGVlbC5kaXNhYmxlKCk7XG4gICAgfVxuICB9XG59OyIsImZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmltcG9ydCAkIGZyb20gJy4uLy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQgeyBleHRlbmQsIGJpbmRNb2R1bGVNZXRob2RzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xudmFyIE5hdmlnYXRpb24gPSB7XG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIC8vIFVwZGF0ZSBOYXZpZ2F0aW9uIEJ1dHRvbnNcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHJldHVybjtcbiAgICB2YXIgX3N3aXBlciRuYXZpZ2F0aW9uID0gc3dpcGVyLm5hdmlnYXRpb24sXG4gICAgICAgICRuZXh0RWwgPSBfc3dpcGVyJG5hdmlnYXRpb24uJG5leHRFbCxcbiAgICAgICAgJHByZXZFbCA9IF9zd2lwZXIkbmF2aWdhdGlvbi4kcHJldkVsO1xuXG4gICAgaWYgKCRwcmV2RWwgJiYgJHByZXZFbC5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nKSB7XG4gICAgICAgICRwcmV2RWwuYWRkQ2xhc3MocGFyYW1zLmRpc2FibGVkQ2xhc3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJHByZXZFbC5yZW1vdmVDbGFzcyhwYXJhbXMuZGlzYWJsZWRDbGFzcyk7XG4gICAgICB9XG5cbiAgICAgICRwcmV2RWxbc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXShwYXJhbXMubG9ja0NsYXNzKTtcbiAgICB9XG5cbiAgICBpZiAoJG5leHRFbCAmJiAkbmV4dEVsLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmIChzd2lwZXIuaXNFbmQpIHtcbiAgICAgICAgJG5leHRFbC5hZGRDbGFzcyhwYXJhbXMuZGlzYWJsZWRDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkbmV4dEVsLnJlbW92ZUNsYXNzKHBhcmFtcy5kaXNhYmxlZENsYXNzKTtcbiAgICAgIH1cblxuICAgICAgJG5leHRFbFtzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKHBhcmFtcy5sb2NrQ2xhc3MpO1xuICAgIH1cbiAgfSxcbiAgb25QcmV2Q2xpY2s6IGZ1bmN0aW9uIG9uUHJldkNsaWNrKGUpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKHN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5sb29wKSByZXR1cm47XG4gICAgc3dpcGVyLnNsaWRlUHJldigpO1xuICB9LFxuICBvbk5leHRDbGljazogZnVuY3Rpb24gb25OZXh0Q2xpY2soZSkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLmxvb3ApIHJldHVybjtcbiAgICBzd2lwZXIuc2xpZGVOZXh0KCk7XG4gIH0sXG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbjtcbiAgICBpZiAoIShwYXJhbXMubmV4dEVsIHx8IHBhcmFtcy5wcmV2RWwpKSByZXR1cm47XG4gICAgdmFyICRuZXh0RWw7XG4gICAgdmFyICRwcmV2RWw7XG5cbiAgICBpZiAocGFyYW1zLm5leHRFbCkge1xuICAgICAgJG5leHRFbCA9ICQocGFyYW1zLm5leHRFbCk7XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmIHR5cGVvZiBwYXJhbXMubmV4dEVsID09PSAnc3RyaW5nJyAmJiAkbmV4dEVsLmxlbmd0aCA+IDEgJiYgc3dpcGVyLiRlbC5maW5kKHBhcmFtcy5uZXh0RWwpLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAkbmV4dEVsID0gc3dpcGVyLiRlbC5maW5kKHBhcmFtcy5uZXh0RWwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwYXJhbXMucHJldkVsKSB7XG4gICAgICAkcHJldkVsID0gJChwYXJhbXMucHJldkVsKTtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMudW5pcXVlTmF2RWxlbWVudHMgJiYgdHlwZW9mIHBhcmFtcy5wcmV2RWwgPT09ICdzdHJpbmcnICYmICRwcmV2RWwubGVuZ3RoID4gMSAmJiBzd2lwZXIuJGVsLmZpbmQocGFyYW1zLnByZXZFbCkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICRwcmV2RWwgPSBzd2lwZXIuJGVsLmZpbmQocGFyYW1zLnByZXZFbCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCRuZXh0RWwgJiYgJG5leHRFbC5sZW5ndGggPiAwKSB7XG4gICAgICAkbmV4dEVsLm9uKCdjbGljaycsIHN3aXBlci5uYXZpZ2F0aW9uLm9uTmV4dENsaWNrKTtcbiAgICB9XG5cbiAgICBpZiAoJHByZXZFbCAmJiAkcHJldkVsLmxlbmd0aCA+IDApIHtcbiAgICAgICRwcmV2RWwub24oJ2NsaWNrJywgc3dpcGVyLm5hdmlnYXRpb24ub25QcmV2Q2xpY2spO1xuICAgIH1cblxuICAgIGV4dGVuZChzd2lwZXIubmF2aWdhdGlvbiwge1xuICAgICAgJG5leHRFbDogJG5leHRFbCxcbiAgICAgIG5leHRFbDogJG5leHRFbCAmJiAkbmV4dEVsWzBdLFxuICAgICAgJHByZXZFbDogJHByZXZFbCxcbiAgICAgIHByZXZFbDogJHByZXZFbCAmJiAkcHJldkVsWzBdXG4gICAgfSk7XG4gIH0sXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIF9zd2lwZXIkbmF2aWdhdGlvbjIgPSBzd2lwZXIubmF2aWdhdGlvbixcbiAgICAgICAgJG5leHRFbCA9IF9zd2lwZXIkbmF2aWdhdGlvbjIuJG5leHRFbCxcbiAgICAgICAgJHByZXZFbCA9IF9zd2lwZXIkbmF2aWdhdGlvbjIuJHByZXZFbDtcblxuICAgIGlmICgkbmV4dEVsICYmICRuZXh0RWwubGVuZ3RoKSB7XG4gICAgICAkbmV4dEVsLm9mZignY2xpY2snLCBzd2lwZXIubmF2aWdhdGlvbi5vbk5leHRDbGljayk7XG4gICAgICAkbmV4dEVsLnJlbW92ZUNsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5kaXNhYmxlZENsYXNzKTtcbiAgICB9XG5cbiAgICBpZiAoJHByZXZFbCAmJiAkcHJldkVsLmxlbmd0aCkge1xuICAgICAgJHByZXZFbC5vZmYoJ2NsaWNrJywgc3dpcGVyLm5hdmlnYXRpb24ub25QcmV2Q2xpY2spO1xuICAgICAgJHByZXZFbC5yZW1vdmVDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uZGlzYWJsZWRDbGFzcyk7XG4gICAgfVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnbmF2aWdhdGlvbicsXG4gIHBhcmFtczoge1xuICAgIG5hdmlnYXRpb246IHtcbiAgICAgIG5leHRFbDogbnVsbCxcbiAgICAgIHByZXZFbDogbnVsbCxcbiAgICAgIGhpZGVPbkNsaWNrOiBmYWxzZSxcbiAgICAgIGRpc2FibGVkQ2xhc3M6ICdzd2lwZXItYnV0dG9uLWRpc2FibGVkJyxcbiAgICAgIGhpZGRlbkNsYXNzOiAnc3dpcGVyLWJ1dHRvbi1oaWRkZW4nLFxuICAgICAgbG9ja0NsYXNzOiAnc3dpcGVyLWJ1dHRvbi1sb2NrJ1xuICAgIH1cbiAgfSxcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICBuYXZpZ2F0aW9uOiBfZXh0ZW5kcyh7fSwgTmF2aWdhdGlvbilcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHN3aXBlcikge1xuICAgICAgc3dpcGVyLm5hdmlnYXRpb24uaW5pdCgpO1xuICAgICAgc3dpcGVyLm5hdmlnYXRpb24udXBkYXRlKCk7XG4gICAgfSxcbiAgICB0b0VkZ2U6IGZ1bmN0aW9uIHRvRWRnZShzd2lwZXIpIHtcbiAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLnVwZGF0ZSgpO1xuICAgIH0sXG4gICAgZnJvbUVkZ2U6IGZ1bmN0aW9uIGZyb21FZGdlKHN3aXBlcikge1xuICAgICAgc3dpcGVyLm5hdmlnYXRpb24udXBkYXRlKCk7XG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KHN3aXBlcikge1xuICAgICAgc3dpcGVyLm5hdmlnYXRpb24uZGVzdHJveSgpO1xuICAgIH0sXG4gICAgY2xpY2s6IGZ1bmN0aW9uIGNsaWNrKHN3aXBlciwgZSkge1xuICAgICAgdmFyIF9zd2lwZXIkbmF2aWdhdGlvbjMgPSBzd2lwZXIubmF2aWdhdGlvbixcbiAgICAgICAgICAkbmV4dEVsID0gX3N3aXBlciRuYXZpZ2F0aW9uMy4kbmV4dEVsLFxuICAgICAgICAgICRwcmV2RWwgPSBfc3dpcGVyJG5hdmlnYXRpb24zLiRwcmV2RWw7XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZU9uQ2xpY2sgJiYgISQoZS50YXJnZXQpLmlzKCRwcmV2RWwpICYmICEkKGUudGFyZ2V0KS5pcygkbmV4dEVsKSkge1xuICAgICAgICB2YXIgaXNIaWRkZW47XG5cbiAgICAgICAgaWYgKCRuZXh0RWwpIHtcbiAgICAgICAgICBpc0hpZGRlbiA9ICRuZXh0RWwuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGRlbkNsYXNzKTtcbiAgICAgICAgfSBlbHNlIGlmICgkcHJldkVsKSB7XG4gICAgICAgICAgaXNIaWRkZW4gPSAkcHJldkVsLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNIaWRkZW4gPT09IHRydWUpIHtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnbmF2aWdhdGlvblNob3cnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnbmF2aWdhdGlvbkhpZGUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkbmV4dEVsKSB7XG4gICAgICAgICAgJG5leHRFbC50b2dnbGVDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCRwcmV2RWwpIHtcbiAgICAgICAgICAkcHJldkVsLnRvZ2dsZUNsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07IiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuaW1wb3J0ICQgZnJvbSAnLi4vLi4vdXRpbHMvZG9tJztcbmltcG9ydCB7IGV4dGVuZCwgYmluZE1vZHVsZU1ldGhvZHMgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG52YXIgUGFnaW5hdGlvbiA9IHtcbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgLy8gUmVuZGVyIHx8IFVwZGF0ZSBQYWdpbmF0aW9uIGJ1bGxldHMvaXRlbXNcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcnRsID0gc3dpcGVyLnJ0bDtcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmICghcGFyYW1zLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uJGVsIHx8IHN3aXBlci5wYWdpbmF0aW9uLiRlbC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICB2YXIgc2xpZGVzTGVuZ3RoID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gICAgdmFyICRlbCA9IHN3aXBlci5wYWdpbmF0aW9uLiRlbDsgLy8gQ3VycmVudC9Ub3RhbFxuXG4gICAgdmFyIGN1cnJlbnQ7XG4gICAgdmFyIHRvdGFsID0gc3dpcGVyLnBhcmFtcy5sb29wID8gTWF0aC5jZWlsKChzbGlkZXNMZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzICogMikgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKSA6IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICBjdXJyZW50ID0gTWF0aC5jZWlsKChzd2lwZXIuYWN0aXZlSW5kZXggLSBzd2lwZXIubG9vcGVkU2xpZGVzKSAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuXG4gICAgICBpZiAoY3VycmVudCA+IHNsaWRlc0xlbmd0aCAtIDEgLSBzd2lwZXIubG9vcGVkU2xpZGVzICogMikge1xuICAgICAgICBjdXJyZW50IC09IHNsaWRlc0xlbmd0aCAtIHN3aXBlci5sb29wZWRTbGlkZXMgKiAyO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3VycmVudCA+IHRvdGFsIC0gMSkgY3VycmVudCAtPSB0b3RhbDtcbiAgICAgIGlmIChjdXJyZW50IDwgMCAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb25UeXBlICE9PSAnYnVsbGV0cycpIGN1cnJlbnQgPSB0b3RhbCArIGN1cnJlbnQ7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygc3dpcGVyLnNuYXBJbmRleCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGN1cnJlbnQgPSBzd2lwZXIuc25hcEluZGV4O1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50ID0gc3dpcGVyLmFjdGl2ZUluZGV4IHx8IDA7XG4gICAgfSAvLyBUeXBlc1xuXG5cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJyAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMubGVuZ3RoID4gMCkge1xuICAgICAgdmFyIGJ1bGxldHMgPSBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzO1xuICAgICAgdmFyIGZpcnN0SW5kZXg7XG4gICAgICB2YXIgbGFzdEluZGV4O1xuICAgICAgdmFyIG1pZEluZGV4O1xuXG4gICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldFNpemUgPSBidWxsZXRzLmVxKDApW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdvdXRlcldpZHRoJyA6ICdvdXRlckhlaWdodCddKHRydWUpO1xuICAgICAgICAkZWwuY3NzKHN3aXBlci5pc0hvcml6b250YWwoKSA/ICd3aWR0aCcgOiAnaGVpZ2h0Jywgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0U2l6ZSAqIChwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzICsgNCkgKyBcInB4XCIpO1xuXG4gICAgICAgIGlmIChwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzID4gMSAmJiBzd2lwZXIucHJldmlvdXNJbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4ICs9IGN1cnJlbnQgLSBzd2lwZXIucHJldmlvdXNJbmRleDtcblxuICAgICAgICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbi5keW5hbWljQnVsbGV0SW5kZXggPiBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIC0gMSkge1xuICAgICAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4ID0gcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyAtIDE7XG4gICAgICAgICAgfSBlbHNlIGlmIChzd2lwZXIucGFnaW5hdGlvbi5keW5hbWljQnVsbGV0SW5kZXggPCAwKSB7XG4gICAgICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5keW5hbWljQnVsbGV0SW5kZXggPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZpcnN0SW5kZXggPSBjdXJyZW50IC0gc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4O1xuICAgICAgICBsYXN0SW5kZXggPSBmaXJzdEluZGV4ICsgKE1hdGgubWluKGJ1bGxldHMubGVuZ3RoLCBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzKSAtIDEpO1xuICAgICAgICBtaWRJbmRleCA9IChsYXN0SW5kZXggKyBmaXJzdEluZGV4KSAvIDI7XG4gICAgICB9XG5cbiAgICAgIGJ1bGxldHMucmVtb3ZlQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCIgXCIgKyBwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1uZXh0IFwiICsgcGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItbmV4dC1uZXh0IFwiICsgcGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItcHJldiBcIiArIHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLXByZXYtcHJldiBcIiArIHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW1haW5cIik7XG5cbiAgICAgIGlmICgkZWwubGVuZ3RoID4gMSkge1xuICAgICAgICBidWxsZXRzLmVhY2goZnVuY3Rpb24gKGJ1bGxldCkge1xuICAgICAgICAgIHZhciAkYnVsbGV0ID0gJChidWxsZXQpO1xuICAgICAgICAgIHZhciBidWxsZXRJbmRleCA9ICRidWxsZXQuaW5kZXgoKTtcblxuICAgICAgICAgIGlmIChidWxsZXRJbmRleCA9PT0gY3VycmVudCkge1xuICAgICAgICAgICAgJGJ1bGxldC5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgICAgIGlmIChidWxsZXRJbmRleCA+PSBmaXJzdEluZGV4ICYmIGJ1bGxldEluZGV4IDw9IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgICAkYnVsbGV0LmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW1haW5cIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChidWxsZXRJbmRleCA9PT0gZmlyc3RJbmRleCkge1xuICAgICAgICAgICAgICAkYnVsbGV0LnByZXYoKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1wcmV2XCIpLnByZXYoKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1wcmV2LXByZXZcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChidWxsZXRJbmRleCA9PT0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICRidWxsZXQubmV4dCgpLmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW5leHRcIikubmV4dCgpLmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW5leHQtbmV4dFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyICRidWxsZXQgPSBidWxsZXRzLmVxKGN1cnJlbnQpO1xuICAgICAgICB2YXIgYnVsbGV0SW5kZXggPSAkYnVsbGV0LmluZGV4KCk7XG4gICAgICAgICRidWxsZXQuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKTtcblxuICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgICAgdmFyICRmaXJzdERpc3BsYXllZEJ1bGxldCA9IGJ1bGxldHMuZXEoZmlyc3RJbmRleCk7XG4gICAgICAgICAgdmFyICRsYXN0RGlzcGxheWVkQnVsbGV0ID0gYnVsbGV0cy5lcShsYXN0SW5kZXgpO1xuXG4gICAgICAgICAgZm9yICh2YXIgaSA9IGZpcnN0SW5kZXg7IGkgPD0gbGFzdEluZGV4OyBpICs9IDEpIHtcbiAgICAgICAgICAgIGJ1bGxldHMuZXEoaSkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItbWFpblwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPj0gYnVsbGV0cy5sZW5ndGggLSBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIF9pID0gcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0czsgX2kgPj0gMDsgX2kgLT0gMSkge1xuICAgICAgICAgICAgICAgIGJ1bGxldHMuZXEoYnVsbGV0cy5sZW5ndGggLSBfaSkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItbWFpblwiKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGJ1bGxldHMuZXEoYnVsbGV0cy5sZW5ndGggLSBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIC0gMSkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItcHJldlwiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICRmaXJzdERpc3BsYXllZEJ1bGxldC5wcmV2KCkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItcHJldlwiKS5wcmV2KCkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItcHJldi1wcmV2XCIpO1xuICAgICAgICAgICAgICAkbGFzdERpc3BsYXllZEJ1bGxldC5uZXh0KCkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItbmV4dFwiKS5uZXh0KCkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItbmV4dC1uZXh0XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkZmlyc3REaXNwbGF5ZWRCdWxsZXQucHJldigpLmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLXByZXZcIikucHJldigpLmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLXByZXYtcHJldlwiKTtcbiAgICAgICAgICAgICRsYXN0RGlzcGxheWVkQnVsbGV0Lm5leHQoKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1uZXh0XCIpLm5leHQoKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1uZXh0LW5leHRcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgdmFyIGR5bmFtaWNCdWxsZXRzTGVuZ3RoID0gTWF0aC5taW4oYnVsbGV0cy5sZW5ndGgsIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgKyA0KTtcbiAgICAgICAgdmFyIGJ1bGxldHNPZmZzZXQgPSAoc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0U2l6ZSAqIGR5bmFtaWNCdWxsZXRzTGVuZ3RoIC0gc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0U2l6ZSkgLyAyIC0gbWlkSW5kZXggKiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRTaXplO1xuICAgICAgICB2YXIgb2Zmc2V0UHJvcCA9IHJ0bCA/ICdyaWdodCcgOiAnbGVmdCc7XG4gICAgICAgIGJ1bGxldHMuY3NzKHN3aXBlci5pc0hvcml6b250YWwoKSA/IG9mZnNldFByb3AgOiAndG9wJywgYnVsbGV0c09mZnNldCArIFwicHhcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnZnJhY3Rpb24nKSB7XG4gICAgICAkZWwuZmluZChcIi5cIiArIHBhcmFtcy5jdXJyZW50Q2xhc3MpLnRleHQocGFyYW1zLmZvcm1hdEZyYWN0aW9uQ3VycmVudChjdXJyZW50ICsgMSkpO1xuICAgICAgJGVsLmZpbmQoXCIuXCIgKyBwYXJhbXMudG90YWxDbGFzcykudGV4dChwYXJhbXMuZm9ybWF0RnJhY3Rpb25Ub3RhbCh0b3RhbCkpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ3Byb2dyZXNzYmFyJykge1xuICAgICAgdmFyIHByb2dyZXNzYmFyRGlyZWN0aW9uO1xuXG4gICAgICBpZiAocGFyYW1zLnByb2dyZXNzYmFyT3Bwb3NpdGUpIHtcbiAgICAgICAgcHJvZ3Jlc3NiYXJEaXJlY3Rpb24gPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvZ3Jlc3NiYXJEaXJlY3Rpb24gPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnaG9yaXpvbnRhbCcgOiAndmVydGljYWwnO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2NhbGUgPSAoY3VycmVudCArIDEpIC8gdG90YWw7XG4gICAgICB2YXIgc2NhbGVYID0gMTtcbiAgICAgIHZhciBzY2FsZVkgPSAxO1xuXG4gICAgICBpZiAocHJvZ3Jlc3NiYXJEaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICBzY2FsZVggPSBzY2FsZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNjYWxlWSA9IHNjYWxlO1xuICAgICAgfVxuXG4gICAgICAkZWwuZmluZChcIi5cIiArIHBhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzcykudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlWChcIiArIHNjYWxlWCArIFwiKSBzY2FsZVkoXCIgKyBzY2FsZVkgKyBcIilcIikudHJhbnNpdGlvbihzd2lwZXIucGFyYW1zLnNwZWVkKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdjdXN0b20nICYmIHBhcmFtcy5yZW5kZXJDdXN0b20pIHtcbiAgICAgICRlbC5odG1sKHBhcmFtcy5yZW5kZXJDdXN0b20oc3dpcGVyLCBjdXJyZW50ICsgMSwgdG90YWwpKTtcbiAgICAgIHN3aXBlci5lbWl0KCdwYWdpbmF0aW9uUmVuZGVyJywgJGVsWzBdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmVtaXQoJ3BhZ2luYXRpb25VcGRhdGUnLCAkZWxbMF0pO1xuICAgIH1cblxuICAgICRlbFtzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKHBhcmFtcy5sb2NrQ2xhc3MpO1xuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAvLyBSZW5kZXIgQ29udGFpbmVyXG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoIXBhcmFtcy5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLiRlbCB8fCBzd2lwZXIucGFnaW5hdGlvbi4kZWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgdmFyIHNsaWRlc0xlbmd0aCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICAgIHZhciAkZWwgPSBzd2lwZXIucGFnaW5hdGlvbi4kZWw7XG4gICAgdmFyIHBhZ2luYXRpb25IVE1MID0gJyc7XG5cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJykge1xuICAgICAgdmFyIG51bWJlck9mQnVsbGV0cyA9IHN3aXBlci5wYXJhbXMubG9vcCA/IE1hdGguY2VpbCgoc2xpZGVzTGVuZ3RoIC0gc3dpcGVyLmxvb3BlZFNsaWRlcyAqIDIpIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCkgOiBzd2lwZXIuc25hcEdyaWQubGVuZ3RoO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bWJlck9mQnVsbGV0czsgaSArPSAxKSB7XG4gICAgICAgIGlmIChwYXJhbXMucmVuZGVyQnVsbGV0KSB7XG4gICAgICAgICAgcGFnaW5hdGlvbkhUTUwgKz0gcGFyYW1zLnJlbmRlckJ1bGxldC5jYWxsKHN3aXBlciwgaSwgcGFyYW1zLmJ1bGxldENsYXNzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYWdpbmF0aW9uSFRNTCArPSBcIjxcIiArIHBhcmFtcy5idWxsZXRFbGVtZW50ICsgXCIgY2xhc3M9XFxcIlwiICsgcGFyYW1zLmJ1bGxldENsYXNzICsgXCJcXFwiPjwvXCIgKyBwYXJhbXMuYnVsbGV0RWxlbWVudCArIFwiPlwiO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICRlbC5odG1sKHBhZ2luYXRpb25IVE1MKTtcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgPSAkZWwuZmluZChcIi5cIiArIHBhcmFtcy5idWxsZXRDbGFzcyk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnZnJhY3Rpb24nKSB7XG4gICAgICBpZiAocGFyYW1zLnJlbmRlckZyYWN0aW9uKSB7XG4gICAgICAgIHBhZ2luYXRpb25IVE1MID0gcGFyYW1zLnJlbmRlckZyYWN0aW9uLmNhbGwoc3dpcGVyLCBwYXJhbXMuY3VycmVudENsYXNzLCBwYXJhbXMudG90YWxDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IFwiPHNwYW4gY2xhc3M9XFxcIlwiICsgcGFyYW1zLmN1cnJlbnRDbGFzcyArIFwiXFxcIj48L3NwYW4+XCIgKyAnIC8gJyArIChcIjxzcGFuIGNsYXNzPVxcXCJcIiArIHBhcmFtcy50b3RhbENsYXNzICsgXCJcXFwiPjwvc3Bhbj5cIik7XG4gICAgICB9XG5cbiAgICAgICRlbC5odG1sKHBhZ2luYXRpb25IVE1MKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicpIHtcbiAgICAgIGlmIChwYXJhbXMucmVuZGVyUHJvZ3Jlc3NiYXIpIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBwYXJhbXMucmVuZGVyUHJvZ3Jlc3NiYXIuY2FsbChzd2lwZXIsIHBhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IFwiPHNwYW4gY2xhc3M9XFxcIlwiICsgcGFyYW1zLnByb2dyZXNzYmFyRmlsbENsYXNzICsgXCJcXFwiPjwvc3Bhbj5cIjtcbiAgICAgIH1cblxuICAgICAgJGVsLmh0bWwocGFnaW5hdGlvbkhUTUwpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMudHlwZSAhPT0gJ2N1c3RvbScpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdwYWdpbmF0aW9uUmVuZGVyJywgc3dpcGVyLnBhZ2luYXRpb24uJGVsWzBdKTtcbiAgICB9XG4gIH0sXG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoIXBhcmFtcy5lbCkgcmV0dXJuO1xuICAgIHZhciAkZWwgPSAkKHBhcmFtcy5lbCk7XG4gICAgaWYgKCRlbC5sZW5ndGggPT09IDApIHJldHVybjtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmIHR5cGVvZiBwYXJhbXMuZWwgPT09ICdzdHJpbmcnICYmICRlbC5sZW5ndGggPiAxKSB7XG4gICAgICAkZWwgPSBzd2lwZXIuJGVsLmZpbmQocGFyYW1zLmVsKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJyAmJiBwYXJhbXMuY2xpY2thYmxlKSB7XG4gICAgICAkZWwuYWRkQ2xhc3MocGFyYW1zLmNsaWNrYWJsZUNsYXNzKTtcbiAgICB9XG5cbiAgICAkZWwuYWRkQ2xhc3MocGFyYW1zLm1vZGlmaWVyQ2xhc3MgKyBwYXJhbXMudHlwZSk7XG5cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJyAmJiBwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICRlbC5hZGRDbGFzcyhcIlwiICsgcGFyYW1zLm1vZGlmaWVyQ2xhc3MgKyBwYXJhbXMudHlwZSArIFwiLWR5bmFtaWNcIik7XG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi5keW5hbWljQnVsbGV0SW5kZXggPSAwO1xuXG4gICAgICBpZiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyA8IDEpIHtcbiAgICAgICAgcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyA9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAncHJvZ3Jlc3NiYXInICYmIHBhcmFtcy5wcm9ncmVzc2Jhck9wcG9zaXRlKSB7XG4gICAgICAkZWwuYWRkQ2xhc3MocGFyYW1zLnByb2dyZXNzYmFyT3Bwb3NpdGVDbGFzcyk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5jbGlja2FibGUpIHtcbiAgICAgICRlbC5vbignY2xpY2snLCBcIi5cIiArIHBhcmFtcy5idWxsZXRDbGFzcywgZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdmFyIGluZGV4ID0gJCh0aGlzKS5pbmRleCgpICogc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkgaW5kZXggKz0gc3dpcGVyLmxvb3BlZFNsaWRlcztcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oaW5kZXgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZXh0ZW5kKHN3aXBlci5wYWdpbmF0aW9uLCB7XG4gICAgICAkZWw6ICRlbCxcbiAgICAgIGVsOiAkZWxbMF1cbiAgICB9KTtcbiAgfSxcbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmICghcGFyYW1zLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uJGVsIHx8IHN3aXBlci5wYWdpbmF0aW9uLiRlbC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICB2YXIgJGVsID0gc3dpcGVyLnBhZ2luYXRpb24uJGVsO1xuICAgICRlbC5yZW1vdmVDbGFzcyhwYXJhbXMuaGlkZGVuQ2xhc3MpO1xuICAgICRlbC5yZW1vdmVDbGFzcyhwYXJhbXMubW9kaWZpZXJDbGFzcyArIHBhcmFtcy50eXBlKTtcbiAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cykgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5yZW1vdmVDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpO1xuXG4gICAgaWYgKHBhcmFtcy5jbGlja2FibGUpIHtcbiAgICAgICRlbC5vZmYoJ2NsaWNrJywgXCIuXCIgKyBwYXJhbXMuYnVsbGV0Q2xhc3MpO1xuICAgIH1cbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ3BhZ2luYXRpb24nLFxuICBwYXJhbXM6IHtcbiAgICBwYWdpbmF0aW9uOiB7XG4gICAgICBlbDogbnVsbCxcbiAgICAgIGJ1bGxldEVsZW1lbnQ6ICdzcGFuJyxcbiAgICAgIGNsaWNrYWJsZTogZmFsc2UsXG4gICAgICBoaWRlT25DbGljazogZmFsc2UsXG4gICAgICByZW5kZXJCdWxsZXQ6IG51bGwsXG4gICAgICByZW5kZXJQcm9ncmVzc2JhcjogbnVsbCxcbiAgICAgIHJlbmRlckZyYWN0aW9uOiBudWxsLFxuICAgICAgcmVuZGVyQ3VzdG9tOiBudWxsLFxuICAgICAgcHJvZ3Jlc3NiYXJPcHBvc2l0ZTogZmFsc2UsXG4gICAgICB0eXBlOiAnYnVsbGV0cycsXG4gICAgICAvLyAnYnVsbGV0cycgb3IgJ3Byb2dyZXNzYmFyJyBvciAnZnJhY3Rpb24nIG9yICdjdXN0b20nXG4gICAgICBkeW5hbWljQnVsbGV0czogZmFsc2UsXG4gICAgICBkeW5hbWljTWFpbkJ1bGxldHM6IDEsXG4gICAgICBmb3JtYXRGcmFjdGlvbkN1cnJlbnQ6IGZ1bmN0aW9uIGZvcm1hdEZyYWN0aW9uQ3VycmVudChudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgIH0sXG4gICAgICBmb3JtYXRGcmFjdGlvblRvdGFsOiBmdW5jdGlvbiBmb3JtYXRGcmFjdGlvblRvdGFsKG51bWJlcikge1xuICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgfSxcbiAgICAgIGJ1bGxldENsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0JyxcbiAgICAgIGJ1bGxldEFjdGl2ZUNsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0LWFjdGl2ZScsXG4gICAgICBtb2RpZmllckNsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tJyxcbiAgICAgIC8vIE5FV1xuICAgICAgY3VycmVudENsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tY3VycmVudCcsXG4gICAgICB0b3RhbENsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tdG90YWwnLFxuICAgICAgaGlkZGVuQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1oaWRkZW4nLFxuICAgICAgcHJvZ3Jlc3NiYXJGaWxsQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1wcm9ncmVzc2Jhci1maWxsJyxcbiAgICAgIHByb2dyZXNzYmFyT3Bwb3NpdGVDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLXByb2dyZXNzYmFyLW9wcG9zaXRlJyxcbiAgICAgIGNsaWNrYWJsZUNsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tY2xpY2thYmxlJyxcbiAgICAgIC8vIE5FV1xuICAgICAgbG9ja0NsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tbG9jaydcbiAgICB9XG4gIH0sXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGJpbmRNb2R1bGVNZXRob2RzKHN3aXBlciwge1xuICAgICAgcGFnaW5hdGlvbjogX2V4dGVuZHMoe1xuICAgICAgICBkeW5hbWljQnVsbGV0SW5kZXg6IDBcbiAgICAgIH0sIFBhZ2luYXRpb24pXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdDogZnVuY3Rpb24gaW5pdChzd2lwZXIpIHtcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmluaXQoKTtcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnJlbmRlcigpO1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24udXBkYXRlKCk7XG4gICAgfSxcbiAgICBhY3RpdmVJbmRleENoYW5nZTogZnVuY3Rpb24gYWN0aXZlSW5kZXhDaGFuZ2Uoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnVwZGF0ZSgpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc3dpcGVyLnNuYXBJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24udXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzbmFwSW5kZXhDaGFuZ2U6IGZ1bmN0aW9uIHNuYXBJbmRleENoYW5nZShzd2lwZXIpIHtcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2xpZGVzTGVuZ3RoQ2hhbmdlOiBmdW5jdGlvbiBzbGlkZXNMZW5ndGhDaGFuZ2Uoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnJlbmRlcigpO1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNuYXBHcmlkTGVuZ3RoQ2hhbmdlOiBmdW5jdGlvbiBzbmFwR3JpZExlbmd0aENoYW5nZShzd2lwZXIpIHtcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnJlbmRlcigpO1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koc3dpcGVyKSB7XG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi5kZXN0cm95KCk7XG4gICAgfSxcbiAgICBjbGljazogZnVuY3Rpb24gY2xpY2soc3dpcGVyLCBlKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmVsICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5oaWRlT25DbGljayAmJiBzd2lwZXIucGFnaW5hdGlvbi4kZWwubGVuZ3RoID4gMCAmJiAhJChlLnRhcmdldCkuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldENsYXNzKSkge1xuICAgICAgICB2YXIgaXNIaWRkZW4gPSBzd2lwZXIucGFnaW5hdGlvbi4kZWwuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmhpZGRlbkNsYXNzKTtcblxuICAgICAgICBpZiAoaXNIaWRkZW4gPT09IHRydWUpIHtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgncGFnaW5hdGlvblNob3cnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgncGFnaW5hdGlvbkhpZGUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLiRlbC50b2dnbGVDbGFzcyhzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTsiLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5pbXBvcnQgJCBmcm9tICcuLi8uLi91dGlscy9kb20nO1xuaW1wb3J0IHsgYmluZE1vZHVsZU1ldGhvZHMgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG52YXIgUGFyYWxsYXggPSB7XG4gIHNldFRyYW5zZm9ybTogZnVuY3Rpb24gc2V0VHJhbnNmb3JtKGVsLCBwcm9ncmVzcykge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBydGwgPSBzd2lwZXIucnRsO1xuICAgIHZhciAkZWwgPSAkKGVsKTtcbiAgICB2YXIgcnRsRmFjdG9yID0gcnRsID8gLTEgOiAxO1xuICAgIHZhciBwID0gJGVsLmF0dHIoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4JykgfHwgJzAnO1xuICAgIHZhciB4ID0gJGVsLmF0dHIoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LXgnKTtcbiAgICB2YXIgeSA9ICRlbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheC15Jyk7XG4gICAgdmFyIHNjYWxlID0gJGVsLmF0dHIoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LXNjYWxlJyk7XG4gICAgdmFyIG9wYWNpdHkgPSAkZWwuYXR0cignZGF0YS1zd2lwZXItcGFyYWxsYXgtb3BhY2l0eScpO1xuXG4gICAgaWYgKHggfHwgeSkge1xuICAgICAgeCA9IHggfHwgJzAnO1xuICAgICAgeSA9IHkgfHwgJzAnO1xuICAgIH0gZWxzZSBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICB4ID0gcDtcbiAgICAgIHkgPSAnMCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHkgPSBwO1xuICAgICAgeCA9ICcwJztcbiAgICB9XG5cbiAgICBpZiAoeC5pbmRleE9mKCclJykgPj0gMCkge1xuICAgICAgeCA9IHBhcnNlSW50KHgsIDEwKSAqIHByb2dyZXNzICogcnRsRmFjdG9yICsgXCIlXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSB4ICogcHJvZ3Jlc3MgKiBydGxGYWN0b3IgKyBcInB4XCI7XG4gICAgfVxuXG4gICAgaWYgKHkuaW5kZXhPZignJScpID49IDApIHtcbiAgICAgIHkgPSBwYXJzZUludCh5LCAxMCkgKiBwcm9ncmVzcyArIFwiJVwiO1xuICAgIH0gZWxzZSB7XG4gICAgICB5ID0geSAqIHByb2dyZXNzICsgXCJweFwiO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb3BhY2l0eSAhPT0gJ3VuZGVmaW5lZCcgJiYgb3BhY2l0eSAhPT0gbnVsbCkge1xuICAgICAgdmFyIGN1cnJlbnRPcGFjaXR5ID0gb3BhY2l0eSAtIChvcGFjaXR5IC0gMSkgKiAoMSAtIE1hdGguYWJzKHByb2dyZXNzKSk7XG4gICAgICAkZWxbMF0uc3R5bGUub3BhY2l0eSA9IGN1cnJlbnRPcGFjaXR5O1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygc2NhbGUgPT09ICd1bmRlZmluZWQnIHx8IHNjYWxlID09PSBudWxsKSB7XG4gICAgICAkZWwudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoXCIgKyB4ICsgXCIsIFwiICsgeSArIFwiLCAwcHgpXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY3VycmVudFNjYWxlID0gc2NhbGUgLSAoc2NhbGUgLSAxKSAqICgxIC0gTWF0aC5hYnMocHJvZ3Jlc3MpKTtcbiAgICAgICRlbC50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZChcIiArIHggKyBcIiwgXCIgKyB5ICsgXCIsIDBweCkgc2NhbGUoXCIgKyBjdXJyZW50U2NhbGUgKyBcIilcIik7XG4gICAgfVxuICB9LFxuICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgJGVsID0gc3dpcGVyLiRlbCxcbiAgICAgICAgc2xpZGVzID0gc3dpcGVyLnNsaWRlcyxcbiAgICAgICAgcHJvZ3Jlc3MgPSBzd2lwZXIucHJvZ3Jlc3MsXG4gICAgICAgIHNuYXBHcmlkID0gc3dpcGVyLnNuYXBHcmlkO1xuICAgICRlbC5jaGlsZHJlbignW2RhdGEtc3dpcGVyLXBhcmFsbGF4XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteV0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1vcGFjaXR5XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXNjYWxlXScpLmVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICBzd2lwZXIucGFyYWxsYXguc2V0VHJhbnNmb3JtKGVsLCBwcm9ncmVzcyk7XG4gICAgfSk7XG4gICAgc2xpZGVzLmVhY2goZnVuY3Rpb24gKHNsaWRlRWwsIHNsaWRlSW5kZXgpIHtcbiAgICAgIHZhciBzbGlkZVByb2dyZXNzID0gc2xpZGVFbC5wcm9ncmVzcztcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXAgPiAxICYmIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nKSB7XG4gICAgICAgIHNsaWRlUHJvZ3Jlc3MgKz0gTWF0aC5jZWlsKHNsaWRlSW5kZXggLyAyKSAtIHByb2dyZXNzICogKHNuYXBHcmlkLmxlbmd0aCAtIDEpO1xuICAgICAgfVxuXG4gICAgICBzbGlkZVByb2dyZXNzID0gTWF0aC5taW4oTWF0aC5tYXgoc2xpZGVQcm9ncmVzcywgLTEpLCAxKTtcbiAgICAgICQoc2xpZGVFbCkuZmluZCgnW2RhdGEtc3dpcGVyLXBhcmFsbGF4XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteV0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1vcGFjaXR5XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXNjYWxlXScpLmVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIHN3aXBlci5wYXJhbGxheC5zZXRUcmFuc2Zvcm0oZWwsIHNsaWRlUHJvZ3Jlc3MpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0sXG4gIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICBpZiAoZHVyYXRpb24gPT09IHZvaWQgMCkge1xuICAgICAgZHVyYXRpb24gPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgICB9XG5cbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgJGVsID0gc3dpcGVyLiRlbDtcbiAgICAkZWwuZmluZCgnW2RhdGEtc3dpcGVyLXBhcmFsbGF4XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteV0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1vcGFjaXR5XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXNjYWxlXScpLmVhY2goZnVuY3Rpb24gKHBhcmFsbGF4RWwpIHtcbiAgICAgIHZhciAkcGFyYWxsYXhFbCA9ICQocGFyYWxsYXhFbCk7XG4gICAgICB2YXIgcGFyYWxsYXhEdXJhdGlvbiA9IHBhcnNlSW50KCRwYXJhbGxheEVsLmF0dHIoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LWR1cmF0aW9uJyksIDEwKSB8fCBkdXJhdGlvbjtcbiAgICAgIGlmIChkdXJhdGlvbiA9PT0gMCkgcGFyYWxsYXhEdXJhdGlvbiA9IDA7XG4gICAgICAkcGFyYWxsYXhFbC50cmFuc2l0aW9uKHBhcmFsbGF4RHVyYXRpb24pO1xuICAgIH0pO1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAncGFyYWxsYXgnLFxuICBwYXJhbXM6IHtcbiAgICBwYXJhbGxheDoge1xuICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICB9XG4gIH0sXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGJpbmRNb2R1bGVNZXRob2RzKHN3aXBlciwge1xuICAgICAgcGFyYWxsYXg6IF9leHRlbmRzKHt9LCBQYXJhbGxheClcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBiZWZvcmVJbml0OiBmdW5jdGlvbiBiZWZvcmVJbml0KHN3aXBlcikge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci5wYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyA9IHRydWU7XG4gICAgICBzd2lwZXIub3JpZ2luYWxQYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyA9IHRydWU7XG4gICAgfSxcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHN3aXBlcikge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci5wYXJhbGxheC5zZXRUcmFuc2xhdGUoKTtcbiAgICB9LFxuICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKHN3aXBlcikge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci5wYXJhbGxheC5zZXRUcmFuc2xhdGUoKTtcbiAgICB9LFxuICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oc3dpcGVyLCBkdXJhdGlvbikge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci5wYXJhbGxheC5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICB9XG4gIH1cbn07IiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCAkIGZyb20gJy4uLy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQgeyBleHRlbmQsIG5leHRUaWNrLCBiaW5kTW9kdWxlTWV0aG9kcyB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbnZhciBTY3JvbGxiYXIgPSB7XG4gIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwgfHwgIXN3aXBlci5zY3JvbGxiYXIuZWwpIHJldHVybjtcbiAgICB2YXIgc2Nyb2xsYmFyID0gc3dpcGVyLnNjcm9sbGJhcixcbiAgICAgICAgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSxcbiAgICAgICAgcHJvZ3Jlc3MgPSBzd2lwZXIucHJvZ3Jlc3M7XG4gICAgdmFyIGRyYWdTaXplID0gc2Nyb2xsYmFyLmRyYWdTaXplLFxuICAgICAgICB0cmFja1NpemUgPSBzY3JvbGxiYXIudHJhY2tTaXplLFxuICAgICAgICAkZHJhZ0VsID0gc2Nyb2xsYmFyLiRkcmFnRWwsXG4gICAgICAgICRlbCA9IHNjcm9sbGJhci4kZWw7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyO1xuICAgIHZhciBuZXdTaXplID0gZHJhZ1NpemU7XG4gICAgdmFyIG5ld1BvcyA9ICh0cmFja1NpemUgLSBkcmFnU2l6ZSkgKiBwcm9ncmVzcztcblxuICAgIGlmIChydGwpIHtcbiAgICAgIG5ld1BvcyA9IC1uZXdQb3M7XG5cbiAgICAgIGlmIChuZXdQb3MgPiAwKSB7XG4gICAgICAgIG5ld1NpemUgPSBkcmFnU2l6ZSAtIG5ld1BvcztcbiAgICAgICAgbmV3UG9zID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoLW5ld1BvcyArIGRyYWdTaXplID4gdHJhY2tTaXplKSB7XG4gICAgICAgIG5ld1NpemUgPSB0cmFja1NpemUgKyBuZXdQb3M7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuZXdQb3MgPCAwKSB7XG4gICAgICBuZXdTaXplID0gZHJhZ1NpemUgKyBuZXdQb3M7XG4gICAgICBuZXdQb3MgPSAwO1xuICAgIH0gZWxzZSBpZiAobmV3UG9zICsgZHJhZ1NpemUgPiB0cmFja1NpemUpIHtcbiAgICAgIG5ld1NpemUgPSB0cmFja1NpemUgLSBuZXdQb3M7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgJGRyYWdFbC50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZChcIiArIG5ld1BvcyArIFwicHgsIDAsIDApXCIpO1xuICAgICAgJGRyYWdFbFswXS5zdHlsZS53aWR0aCA9IG5ld1NpemUgKyBcInB4XCI7XG4gICAgfSBlbHNlIHtcbiAgICAgICRkcmFnRWwudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoMHB4LCBcIiArIG5ld1BvcyArIFwicHgsIDApXCIpO1xuICAgICAgJGRyYWdFbFswXS5zdHlsZS5oZWlnaHQgPSBuZXdTaXplICsgXCJweFwiO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMuaGlkZSkge1xuICAgICAgY2xlYXJUaW1lb3V0KHN3aXBlci5zY3JvbGxiYXIudGltZW91dCk7XG4gICAgICAkZWxbMF0uc3R5bGUub3BhY2l0eSA9IDE7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJGVsWzBdLnN0eWxlLm9wYWNpdHkgPSAwO1xuICAgICAgICAkZWwudHJhbnNpdGlvbig0MDApO1xuICAgICAgfSwgMTAwMCk7XG4gICAgfVxuICB9LFxuICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbCB8fCAhc3dpcGVyLnNjcm9sbGJhci5lbCkgcmV0dXJuO1xuICAgIHN3aXBlci5zY3JvbGxiYXIuJGRyYWdFbC50cmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgfSxcbiAgdXBkYXRlU2l6ZTogZnVuY3Rpb24gdXBkYXRlU2l6ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsIHx8ICFzd2lwZXIuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgdmFyIHNjcm9sbGJhciA9IHN3aXBlci5zY3JvbGxiYXI7XG4gICAgdmFyICRkcmFnRWwgPSBzY3JvbGxiYXIuJGRyYWdFbCxcbiAgICAgICAgJGVsID0gc2Nyb2xsYmFyLiRlbDtcbiAgICAkZHJhZ0VsWzBdLnN0eWxlLndpZHRoID0gJyc7XG4gICAgJGRyYWdFbFswXS5zdHlsZS5oZWlnaHQgPSAnJztcbiAgICB2YXIgdHJhY2tTaXplID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJGVsWzBdLm9mZnNldFdpZHRoIDogJGVsWzBdLm9mZnNldEhlaWdodDtcbiAgICB2YXIgZGl2aWRlciA9IHN3aXBlci5zaXplIC8gc3dpcGVyLnZpcnR1YWxTaXplO1xuICAgIHZhciBtb3ZlRGl2aWRlciA9IGRpdmlkZXIgKiAodHJhY2tTaXplIC8gc3dpcGVyLnNpemUpO1xuICAgIHZhciBkcmFnU2l6ZTtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5kcmFnU2l6ZSA9PT0gJ2F1dG8nKSB7XG4gICAgICBkcmFnU2l6ZSA9IHRyYWNrU2l6ZSAqIGRpdmlkZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRyYWdTaXplID0gcGFyc2VJbnQoc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ1NpemUsIDEwKTtcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAkZHJhZ0VsWzBdLnN0eWxlLndpZHRoID0gZHJhZ1NpemUgKyBcInB4XCI7XG4gICAgfSBlbHNlIHtcbiAgICAgICRkcmFnRWxbMF0uc3R5bGUuaGVpZ2h0ID0gZHJhZ1NpemUgKyBcInB4XCI7XG4gICAgfVxuXG4gICAgaWYgKGRpdmlkZXIgPj0gMSkge1xuICAgICAgJGVsWzBdLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgfSBlbHNlIHtcbiAgICAgICRlbFswXS5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmhpZGUpIHtcbiAgICAgICRlbFswXS5zdHlsZS5vcGFjaXR5ID0gMDtcbiAgICB9XG5cbiAgICBleHRlbmQoc2Nyb2xsYmFyLCB7XG4gICAgICB0cmFja1NpemU6IHRyYWNrU2l6ZSxcbiAgICAgIGRpdmlkZXI6IGRpdmlkZXIsXG4gICAgICBtb3ZlRGl2aWRlcjogbW92ZURpdmlkZXIsXG4gICAgICBkcmFnU2l6ZTogZHJhZ1NpemVcbiAgICB9KTtcbiAgICBzY3JvbGxiYXIuJGVsW3N3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuaXNMb2NrZWQgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10oc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIubG9ja0NsYXNzKTtcbiAgfSxcbiAgZ2V0UG9pbnRlclBvc2l0aW9uOiBmdW5jdGlvbiBnZXRQb2ludGVyUG9zaXRpb24oZSkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuXG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgcmV0dXJuIGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnIHx8IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgPyBlLnRhcmdldFRvdWNoZXNbMF0uY2xpZW50WCA6IGUuY2xpZW50WDtcbiAgICB9XG5cbiAgICByZXR1cm4gZS50eXBlID09PSAndG91Y2hzdGFydCcgfHwgZS50eXBlID09PSAndG91Y2htb3ZlJyA/IGUudGFyZ2V0VG91Y2hlc1swXS5jbGllbnRZIDogZS5jbGllbnRZO1xuICB9LFxuICBzZXREcmFnUG9zaXRpb246IGZ1bmN0aW9uIHNldERyYWdQb3NpdGlvbihlKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHNjcm9sbGJhciA9IHN3aXBlci5zY3JvbGxiYXIsXG4gICAgICAgIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGU7XG4gICAgdmFyICRlbCA9IHNjcm9sbGJhci4kZWwsXG4gICAgICAgIGRyYWdTaXplID0gc2Nyb2xsYmFyLmRyYWdTaXplLFxuICAgICAgICB0cmFja1NpemUgPSBzY3JvbGxiYXIudHJhY2tTaXplLFxuICAgICAgICBkcmFnU3RhcnRQb3MgPSBzY3JvbGxiYXIuZHJhZ1N0YXJ0UG9zO1xuICAgIHZhciBwb3NpdGlvblJhdGlvO1xuICAgIHBvc2l0aW9uUmF0aW8gPSAoc2Nyb2xsYmFyLmdldFBvaW50ZXJQb3NpdGlvbihlKSAtICRlbC5vZmZzZXQoKVtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnbGVmdCcgOiAndG9wJ10gLSAoZHJhZ1N0YXJ0UG9zICE9PSBudWxsID8gZHJhZ1N0YXJ0UG9zIDogZHJhZ1NpemUgLyAyKSkgLyAodHJhY2tTaXplIC0gZHJhZ1NpemUpO1xuICAgIHBvc2l0aW9uUmF0aW8gPSBNYXRoLm1heChNYXRoLm1pbihwb3NpdGlvblJhdGlvLCAxKSwgMCk7XG5cbiAgICBpZiAocnRsKSB7XG4gICAgICBwb3NpdGlvblJhdGlvID0gMSAtIHBvc2l0aW9uUmF0aW87XG4gICAgfVxuXG4gICAgdmFyIHBvc2l0aW9uID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpICsgKHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgKiBwb3NpdGlvblJhdGlvO1xuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhwb3NpdGlvbik7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZShwb3NpdGlvbik7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgfSxcbiAgb25EcmFnU3RhcnQ6IGZ1bmN0aW9uIG9uRHJhZ1N0YXJ0KGUpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXI7XG4gICAgdmFyIHNjcm9sbGJhciA9IHN3aXBlci5zY3JvbGxiYXIsXG4gICAgICAgICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcbiAgICB2YXIgJGVsID0gc2Nyb2xsYmFyLiRlbCxcbiAgICAgICAgJGRyYWdFbCA9IHNjcm9sbGJhci4kZHJhZ0VsO1xuICAgIHN3aXBlci5zY3JvbGxiYXIuaXNUb3VjaGVkID0gdHJ1ZTtcbiAgICBzd2lwZXIuc2Nyb2xsYmFyLmRyYWdTdGFydFBvcyA9IGUudGFyZ2V0ID09PSAkZHJhZ0VsWzBdIHx8IGUudGFyZ2V0ID09PSAkZHJhZ0VsID8gc2Nyb2xsYmFyLmdldFBvaW50ZXJQb3NpdGlvbihlKSAtIGUudGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdsZWZ0JyA6ICd0b3AnXSA6IG51bGw7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgJHdyYXBwZXJFbC50cmFuc2l0aW9uKDEwMCk7XG4gICAgJGRyYWdFbC50cmFuc2l0aW9uKDEwMCk7XG4gICAgc2Nyb2xsYmFyLnNldERyYWdQb3NpdGlvbihlKTtcbiAgICBjbGVhclRpbWVvdXQoc3dpcGVyLnNjcm9sbGJhci5kcmFnVGltZW91dCk7XG4gICAgJGVsLnRyYW5zaXRpb24oMCk7XG5cbiAgICBpZiAocGFyYW1zLmhpZGUpIHtcbiAgICAgICRlbC5jc3MoJ29wYWNpdHknLCAxKTtcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5jc3MoJ3Njcm9sbC1zbmFwLXR5cGUnLCAnbm9uZScpO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCdzY3JvbGxiYXJEcmFnU3RhcnQnLCBlKTtcbiAgfSxcbiAgb25EcmFnTW92ZTogZnVuY3Rpb24gb25EcmFnTW92ZShlKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHNjcm9sbGJhciA9IHN3aXBlci5zY3JvbGxiYXIsXG4gICAgICAgICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcbiAgICB2YXIgJGVsID0gc2Nyb2xsYmFyLiRlbCxcbiAgICAgICAgJGRyYWdFbCA9IHNjcm9sbGJhci4kZHJhZ0VsO1xuICAgIGlmICghc3dpcGVyLnNjcm9sbGJhci5pc1RvdWNoZWQpIHJldHVybjtcbiAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkgZS5wcmV2ZW50RGVmYXVsdCgpO2Vsc2UgZS5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xuICAgIHNjcm9sbGJhci5zZXREcmFnUG9zaXRpb24oZSk7XG4gICAgJHdyYXBwZXJFbC50cmFuc2l0aW9uKDApO1xuICAgICRlbC50cmFuc2l0aW9uKDApO1xuICAgICRkcmFnRWwudHJhbnNpdGlvbigwKTtcbiAgICBzd2lwZXIuZW1pdCgnc2Nyb2xsYmFyRHJhZ01vdmUnLCBlKTtcbiAgfSxcbiAgb25EcmFnRW5kOiBmdW5jdGlvbiBvbkRyYWdFbmQoZSkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnNjcm9sbGJhcjtcbiAgICB2YXIgc2Nyb2xsYmFyID0gc3dpcGVyLnNjcm9sbGJhcixcbiAgICAgICAgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuICAgIHZhciAkZWwgPSBzY3JvbGxiYXIuJGVsO1xuICAgIGlmICghc3dpcGVyLnNjcm9sbGJhci5pc1RvdWNoZWQpIHJldHVybjtcbiAgICBzd2lwZXIuc2Nyb2xsYmFyLmlzVG91Y2hlZCA9IGZhbHNlO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwuY3NzKCdzY3JvbGwtc25hcC10eXBlJywgJycpO1xuICAgICAgJHdyYXBwZXJFbC50cmFuc2l0aW9uKCcnKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmhpZGUpIHtcbiAgICAgIGNsZWFyVGltZW91dChzd2lwZXIuc2Nyb2xsYmFyLmRyYWdUaW1lb3V0KTtcbiAgICAgIHN3aXBlci5zY3JvbGxiYXIuZHJhZ1RpbWVvdXQgPSBuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICRlbC5jc3MoJ29wYWNpdHknLCAwKTtcbiAgICAgICAgJGVsLnRyYW5zaXRpb24oNDAwKTtcbiAgICAgIH0sIDEwMDApO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCdzY3JvbGxiYXJEcmFnRW5kJywgZSk7XG5cbiAgICBpZiAocGFyYW1zLnNuYXBPblJlbGVhc2UpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdCgpO1xuICAgIH1cbiAgfSxcbiAgZW5hYmxlRHJhZ2dhYmxlOiBmdW5jdGlvbiBlbmFibGVEcmFnZ2FibGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbCkgcmV0dXJuO1xuICAgIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgdmFyIHNjcm9sbGJhciA9IHN3aXBlci5zY3JvbGxiYXIsXG4gICAgICAgIHRvdWNoRXZlbnRzVG91Y2ggPSBzd2lwZXIudG91Y2hFdmVudHNUb3VjaCxcbiAgICAgICAgdG91Y2hFdmVudHNEZXNrdG9wID0gc3dpcGVyLnRvdWNoRXZlbnRzRGVza3RvcCxcbiAgICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgICAgc3VwcG9ydCA9IHN3aXBlci5zdXBwb3J0O1xuICAgIHZhciAkZWwgPSBzY3JvbGxiYXIuJGVsO1xuICAgIHZhciB0YXJnZXQgPSAkZWxbMF07XG4gICAgdmFyIGFjdGl2ZUxpc3RlbmVyID0gc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgcGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7XG4gICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgfSA6IGZhbHNlO1xuICAgIHZhciBwYXNzaXZlTGlzdGVuZXIgPSBzdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBwYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHtcbiAgICAgIHBhc3NpdmU6IHRydWUsXG4gICAgICBjYXB0dXJlOiBmYWxzZVxuICAgIH0gOiBmYWxzZTtcblxuICAgIGlmICghc3VwcG9ydC50b3VjaCkge1xuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNEZXNrdG9wLnN0YXJ0LCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ1N0YXJ0LCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzRGVza3RvcC5tb3ZlLCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ01vdmUsIGFjdGl2ZUxpc3RlbmVyKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNEZXNrdG9wLmVuZCwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzVG91Y2guc3RhcnQsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnU3RhcnQsIGFjdGl2ZUxpc3RlbmVyKTtcbiAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzVG91Y2gubW92ZSwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdNb3ZlLCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c1RvdWNoLmVuZCwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgfVxuICB9LFxuICBkaXNhYmxlRHJhZ2dhYmxlOiBmdW5jdGlvbiBkaXNhYmxlRHJhZ2dhYmxlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwpIHJldHVybjtcbiAgICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgIHZhciBzY3JvbGxiYXIgPSBzd2lwZXIuc2Nyb2xsYmFyLFxuICAgICAgICB0b3VjaEV2ZW50c1RvdWNoID0gc3dpcGVyLnRvdWNoRXZlbnRzVG91Y2gsXG4gICAgICAgIHRvdWNoRXZlbnRzRGVza3RvcCA9IHN3aXBlci50b3VjaEV2ZW50c0Rlc2t0b3AsXG4gICAgICAgIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICAgIHN1cHBvcnQgPSBzd2lwZXIuc3VwcG9ydDtcbiAgICB2YXIgJGVsID0gc2Nyb2xsYmFyLiRlbDtcbiAgICB2YXIgdGFyZ2V0ID0gJGVsWzBdO1xuICAgIHZhciBhY3RpdmVMaXN0ZW5lciA9IHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8ge1xuICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICBjYXB0dXJlOiBmYWxzZVxuICAgIH0gOiBmYWxzZTtcbiAgICB2YXIgcGFzc2l2ZUxpc3RlbmVyID0gc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgcGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7XG4gICAgICBwYXNzaXZlOiB0cnVlLFxuICAgICAgY2FwdHVyZTogZmFsc2VcbiAgICB9IDogZmFsc2U7XG5cbiAgICBpZiAoIXN1cHBvcnQudG91Y2gpIHtcbiAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzRGVza3RvcC5zdGFydCwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdTdGFydCwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c0Rlc2t0b3AubW92ZSwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdNb3ZlLCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzRGVza3RvcC5lbmQsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c1RvdWNoLnN0YXJ0LCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ1N0YXJ0LCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c1RvdWNoLm1vdmUsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnTW92ZSwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNUb3VjaC5lbmQsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgIH1cbiAgfSxcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgdmFyIHNjcm9sbGJhciA9IHN3aXBlci5zY3JvbGxiYXIsXG4gICAgICAgICRzd2lwZXJFbCA9IHN3aXBlci4kZWw7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyO1xuICAgIHZhciAkZWwgPSAkKHBhcmFtcy5lbCk7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiB0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJyAmJiAkZWwubGVuZ3RoID4gMSAmJiAkc3dpcGVyRWwuZmluZChwYXJhbXMuZWwpLmxlbmd0aCA9PT0gMSkge1xuICAgICAgJGVsID0gJHN3aXBlckVsLmZpbmQocGFyYW1zLmVsKTtcbiAgICB9XG5cbiAgICB2YXIgJGRyYWdFbCA9ICRlbC5maW5kKFwiLlwiICsgc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ0NsYXNzKTtcblxuICAgIGlmICgkZHJhZ0VsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgJGRyYWdFbCA9ICQoXCI8ZGl2IGNsYXNzPVxcXCJcIiArIHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmRyYWdDbGFzcyArIFwiXFxcIj48L2Rpdj5cIik7XG4gICAgICAkZWwuYXBwZW5kKCRkcmFnRWwpO1xuICAgIH1cblxuICAgIGV4dGVuZChzY3JvbGxiYXIsIHtcbiAgICAgICRlbDogJGVsLFxuICAgICAgZWw6ICRlbFswXSxcbiAgICAgICRkcmFnRWw6ICRkcmFnRWwsXG4gICAgICBkcmFnRWw6ICRkcmFnRWxbMF1cbiAgICB9KTtcblxuICAgIGlmIChwYXJhbXMuZHJhZ2dhYmxlKSB7XG4gICAgICBzY3JvbGxiYXIuZW5hYmxlRHJhZ2dhYmxlKCk7XG4gICAgfVxuICB9LFxuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5zY3JvbGxiYXIuZGlzYWJsZURyYWdnYWJsZSgpO1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnc2Nyb2xsYmFyJyxcbiAgcGFyYW1zOiB7XG4gICAgc2Nyb2xsYmFyOiB7XG4gICAgICBlbDogbnVsbCxcbiAgICAgIGRyYWdTaXplOiAnYXV0bycsXG4gICAgICBoaWRlOiBmYWxzZSxcbiAgICAgIGRyYWdnYWJsZTogZmFsc2UsXG4gICAgICBzbmFwT25SZWxlYXNlOiB0cnVlLFxuICAgICAgbG9ja0NsYXNzOiAnc3dpcGVyLXNjcm9sbGJhci1sb2NrJyxcbiAgICAgIGRyYWdDbGFzczogJ3N3aXBlci1zY3JvbGxiYXItZHJhZydcbiAgICB9XG4gIH0sXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGJpbmRNb2R1bGVNZXRob2RzKHN3aXBlciwge1xuICAgICAgc2Nyb2xsYmFyOiBfZXh0ZW5kcyh7XG4gICAgICAgIGlzVG91Y2hlZDogZmFsc2UsXG4gICAgICAgIHRpbWVvdXQ6IG51bGwsXG4gICAgICAgIGRyYWdUaW1lb3V0OiBudWxsXG4gICAgICB9LCBTY3JvbGxiYXIpXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdDogZnVuY3Rpb24gaW5pdChzd2lwZXIpIHtcbiAgICAgIHN3aXBlci5zY3JvbGxiYXIuaW5pdCgpO1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci51cGRhdGVTaXplKCk7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLnNldFRyYW5zbGF0ZSgpO1xuICAgIH0sXG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoc3dpcGVyKSB7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLnVwZGF0ZVNpemUoKTtcbiAgICB9LFxuICAgIHJlc2l6ZTogZnVuY3Rpb24gcmVzaXplKHN3aXBlcikge1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci51cGRhdGVTaXplKCk7XG4gICAgfSxcbiAgICBvYnNlcnZlclVwZGF0ZTogZnVuY3Rpb24gb2JzZXJ2ZXJVcGRhdGUoc3dpcGVyKSB7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLnVwZGF0ZVNpemUoKTtcbiAgICB9LFxuICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKHN3aXBlcikge1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci5zZXRUcmFuc2xhdGUoKTtcbiAgICB9LFxuICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oc3dpcGVyLCBkdXJhdGlvbikge1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koc3dpcGVyKSB7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLmRlc3Ryb3koKTtcbiAgICB9XG4gIH1cbn07IiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuaW1wb3J0IHsgZXh0ZW5kLCBpc09iamVjdCwgYmluZE1vZHVsZU1ldGhvZHMgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQgJCBmcm9tICcuLi8uLi91dGlscy9kb20nO1xudmFyIFRodW1icyA9IHtcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgdGh1bWJzUGFyYW1zID0gc3dpcGVyLnBhcmFtcy50aHVtYnM7XG4gICAgaWYgKHN3aXBlci50aHVtYnMuaW5pdGlhbGl6ZWQpIHJldHVybiBmYWxzZTtcbiAgICBzd2lwZXIudGh1bWJzLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICB2YXIgU3dpcGVyQ2xhc3MgPSBzd2lwZXIuY29uc3RydWN0b3I7XG5cbiAgICBpZiAodGh1bWJzUGFyYW1zLnN3aXBlciBpbnN0YW5jZW9mIFN3aXBlckNsYXNzKSB7XG4gICAgICBzd2lwZXIudGh1bWJzLnN3aXBlciA9IHRodW1ic1BhcmFtcy5zd2lwZXI7XG4gICAgICBleHRlbmQoc3dpcGVyLnRodW1icy5zd2lwZXIub3JpZ2luYWxQYXJhbXMsIHtcbiAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgc2xpZGVUb0NsaWNrZWRTbGlkZTogZmFsc2VcbiAgICAgIH0pO1xuICAgICAgZXh0ZW5kKHN3aXBlci50aHVtYnMuc3dpcGVyLnBhcmFtcywge1xuICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChpc09iamVjdCh0aHVtYnNQYXJhbXMuc3dpcGVyKSkge1xuICAgICAgc3dpcGVyLnRodW1icy5zd2lwZXIgPSBuZXcgU3dpcGVyQ2xhc3MoZXh0ZW5kKHt9LCB0aHVtYnNQYXJhbXMuc3dpcGVyLCB7XG4gICAgICAgIHdhdGNoU2xpZGVzVmlzaWJpbGl0eTogdHJ1ZSxcbiAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgc2xpZGVUb0NsaWNrZWRTbGlkZTogZmFsc2VcbiAgICAgIH0pKTtcbiAgICAgIHN3aXBlci50aHVtYnMuc3dpcGVyQ3JlYXRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgc3dpcGVyLnRodW1icy5zd2lwZXIuJGVsLmFkZENsYXNzKHN3aXBlci5wYXJhbXMudGh1bWJzLnRodW1ic0NvbnRhaW5lckNsYXNzKTtcbiAgICBzd2lwZXIudGh1bWJzLnN3aXBlci5vbigndGFwJywgc3dpcGVyLnRodW1icy5vblRodW1iQ2xpY2spO1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBvblRodW1iQ2xpY2s6IGZ1bmN0aW9uIG9uVGh1bWJDbGljaygpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgdGh1bWJzU3dpcGVyID0gc3dpcGVyLnRodW1icy5zd2lwZXI7XG4gICAgaWYgKCF0aHVtYnNTd2lwZXIpIHJldHVybjtcbiAgICB2YXIgY2xpY2tlZEluZGV4ID0gdGh1bWJzU3dpcGVyLmNsaWNrZWRJbmRleDtcbiAgICB2YXIgY2xpY2tlZFNsaWRlID0gdGh1bWJzU3dpcGVyLmNsaWNrZWRTbGlkZTtcbiAgICBpZiAoY2xpY2tlZFNsaWRlICYmICQoY2xpY2tlZFNsaWRlKS5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnRodW1icy5zbGlkZVRodW1iQWN0aXZlQ2xhc3MpKSByZXR1cm47XG4gICAgaWYgKHR5cGVvZiBjbGlja2VkSW5kZXggPT09ICd1bmRlZmluZWQnIHx8IGNsaWNrZWRJbmRleCA9PT0gbnVsbCkgcmV0dXJuO1xuICAgIHZhciBzbGlkZVRvSW5kZXg7XG5cbiAgICBpZiAodGh1bWJzU3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICBzbGlkZVRvSW5kZXggPSBwYXJzZUludCgkKHRodW1ic1N3aXBlci5jbGlja2VkU2xpZGUpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2xpZGVUb0luZGV4ID0gY2xpY2tlZEluZGV4O1xuICAgIH1cblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIHZhciBjdXJyZW50SW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG5cbiAgICAgIGlmIChzd2lwZXIuc2xpZGVzLmVxKGN1cnJlbnRJbmRleCkuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICBzd2lwZXIubG9vcEZpeCgpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuICAgICAgICBzd2lwZXIuX2NsaWVudExlZnQgPSBzd2lwZXIuJHdyYXBwZXJFbFswXS5jbGllbnRMZWZ0O1xuICAgICAgICBjdXJyZW50SW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBzd2lwZXIuc2xpZGVzLmVxKGN1cnJlbnRJbmRleCkucHJldkFsbChcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBzbGlkZVRvSW5kZXggKyBcIlxcXCJdXCIpLmVxKDApLmluZGV4KCk7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gc3dpcGVyLnNsaWRlcy5lcShjdXJyZW50SW5kZXgpLm5leHRBbGwoXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgc2xpZGVUb0luZGV4ICsgXCJcXFwiXVwiKS5lcSgwKS5pbmRleCgpO1xuICAgICAgaWYgKHR5cGVvZiBwcmV2SW5kZXggPT09ICd1bmRlZmluZWQnKSBzbGlkZVRvSW5kZXggPSBuZXh0SW5kZXg7ZWxzZSBpZiAodHlwZW9mIG5leHRJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHNsaWRlVG9JbmRleCA9IHByZXZJbmRleDtlbHNlIGlmIChuZXh0SW5kZXggLSBjdXJyZW50SW5kZXggPCBjdXJyZW50SW5kZXggLSBwcmV2SW5kZXgpIHNsaWRlVG9JbmRleCA9IG5leHRJbmRleDtlbHNlIHNsaWRlVG9JbmRleCA9IHByZXZJbmRleDtcbiAgICB9XG5cbiAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICB9LFxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShpbml0aWFsKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHRodW1ic1N3aXBlciA9IHN3aXBlci50aHVtYnMuc3dpcGVyO1xuICAgIGlmICghdGh1bWJzU3dpcGVyKSByZXR1cm47XG4gICAgdmFyIHNsaWRlc1BlclZpZXcgPSB0aHVtYnNTd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyA/IHRodW1ic1N3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpIDogdGh1bWJzU3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgIHZhciBhdXRvU2Nyb2xsT2Zmc2V0ID0gc3dpcGVyLnBhcmFtcy50aHVtYnMuYXV0b1Njcm9sbE9mZnNldDtcbiAgICB2YXIgdXNlT2Zmc2V0ID0gYXV0b1Njcm9sbE9mZnNldCAmJiAhdGh1bWJzU3dpcGVyLnBhcmFtcy5sb29wO1xuXG4gICAgaWYgKHN3aXBlci5yZWFsSW5kZXggIT09IHRodW1ic1N3aXBlci5yZWFsSW5kZXggfHwgdXNlT2Zmc2V0KSB7XG4gICAgICB2YXIgY3VycmVudFRodW1ic0luZGV4ID0gdGh1bWJzU3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgICAgdmFyIG5ld1RodW1ic0luZGV4O1xuICAgICAgdmFyIGRpcmVjdGlvbjtcblxuICAgICAgaWYgKHRodW1ic1N3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBpZiAodGh1bWJzU3dpcGVyLnNsaWRlcy5lcShjdXJyZW50VGh1bWJzSW5kZXgpLmhhc0NsYXNzKHRodW1ic1N3aXBlci5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHtcbiAgICAgICAgICB0aHVtYnNTd2lwZXIubG9vcEZpeCgpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuICAgICAgICAgIHRodW1ic1N3aXBlci5fY2xpZW50TGVmdCA9IHRodW1ic1N3aXBlci4kd3JhcHBlckVsWzBdLmNsaWVudExlZnQ7XG4gICAgICAgICAgY3VycmVudFRodW1ic0luZGV4ID0gdGh1bWJzU3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgICAgICB9IC8vIEZpbmQgYWN0dWFsIHRodW1icyBpbmRleCB0byBzbGlkZSB0b1xuXG5cbiAgICAgICAgdmFyIHByZXZUaHVtYnNJbmRleCA9IHRodW1ic1N3aXBlci5zbGlkZXMuZXEoY3VycmVudFRodW1ic0luZGV4KS5wcmV2QWxsKFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIHN3aXBlci5yZWFsSW5kZXggKyBcIlxcXCJdXCIpLmVxKDApLmluZGV4KCk7XG4gICAgICAgIHZhciBuZXh0VGh1bWJzSW5kZXggPSB0aHVtYnNTd2lwZXIuc2xpZGVzLmVxKGN1cnJlbnRUaHVtYnNJbmRleCkubmV4dEFsbChcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBzd2lwZXIucmVhbEluZGV4ICsgXCJcXFwiXVwiKS5lcSgwKS5pbmRleCgpO1xuICAgICAgICBpZiAodHlwZW9mIHByZXZUaHVtYnNJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIG5ld1RodW1ic0luZGV4ID0gbmV4dFRodW1ic0luZGV4O2Vsc2UgaWYgKHR5cGVvZiBuZXh0VGh1bWJzSW5kZXggPT09ICd1bmRlZmluZWQnKSBuZXdUaHVtYnNJbmRleCA9IHByZXZUaHVtYnNJbmRleDtlbHNlIGlmIChuZXh0VGh1bWJzSW5kZXggLSBjdXJyZW50VGh1bWJzSW5kZXggPT09IGN1cnJlbnRUaHVtYnNJbmRleCAtIHByZXZUaHVtYnNJbmRleCkgbmV3VGh1bWJzSW5kZXggPSBjdXJyZW50VGh1bWJzSW5kZXg7ZWxzZSBpZiAobmV4dFRodW1ic0luZGV4IC0gY3VycmVudFRodW1ic0luZGV4IDwgY3VycmVudFRodW1ic0luZGV4IC0gcHJldlRodW1ic0luZGV4KSBuZXdUaHVtYnNJbmRleCA9IG5leHRUaHVtYnNJbmRleDtlbHNlIG5ld1RodW1ic0luZGV4ID0gcHJldlRodW1ic0luZGV4O1xuICAgICAgICBkaXJlY3Rpb24gPSBzd2lwZXIuYWN0aXZlSW5kZXggPiBzd2lwZXIucHJldmlvdXNJbmRleCA/ICduZXh0JyA6ICdwcmV2JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld1RodW1ic0luZGV4ID0gc3dpcGVyLnJlYWxJbmRleDtcbiAgICAgICAgZGlyZWN0aW9uID0gbmV3VGh1bWJzSW5kZXggPiBzd2lwZXIucHJldmlvdXNJbmRleCA/ICduZXh0JyA6ICdwcmV2JztcbiAgICAgIH1cblxuICAgICAgaWYgKHVzZU9mZnNldCkge1xuICAgICAgICBuZXdUaHVtYnNJbmRleCArPSBkaXJlY3Rpb24gPT09ICduZXh0JyA/IGF1dG9TY3JvbGxPZmZzZXQgOiAtMSAqIGF1dG9TY3JvbGxPZmZzZXQ7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aHVtYnNTd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMgJiYgdGh1bWJzU3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzLmluZGV4T2YobmV3VGh1bWJzSW5kZXgpIDwgMCkge1xuICAgICAgICBpZiAodGh1bWJzU3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICAgIGlmIChuZXdUaHVtYnNJbmRleCA+IGN1cnJlbnRUaHVtYnNJbmRleCkge1xuICAgICAgICAgICAgbmV3VGh1bWJzSW5kZXggPSBuZXdUaHVtYnNJbmRleCAtIE1hdGguZmxvb3Ioc2xpZGVzUGVyVmlldyAvIDIpICsgMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3VGh1bWJzSW5kZXggPSBuZXdUaHVtYnNJbmRleCArIE1hdGguZmxvb3Ioc2xpZGVzUGVyVmlldyAvIDIpIC0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobmV3VGh1bWJzSW5kZXggPiBjdXJyZW50VGh1bWJzSW5kZXgpIHtcbiAgICAgICAgICBuZXdUaHVtYnNJbmRleCA9IG5ld1RodW1ic0luZGV4IC0gc2xpZGVzUGVyVmlldyArIDE7XG4gICAgICAgIH1cblxuICAgICAgICB0aHVtYnNTd2lwZXIuc2xpZGVUbyhuZXdUaHVtYnNJbmRleCwgaW5pdGlhbCA/IDAgOiB1bmRlZmluZWQpO1xuICAgICAgfVxuICAgIH0gLy8gQWN0aXZhdGUgdGh1bWJzXG5cblxuICAgIHZhciB0aHVtYnNUb0FjdGl2YXRlID0gMTtcbiAgICB2YXIgdGh1bWJBY3RpdmVDbGFzcyA9IHN3aXBlci5wYXJhbXMudGh1bWJzLnNsaWRlVGh1bWJBY3RpdmVDbGFzcztcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxICYmICFzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICB0aHVtYnNUb0FjdGl2YXRlID0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgIH1cblxuICAgIGlmICghc3dpcGVyLnBhcmFtcy50aHVtYnMubXVsdGlwbGVBY3RpdmVUaHVtYnMpIHtcbiAgICAgIHRodW1ic1RvQWN0aXZhdGUgPSAxO1xuICAgIH1cblxuICAgIHRodW1ic1RvQWN0aXZhdGUgPSBNYXRoLmZsb29yKHRodW1ic1RvQWN0aXZhdGUpO1xuICAgIHRodW1ic1N3aXBlci5zbGlkZXMucmVtb3ZlQ2xhc3ModGh1bWJBY3RpdmVDbGFzcyk7XG5cbiAgICBpZiAodGh1bWJzU3dpcGVyLnBhcmFtcy5sb29wIHx8IHRodW1ic1N3aXBlci5wYXJhbXMudmlydHVhbCAmJiB0aHVtYnNTd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aHVtYnNUb0FjdGl2YXRlOyBpICs9IDEpIHtcbiAgICAgICAgdGh1bWJzU3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgKHN3aXBlci5yZWFsSW5kZXggKyBpKSArIFwiXFxcIl1cIikuYWRkQ2xhc3ModGh1bWJBY3RpdmVDbGFzcyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCB0aHVtYnNUb0FjdGl2YXRlOyBfaSArPSAxKSB7XG4gICAgICAgIHRodW1ic1N3aXBlci5zbGlkZXMuZXEoc3dpcGVyLnJlYWxJbmRleCArIF9pKS5hZGRDbGFzcyh0aHVtYkFjdGl2ZUNsYXNzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICd0aHVtYnMnLFxuICBwYXJhbXM6IHtcbiAgICB0aHVtYnM6IHtcbiAgICAgIHN3aXBlcjogbnVsbCxcbiAgICAgIG11bHRpcGxlQWN0aXZlVGh1bWJzOiB0cnVlLFxuICAgICAgYXV0b1Njcm9sbE9mZnNldDogMCxcbiAgICAgIHNsaWRlVGh1bWJBY3RpdmVDbGFzczogJ3N3aXBlci1zbGlkZS10aHVtYi1hY3RpdmUnLFxuICAgICAgdGh1bWJzQ29udGFpbmVyQ2xhc3M6ICdzd2lwZXItY29udGFpbmVyLXRodW1icydcbiAgICB9XG4gIH0sXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGJpbmRNb2R1bGVNZXRob2RzKHN3aXBlciwge1xuICAgICAgdGh1bWJzOiBfZXh0ZW5kcyh7XG4gICAgICAgIHN3aXBlcjogbnVsbCxcbiAgICAgICAgaW5pdGlhbGl6ZWQ6IGZhbHNlXG4gICAgICB9LCBUaHVtYnMpXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgYmVmb3JlSW5pdDogZnVuY3Rpb24gYmVmb3JlSW5pdChzd2lwZXIpIHtcbiAgICAgIHZhciB0aHVtYnMgPSBzd2lwZXIucGFyYW1zLnRodW1icztcbiAgICAgIGlmICghdGh1bWJzIHx8ICF0aHVtYnMuc3dpcGVyKSByZXR1cm47XG4gICAgICBzd2lwZXIudGh1bWJzLmluaXQoKTtcbiAgICAgIHN3aXBlci50aHVtYnMudXBkYXRlKHRydWUpO1xuICAgIH0sXG4gICAgc2xpZGVDaGFuZ2U6IGZ1bmN0aW9uIHNsaWRlQ2hhbmdlKHN3aXBlcikge1xuICAgICAgaWYgKCFzd2lwZXIudGh1bWJzLnN3aXBlcikgcmV0dXJuO1xuICAgICAgc3dpcGVyLnRodW1icy51cGRhdGUoKTtcbiAgICB9LFxuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKHN3aXBlcikge1xuICAgICAgaWYgKCFzd2lwZXIudGh1bWJzLnN3aXBlcikgcmV0dXJuO1xuICAgICAgc3dpcGVyLnRodW1icy51cGRhdGUoKTtcbiAgICB9LFxuICAgIHJlc2l6ZTogZnVuY3Rpb24gcmVzaXplKHN3aXBlcikge1xuICAgICAgaWYgKCFzd2lwZXIudGh1bWJzLnN3aXBlcikgcmV0dXJuO1xuICAgICAgc3dpcGVyLnRodW1icy51cGRhdGUoKTtcbiAgICB9LFxuICAgIG9ic2VydmVyVXBkYXRlOiBmdW5jdGlvbiBvYnNlcnZlclVwZGF0ZShzd2lwZXIpIHtcbiAgICAgIGlmICghc3dpcGVyLnRodW1icy5zd2lwZXIpIHJldHVybjtcbiAgICAgIHN3aXBlci50aHVtYnMudXBkYXRlKCk7XG4gICAgfSxcbiAgICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKHN3aXBlciwgZHVyYXRpb24pIHtcbiAgICAgIHZhciB0aHVtYnNTd2lwZXIgPSBzd2lwZXIudGh1bWJzLnN3aXBlcjtcbiAgICAgIGlmICghdGh1bWJzU3dpcGVyKSByZXR1cm47XG4gICAgICB0aHVtYnNTd2lwZXIuc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgfSxcbiAgICBiZWZvcmVEZXN0cm95OiBmdW5jdGlvbiBiZWZvcmVEZXN0cm95KHN3aXBlcikge1xuICAgICAgdmFyIHRodW1ic1N3aXBlciA9IHN3aXBlci50aHVtYnMuc3dpcGVyO1xuICAgICAgaWYgKCF0aHVtYnNTd2lwZXIpIHJldHVybjtcblxuICAgICAgaWYgKHN3aXBlci50aHVtYnMuc3dpcGVyQ3JlYXRlZCAmJiB0aHVtYnNTd2lwZXIpIHtcbiAgICAgICAgdGh1bWJzU3dpcGVyLmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07IiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuaW1wb3J0ICQgZnJvbSAnLi4vLi4vdXRpbHMvZG9tJztcbmltcG9ydCB7IGV4dGVuZCwgYmluZE1vZHVsZU1ldGhvZHMgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG52YXIgVmlydHVhbCA9IHtcbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoZm9yY2UpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgX3N3aXBlciRwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgICBzbGlkZXNQZXJWaWV3ID0gX3N3aXBlciRwYXJhbXMuc2xpZGVzUGVyVmlldyxcbiAgICAgICAgc2xpZGVzUGVyR3JvdXAgPSBfc3dpcGVyJHBhcmFtcy5zbGlkZXNQZXJHcm91cCxcbiAgICAgICAgY2VudGVyZWRTbGlkZXMgPSBfc3dpcGVyJHBhcmFtcy5jZW50ZXJlZFNsaWRlcztcbiAgICB2YXIgX3N3aXBlciRwYXJhbXMkdmlydHVhID0gc3dpcGVyLnBhcmFtcy52aXJ0dWFsLFxuICAgICAgICBhZGRTbGlkZXNCZWZvcmUgPSBfc3dpcGVyJHBhcmFtcyR2aXJ0dWEuYWRkU2xpZGVzQmVmb3JlLFxuICAgICAgICBhZGRTbGlkZXNBZnRlciA9IF9zd2lwZXIkcGFyYW1zJHZpcnR1YS5hZGRTbGlkZXNBZnRlcjtcbiAgICB2YXIgX3N3aXBlciR2aXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwsXG4gICAgICAgIHByZXZpb3VzRnJvbSA9IF9zd2lwZXIkdmlydHVhbC5mcm9tLFxuICAgICAgICBwcmV2aW91c1RvID0gX3N3aXBlciR2aXJ0dWFsLnRvLFxuICAgICAgICBzbGlkZXMgPSBfc3dpcGVyJHZpcnR1YWwuc2xpZGVzLFxuICAgICAgICBwcmV2aW91c1NsaWRlc0dyaWQgPSBfc3dpcGVyJHZpcnR1YWwuc2xpZGVzR3JpZCxcbiAgICAgICAgcmVuZGVyU2xpZGUgPSBfc3dpcGVyJHZpcnR1YWwucmVuZGVyU2xpZGUsXG4gICAgICAgIHByZXZpb3VzT2Zmc2V0ID0gX3N3aXBlciR2aXJ0dWFsLm9mZnNldDtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICB2YXIgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXggfHwgMDtcbiAgICB2YXIgb2Zmc2V0UHJvcDtcbiAgICBpZiAoc3dpcGVyLnJ0bFRyYW5zbGF0ZSkgb2Zmc2V0UHJvcCA9ICdyaWdodCc7ZWxzZSBvZmZzZXRQcm9wID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2xlZnQnIDogJ3RvcCc7XG4gICAgdmFyIHNsaWRlc0FmdGVyO1xuICAgIHZhciBzbGlkZXNCZWZvcmU7XG5cbiAgICBpZiAoY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIHNsaWRlc0FmdGVyID0gTWF0aC5mbG9vcihzbGlkZXNQZXJWaWV3IC8gMikgKyBzbGlkZXNQZXJHcm91cCArIGFkZFNsaWRlc0FmdGVyO1xuICAgICAgc2xpZGVzQmVmb3JlID0gTWF0aC5mbG9vcihzbGlkZXNQZXJWaWV3IC8gMikgKyBzbGlkZXNQZXJHcm91cCArIGFkZFNsaWRlc0JlZm9yZTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2xpZGVzQWZ0ZXIgPSBzbGlkZXNQZXJWaWV3ICsgKHNsaWRlc1Blckdyb3VwIC0gMSkgKyBhZGRTbGlkZXNBZnRlcjtcbiAgICAgIHNsaWRlc0JlZm9yZSA9IHNsaWRlc1Blckdyb3VwICsgYWRkU2xpZGVzQmVmb3JlO1xuICAgIH1cblxuICAgIHZhciBmcm9tID0gTWF0aC5tYXgoKGFjdGl2ZUluZGV4IHx8IDApIC0gc2xpZGVzQmVmb3JlLCAwKTtcbiAgICB2YXIgdG8gPSBNYXRoLm1pbigoYWN0aXZlSW5kZXggfHwgMCkgKyBzbGlkZXNBZnRlciwgc2xpZGVzLmxlbmd0aCAtIDEpO1xuICAgIHZhciBvZmZzZXQgPSAoc3dpcGVyLnNsaWRlc0dyaWRbZnJvbV0gfHwgMCkgLSAoc3dpcGVyLnNsaWRlc0dyaWRbMF0gfHwgMCk7XG4gICAgZXh0ZW5kKHN3aXBlci52aXJ0dWFsLCB7XG4gICAgICBmcm9tOiBmcm9tLFxuICAgICAgdG86IHRvLFxuICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICBzbGlkZXNHcmlkOiBzd2lwZXIuc2xpZGVzR3JpZFxuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gb25SZW5kZXJlZCgpIHtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcygpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcblxuICAgICAgaWYgKHN3aXBlci5sYXp5ICYmIHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJldmlvdXNGcm9tID09PSBmcm9tICYmIHByZXZpb3VzVG8gPT09IHRvICYmICFmb3JjZSkge1xuICAgICAgaWYgKHN3aXBlci5zbGlkZXNHcmlkICE9PSBwcmV2aW91c1NsaWRlc0dyaWQgJiYgb2Zmc2V0ICE9PSBwcmV2aW91c09mZnNldCkge1xuICAgICAgICBzd2lwZXIuc2xpZGVzLmNzcyhvZmZzZXRQcm9wLCBvZmZzZXQgKyBcInB4XCIpO1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsLnJlbmRlckV4dGVybmFsKSB7XG4gICAgICBzd2lwZXIucGFyYW1zLnZpcnR1YWwucmVuZGVyRXh0ZXJuYWwuY2FsbChzd2lwZXIsIHtcbiAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgIGZyb206IGZyb20sXG4gICAgICAgIHRvOiB0byxcbiAgICAgICAgc2xpZGVzOiBmdW5jdGlvbiBnZXRTbGlkZXMoKSB7XG4gICAgICAgICAgdmFyIHNsaWRlc1RvUmVuZGVyID0gW107XG5cbiAgICAgICAgICBmb3IgKHZhciBpID0gZnJvbTsgaSA8PSB0bzsgaSArPSAxKSB7XG4gICAgICAgICAgICBzbGlkZXNUb1JlbmRlci5wdXNoKHNsaWRlc1tpXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHNsaWRlc1RvUmVuZGVyO1xuICAgICAgICB9KClcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsLnJlbmRlckV4dGVybmFsVXBkYXRlKSB7XG4gICAgICAgIG9uUmVuZGVyZWQoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBwcmVwZW5kSW5kZXhlcyA9IFtdO1xuICAgIHZhciBhcHBlbmRJbmRleGVzID0gW107XG5cbiAgICBpZiAoZm9yY2UpIHtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLmZpbmQoXCIuXCIgKyBzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3MpLnJlbW92ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBpID0gcHJldmlvdXNGcm9tOyBpIDw9IHByZXZpb3VzVG87IGkgKz0gMSkge1xuICAgICAgICBpZiAoaSA8IGZyb20gfHwgaSA+IHRvKSB7XG4gICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwuZmluZChcIi5cIiArIHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcyArIFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIGkgKyBcIlxcXCJdXCIpLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHNsaWRlcy5sZW5ndGg7IF9pICs9IDEpIHtcbiAgICAgIGlmIChfaSA+PSBmcm9tICYmIF9pIDw9IHRvKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcHJldmlvdXNUbyA9PT0gJ3VuZGVmaW5lZCcgfHwgZm9yY2UpIHtcbiAgICAgICAgICBhcHBlbmRJbmRleGVzLnB1c2goX2kpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChfaSA+IHByZXZpb3VzVG8pIGFwcGVuZEluZGV4ZXMucHVzaChfaSk7XG4gICAgICAgICAgaWYgKF9pIDwgcHJldmlvdXNGcm9tKSBwcmVwZW5kSW5kZXhlcy5wdXNoKF9pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGFwcGVuZEluZGV4ZXMuZm9yRWFjaChmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLmFwcGVuZChyZW5kZXJTbGlkZShzbGlkZXNbaW5kZXhdLCBpbmRleCkpO1xuICAgIH0pO1xuICAgIHByZXBlbmRJbmRleGVzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBiIC0gYTtcbiAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwucHJlcGVuZChyZW5kZXJTbGlkZShzbGlkZXNbaW5kZXhdLCBpbmRleCkpO1xuICAgIH0pO1xuICAgIHN3aXBlci4kd3JhcHBlckVsLmNoaWxkcmVuKCcuc3dpcGVyLXNsaWRlJykuY3NzKG9mZnNldFByb3AsIG9mZnNldCArIFwicHhcIik7XG4gICAgb25SZW5kZXJlZCgpO1xuICB9LFxuICByZW5kZXJTbGlkZTogZnVuY3Rpb24gcmVuZGVyU2xpZGUoc2xpZGUsIGluZGV4KSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMudmlydHVhbDtcblxuICAgIGlmIChwYXJhbXMuY2FjaGUgJiYgc3dpcGVyLnZpcnR1YWwuY2FjaGVbaW5kZXhdKSB7XG4gICAgICByZXR1cm4gc3dpcGVyLnZpcnR1YWwuY2FjaGVbaW5kZXhdO1xuICAgIH1cblxuICAgIHZhciAkc2xpZGVFbCA9IHBhcmFtcy5yZW5kZXJTbGlkZSA/ICQocGFyYW1zLnJlbmRlclNsaWRlLmNhbGwoc3dpcGVyLCBzbGlkZSwgaW5kZXgpKSA6ICQoXCI8ZGl2IGNsYXNzPVxcXCJcIiArIHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcyArIFwiXFxcIiBkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBpbmRleCArIFwiXFxcIj5cIiArIHNsaWRlICsgXCI8L2Rpdj5cIik7XG4gICAgaWYgKCEkc2xpZGVFbC5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpKSAkc2xpZGVFbC5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcsIGluZGV4KTtcbiAgICBpZiAocGFyYW1zLmNhY2hlKSBzd2lwZXIudmlydHVhbC5jYWNoZVtpbmRleF0gPSAkc2xpZGVFbDtcbiAgICByZXR1cm4gJHNsaWRlRWw7XG4gIH0sXG4gIGFwcGVuZFNsaWRlOiBmdW5jdGlvbiBhcHBlbmRTbGlkZShzbGlkZXMpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcblxuICAgIGlmICh0eXBlb2Ygc2xpZGVzID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBzbGlkZXMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChzbGlkZXNbaV0pIHN3aXBlci52aXJ0dWFsLnNsaWRlcy5wdXNoKHNsaWRlc1tpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcy5wdXNoKHNsaWRlcyk7XG4gICAgfVxuXG4gICAgc3dpcGVyLnZpcnR1YWwudXBkYXRlKHRydWUpO1xuICB9LFxuICBwcmVwZW5kU2xpZGU6IGZ1bmN0aW9uIHByZXBlbmRTbGlkZShzbGlkZXMpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgdmFyIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXggKyAxO1xuICAgIHZhciBudW1iZXJPZk5ld1NsaWRlcyA9IDE7XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShzbGlkZXMpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzW2ldKSBzd2lwZXIudmlydHVhbC5zbGlkZXMudW5zaGlmdChzbGlkZXNbaV0pO1xuICAgICAgfVxuXG4gICAgICBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4ICsgc2xpZGVzLmxlbmd0aDtcbiAgICAgIG51bWJlck9mTmV3U2xpZGVzID0gc2xpZGVzLmxlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnZpcnR1YWwuc2xpZGVzLnVuc2hpZnQoc2xpZGVzKTtcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmNhY2hlKSB7XG4gICAgICB2YXIgY2FjaGUgPSBzd2lwZXIudmlydHVhbC5jYWNoZTtcbiAgICAgIHZhciBuZXdDYWNoZSA9IHt9O1xuICAgICAgT2JqZWN0LmtleXMoY2FjaGUpLmZvckVhY2goZnVuY3Rpb24gKGNhY2hlZEluZGV4KSB7XG4gICAgICAgIHZhciAkY2FjaGVkRWwgPSBjYWNoZVtjYWNoZWRJbmRleF07XG4gICAgICAgIHZhciBjYWNoZWRFbEluZGV4ID0gJGNhY2hlZEVsLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG5cbiAgICAgICAgaWYgKGNhY2hlZEVsSW5kZXgpIHtcbiAgICAgICAgICAkY2FjaGVkRWwuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnLCBwYXJzZUludChjYWNoZWRFbEluZGV4LCAxMCkgKyAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5ld0NhY2hlW3BhcnNlSW50KGNhY2hlZEluZGV4LCAxMCkgKyBudW1iZXJPZk5ld1NsaWRlc10gPSAkY2FjaGVkRWw7XG4gICAgICB9KTtcbiAgICAgIHN3aXBlci52aXJ0dWFsLmNhY2hlID0gbmV3Q2FjaGU7XG4gICAgfVxuXG4gICAgc3dpcGVyLnZpcnR1YWwudXBkYXRlKHRydWUpO1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwKTtcbiAgfSxcbiAgcmVtb3ZlU2xpZGU6IGZ1bmN0aW9uIHJlbW92ZVNsaWRlKHNsaWRlc0luZGV4ZXMpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBpZiAodHlwZW9mIHNsaWRlc0luZGV4ZXMgPT09ICd1bmRlZmluZWQnIHx8IHNsaWRlc0luZGV4ZXMgPT09IG51bGwpIHJldHVybjtcbiAgICB2YXIgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShzbGlkZXNJbmRleGVzKSkge1xuICAgICAgZm9yICh2YXIgaSA9IHNsaWRlc0luZGV4ZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgc3dpcGVyLnZpcnR1YWwuc2xpZGVzLnNwbGljZShzbGlkZXNJbmRleGVzW2ldLCAxKTtcblxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmNhY2hlKSB7XG4gICAgICAgICAgZGVsZXRlIHN3aXBlci52aXJ0dWFsLmNhY2hlW3NsaWRlc0luZGV4ZXNbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNsaWRlc0luZGV4ZXNbaV0gPCBhY3RpdmVJbmRleCkgYWN0aXZlSW5kZXggLT0gMTtcbiAgICAgICAgYWN0aXZlSW5kZXggPSBNYXRoLm1heChhY3RpdmVJbmRleCwgMCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcy5zcGxpY2Uoc2xpZGVzSW5kZXhlcywgMSk7XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwuY2FjaGUpIHtcbiAgICAgICAgZGVsZXRlIHN3aXBlci52aXJ0dWFsLmNhY2hlW3NsaWRlc0luZGV4ZXNdO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2xpZGVzSW5kZXhlcyA8IGFjdGl2ZUluZGV4KSBhY3RpdmVJbmRleCAtPSAxO1xuICAgICAgYWN0aXZlSW5kZXggPSBNYXRoLm1heChhY3RpdmVJbmRleCwgMCk7XG4gICAgfVxuXG4gICAgc3dpcGVyLnZpcnR1YWwudXBkYXRlKHRydWUpO1xuICAgIHN3aXBlci5zbGlkZVRvKGFjdGl2ZUluZGV4LCAwKTtcbiAgfSxcbiAgcmVtb3ZlQWxsU2xpZGVzOiBmdW5jdGlvbiByZW1vdmVBbGxTbGlkZXMoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgc3dpcGVyLnZpcnR1YWwuc2xpZGVzID0gW107XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmNhY2hlKSB7XG4gICAgICBzd2lwZXIudmlydHVhbC5jYWNoZSA9IHt9O1xuICAgIH1cblxuICAgIHN3aXBlci52aXJ0dWFsLnVwZGF0ZSh0cnVlKTtcbiAgICBzd2lwZXIuc2xpZGVUbygwLCAwKTtcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ3ZpcnR1YWwnLFxuICBwYXJhbXM6IHtcbiAgICB2aXJ0dWFsOiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIHNsaWRlczogW10sXG4gICAgICBjYWNoZTogdHJ1ZSxcbiAgICAgIHJlbmRlclNsaWRlOiBudWxsLFxuICAgICAgcmVuZGVyRXh0ZXJuYWw6IG51bGwsXG4gICAgICByZW5kZXJFeHRlcm5hbFVwZGF0ZTogdHJ1ZSxcbiAgICAgIGFkZFNsaWRlc0JlZm9yZTogMCxcbiAgICAgIGFkZFNsaWRlc0FmdGVyOiAwXG4gICAgfVxuICB9LFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBiaW5kTW9kdWxlTWV0aG9kcyhzd2lwZXIsIHtcbiAgICAgIHZpcnR1YWw6IF9leHRlbmRzKF9leHRlbmRzKHt9LCBWaXJ0dWFsKSwge30sIHtcbiAgICAgICAgc2xpZGVzOiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuc2xpZGVzLFxuICAgICAgICBjYWNoZToge31cbiAgICAgIH0pXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgYmVmb3JlSW5pdDogZnVuY3Rpb24gYmVmb3JlSW5pdChzd2lwZXIpIHtcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgXCJ2aXJ0dWFsXCIpO1xuICAgICAgdmFyIG92ZXJ3cml0ZVBhcmFtcyA9IHtcbiAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZVxuICAgICAgfTtcbiAgICAgIGV4dGVuZChzd2lwZXIucGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuICAgICAgZXh0ZW5kKHN3aXBlci5vcmlnaW5hbFBhcmFtcywgb3ZlcndyaXRlUGFyYW1zKTtcblxuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSkge1xuICAgICAgICBzd2lwZXIudmlydHVhbC51cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKHN3aXBlcikge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnZpcnR1YWwudXBkYXRlKCk7XG4gICAgfVxuICB9XG59OyIsImZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmltcG9ydCAkIGZyb20gJy4uLy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQgeyBiaW5kTW9kdWxlTWV0aG9kcywgZ2V0VHJhbnNsYXRlIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xudmFyIFpvb20gPSB7XG4gIC8vIENhbGMgU2NhbGUgRnJvbSBNdWx0aS10b3VjaGVzXG4gIGdldERpc3RhbmNlQmV0d2VlblRvdWNoZXM6IGZ1bmN0aW9uIGdldERpc3RhbmNlQmV0d2VlblRvdWNoZXMoZSkge1xuICAgIGlmIChlLnRhcmdldFRvdWNoZXMubGVuZ3RoIDwgMikgcmV0dXJuIDE7XG4gICAgdmFyIHgxID0gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYO1xuICAgIHZhciB5MSA9IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWTtcbiAgICB2YXIgeDIgPSBlLnRhcmdldFRvdWNoZXNbMV0ucGFnZVg7XG4gICAgdmFyIHkyID0gZS50YXJnZXRUb3VjaGVzWzFdLnBhZ2VZO1xuICAgIHZhciBkaXN0YW5jZSA9IE1hdGguc3FydChNYXRoLnBvdyh4MiAtIHgxLCAyKSArIE1hdGgucG93KHkyIC0geTEsIDIpKTtcbiAgICByZXR1cm4gZGlzdGFuY2U7XG4gIH0sXG4gIC8vIEV2ZW50c1xuICBvbkdlc3R1cmVTdGFydDogZnVuY3Rpb24gb25HZXN0dXJlU3RhcnQoZSkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBzdXBwb3J0ID0gc3dpcGVyLnN1cHBvcnQ7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuem9vbTtcbiAgICB2YXIgem9vbSA9IHN3aXBlci56b29tO1xuICAgIHZhciBnZXN0dXJlID0gem9vbS5nZXN0dXJlO1xuICAgIHpvb20uZmFrZUdlc3R1cmVUb3VjaGVkID0gZmFsc2U7XG4gICAgem9vbS5mYWtlR2VzdHVyZU1vdmVkID0gZmFsc2U7XG5cbiAgICBpZiAoIXN1cHBvcnQuZ2VzdHVyZXMpIHtcbiAgICAgIGlmIChlLnR5cGUgIT09ICd0b3VjaHN0YXJ0JyB8fCBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyAmJiBlLnRhcmdldFRvdWNoZXMubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHpvb20uZmFrZUdlc3R1cmVUb3VjaGVkID0gdHJ1ZTtcbiAgICAgIGdlc3R1cmUuc2NhbGVTdGFydCA9IFpvb20uZ2V0RGlzdGFuY2VCZXR3ZWVuVG91Y2hlcyhlKTtcbiAgICB9XG5cbiAgICBpZiAoIWdlc3R1cmUuJHNsaWRlRWwgfHwgIWdlc3R1cmUuJHNsaWRlRWwubGVuZ3RoKSB7XG4gICAgICBnZXN0dXJlLiRzbGlkZUVsID0gJChlLnRhcmdldCkuY2xvc2VzdChcIi5cIiArIHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcyk7XG4gICAgICBpZiAoZ2VzdHVyZS4kc2xpZGVFbC5sZW5ndGggPT09IDApIGdlc3R1cmUuJHNsaWRlRWwgPSBzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICBnZXN0dXJlLiRpbWFnZUVsID0gZ2VzdHVyZS4kc2xpZGVFbC5maW5kKCdpbWcsIHN2ZywgY2FudmFzLCBwaWN0dXJlLCAuc3dpcGVyLXpvb20tdGFyZ2V0Jyk7XG4gICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbCA9IGdlc3R1cmUuJGltYWdlRWwucGFyZW50KFwiLlwiICsgcGFyYW1zLmNvbnRhaW5lckNsYXNzKTtcbiAgICAgIGdlc3R1cmUubWF4UmF0aW8gPSBnZXN0dXJlLiRpbWFnZVdyYXBFbC5hdHRyKCdkYXRhLXN3aXBlci16b29tJykgfHwgcGFyYW1zLm1heFJhdGlvO1xuXG4gICAgICBpZiAoZ2VzdHVyZS4kaW1hZ2VXcmFwRWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGdlc3R1cmUuJGltYWdlRWwgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZ2VzdHVyZS4kaW1hZ2VFbCkge1xuICAgICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2l0aW9uKDApO1xuICAgIH1cblxuICAgIHN3aXBlci56b29tLmlzU2NhbGluZyA9IHRydWU7XG4gIH0sXG4gIG9uR2VzdHVyZUNoYW5nZTogZnVuY3Rpb24gb25HZXN0dXJlQ2hhbmdlKGUpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgc3VwcG9ydCA9IHN3aXBlci5zdXBwb3J0O1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnpvb207XG4gICAgdmFyIHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICB2YXIgZ2VzdHVyZSA9IHpvb20uZ2VzdHVyZTtcblxuICAgIGlmICghc3VwcG9ydC5nZXN0dXJlcykge1xuICAgICAgaWYgKGUudHlwZSAhPT0gJ3RvdWNobW92ZScgfHwgZS50eXBlID09PSAndG91Y2htb3ZlJyAmJiBlLnRhcmdldFRvdWNoZXMubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHpvb20uZmFrZUdlc3R1cmVNb3ZlZCA9IHRydWU7XG4gICAgICBnZXN0dXJlLnNjYWxlTW92ZSA9IFpvb20uZ2V0RGlzdGFuY2VCZXR3ZWVuVG91Y2hlcyhlKTtcbiAgICB9XG5cbiAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDApIHtcbiAgICAgIGlmIChlLnR5cGUgPT09ICdnZXN0dXJlY2hhbmdlJykgem9vbS5vbkdlc3R1cmVTdGFydChlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc3VwcG9ydC5nZXN0dXJlcykge1xuICAgICAgem9vbS5zY2FsZSA9IGUuc2NhbGUgKiB6b29tLmN1cnJlbnRTY2FsZTtcbiAgICB9IGVsc2Uge1xuICAgICAgem9vbS5zY2FsZSA9IGdlc3R1cmUuc2NhbGVNb3ZlIC8gZ2VzdHVyZS5zY2FsZVN0YXJ0ICogem9vbS5jdXJyZW50U2NhbGU7XG4gICAgfVxuXG4gICAgaWYgKHpvb20uc2NhbGUgPiBnZXN0dXJlLm1heFJhdGlvKSB7XG4gICAgICB6b29tLnNjYWxlID0gZ2VzdHVyZS5tYXhSYXRpbyAtIDEgKyBNYXRoLnBvdyh6b29tLnNjYWxlIC0gZ2VzdHVyZS5tYXhSYXRpbyArIDEsIDAuNSk7XG4gICAgfVxuXG4gICAgaWYgKHpvb20uc2NhbGUgPCBwYXJhbXMubWluUmF0aW8pIHtcbiAgICAgIHpvb20uc2NhbGUgPSBwYXJhbXMubWluUmF0aW8gKyAxIC0gTWF0aC5wb3cocGFyYW1zLm1pblJhdGlvIC0gem9vbS5zY2FsZSArIDEsIDAuNSk7XG4gICAgfVxuXG4gICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoXCIgKyB6b29tLnNjYWxlICsgXCIpXCIpO1xuICB9LFxuICBvbkdlc3R1cmVFbmQ6IGZ1bmN0aW9uIG9uR2VzdHVyZUVuZChlKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIGRldmljZSA9IHN3aXBlci5kZXZpY2U7XG4gICAgdmFyIHN1cHBvcnQgPSBzd2lwZXIuc3VwcG9ydDtcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy56b29tO1xuICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgdmFyIGdlc3R1cmUgPSB6b29tLmdlc3R1cmU7XG5cbiAgICBpZiAoIXN1cHBvcnQuZ2VzdHVyZXMpIHtcbiAgICAgIGlmICghem9vbS5mYWtlR2VzdHVyZVRvdWNoZWQgfHwgIXpvb20uZmFrZUdlc3R1cmVNb3ZlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChlLnR5cGUgIT09ICd0b3VjaGVuZCcgfHwgZS50eXBlID09PSAndG91Y2hlbmQnICYmIGUuY2hhbmdlZFRvdWNoZXMubGVuZ3RoIDwgMiAmJiAhZGV2aWNlLmFuZHJvaWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB6b29tLmZha2VHZXN0dXJlVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgem9vbS5mYWtlR2VzdHVyZU1vdmVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgem9vbS5zY2FsZSA9IE1hdGgubWF4KE1hdGgubWluKHpvb20uc2NhbGUsIGdlc3R1cmUubWF4UmF0aW8pLCBwYXJhbXMubWluUmF0aW8pO1xuICAgIGdlc3R1cmUuJGltYWdlRWwudHJhbnNpdGlvbihzd2lwZXIucGFyYW1zLnNwZWVkKS50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoXCIgKyB6b29tLnNjYWxlICsgXCIpXCIpO1xuICAgIHpvb20uY3VycmVudFNjYWxlID0gem9vbS5zY2FsZTtcbiAgICB6b29tLmlzU2NhbGluZyA9IGZhbHNlO1xuICAgIGlmICh6b29tLnNjYWxlID09PSAxKSBnZXN0dXJlLiRzbGlkZUVsID0gdW5kZWZpbmVkO1xuICB9LFxuICBvblRvdWNoU3RhcnQ6IGZ1bmN0aW9uIG9uVG91Y2hTdGFydChlKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIGRldmljZSA9IHN3aXBlci5kZXZpY2U7XG4gICAgdmFyIHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICB2YXIgZ2VzdHVyZSA9IHpvb20uZ2VzdHVyZSxcbiAgICAgICAgaW1hZ2UgPSB6b29tLmltYWdlO1xuICAgIGlmICghZ2VzdHVyZS4kaW1hZ2VFbCB8fCBnZXN0dXJlLiRpbWFnZUVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGlmIChpbWFnZS5pc1RvdWNoZWQpIHJldHVybjtcbiAgICBpZiAoZGV2aWNlLmFuZHJvaWQgJiYgZS5jYW5jZWxhYmxlKSBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaW1hZ2UuaXNUb3VjaGVkID0gdHJ1ZTtcbiAgICBpbWFnZS50b3VjaGVzU3RhcnQueCA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgICBpbWFnZS50b3VjaGVzU3RhcnQueSA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcbiAgfSxcbiAgb25Ub3VjaE1vdmU6IGZ1bmN0aW9uIG9uVG91Y2hNb3ZlKGUpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgem9vbSA9IHN3aXBlci56b29tO1xuICAgIHZhciBnZXN0dXJlID0gem9vbS5nZXN0dXJlLFxuICAgICAgICBpbWFnZSA9IHpvb20uaW1hZ2UsXG4gICAgICAgIHZlbG9jaXR5ID0gem9vbS52ZWxvY2l0eTtcbiAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICAgIGlmICghaW1hZ2UuaXNUb3VjaGVkIHx8ICFnZXN0dXJlLiRzbGlkZUVsKSByZXR1cm47XG5cbiAgICBpZiAoIWltYWdlLmlzTW92ZWQpIHtcbiAgICAgIGltYWdlLndpZHRoID0gZ2VzdHVyZS4kaW1hZ2VFbFswXS5vZmZzZXRXaWR0aDtcbiAgICAgIGltYWdlLmhlaWdodCA9IGdlc3R1cmUuJGltYWdlRWxbMF0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgaW1hZ2Uuc3RhcnRYID0gZ2V0VHJhbnNsYXRlKGdlc3R1cmUuJGltYWdlV3JhcEVsWzBdLCAneCcpIHx8IDA7XG4gICAgICBpbWFnZS5zdGFydFkgPSBnZXRUcmFuc2xhdGUoZ2VzdHVyZS4kaW1hZ2VXcmFwRWxbMF0sICd5JykgfHwgMDtcbiAgICAgIGdlc3R1cmUuc2xpZGVXaWR0aCA9IGdlc3R1cmUuJHNsaWRlRWxbMF0ub2Zmc2V0V2lkdGg7XG4gICAgICBnZXN0dXJlLnNsaWRlSGVpZ2h0ID0gZ2VzdHVyZS4kc2xpZGVFbFswXS5vZmZzZXRIZWlnaHQ7XG4gICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbC50cmFuc2l0aW9uKDApO1xuXG4gICAgICBpZiAoc3dpcGVyLnJ0bCkge1xuICAgICAgICBpbWFnZS5zdGFydFggPSAtaW1hZ2Uuc3RhcnRYO1xuICAgICAgICBpbWFnZS5zdGFydFkgPSAtaW1hZ2Uuc3RhcnRZO1xuICAgICAgfVxuICAgIH0gLy8gRGVmaW5lIGlmIHdlIG5lZWQgaW1hZ2UgZHJhZ1xuXG5cbiAgICB2YXIgc2NhbGVkV2lkdGggPSBpbWFnZS53aWR0aCAqIHpvb20uc2NhbGU7XG4gICAgdmFyIHNjYWxlZEhlaWdodCA9IGltYWdlLmhlaWdodCAqIHpvb20uc2NhbGU7XG4gICAgaWYgKHNjYWxlZFdpZHRoIDwgZ2VzdHVyZS5zbGlkZVdpZHRoICYmIHNjYWxlZEhlaWdodCA8IGdlc3R1cmUuc2xpZGVIZWlnaHQpIHJldHVybjtcbiAgICBpbWFnZS5taW5YID0gTWF0aC5taW4oZ2VzdHVyZS5zbGlkZVdpZHRoIC8gMiAtIHNjYWxlZFdpZHRoIC8gMiwgMCk7XG4gICAgaW1hZ2UubWF4WCA9IC1pbWFnZS5taW5YO1xuICAgIGltYWdlLm1pblkgPSBNYXRoLm1pbihnZXN0dXJlLnNsaWRlSGVpZ2h0IC8gMiAtIHNjYWxlZEhlaWdodCAvIDIsIDApO1xuICAgIGltYWdlLm1heFkgPSAtaW1hZ2UubWluWTtcbiAgICBpbWFnZS50b3VjaGVzQ3VycmVudC54ID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgaW1hZ2UudG91Y2hlc0N1cnJlbnQueSA9IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZO1xuXG4gICAgaWYgKCFpbWFnZS5pc01vdmVkICYmICF6b29tLmlzU2NhbGluZykge1xuICAgICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSAmJiAoTWF0aC5mbG9vcihpbWFnZS5taW5YKSA9PT0gTWF0aC5mbG9vcihpbWFnZS5zdGFydFgpICYmIGltYWdlLnRvdWNoZXNDdXJyZW50LnggPCBpbWFnZS50b3VjaGVzU3RhcnQueCB8fCBNYXRoLmZsb29yKGltYWdlLm1heFgpID09PSBNYXRoLmZsb29yKGltYWdlLnN0YXJ0WCkgJiYgaW1hZ2UudG91Y2hlc0N1cnJlbnQueCA+IGltYWdlLnRvdWNoZXNTdGFydC54KSkge1xuICAgICAgICBpbWFnZS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXN3aXBlci5pc0hvcml6b250YWwoKSAmJiAoTWF0aC5mbG9vcihpbWFnZS5taW5ZKSA9PT0gTWF0aC5mbG9vcihpbWFnZS5zdGFydFkpICYmIGltYWdlLnRvdWNoZXNDdXJyZW50LnkgPCBpbWFnZS50b3VjaGVzU3RhcnQueSB8fCBNYXRoLmZsb29yKGltYWdlLm1heFkpID09PSBNYXRoLmZsb29yKGltYWdlLnN0YXJ0WSkgJiYgaW1hZ2UudG91Y2hlc0N1cnJlbnQueSA+IGltYWdlLnRvdWNoZXNTdGFydC55KSkge1xuICAgICAgICBpbWFnZS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChlLmNhbmNlbGFibGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGltYWdlLmlzTW92ZWQgPSB0cnVlO1xuICAgIGltYWdlLmN1cnJlbnRYID0gaW1hZ2UudG91Y2hlc0N1cnJlbnQueCAtIGltYWdlLnRvdWNoZXNTdGFydC54ICsgaW1hZ2Uuc3RhcnRYO1xuICAgIGltYWdlLmN1cnJlbnRZID0gaW1hZ2UudG91Y2hlc0N1cnJlbnQueSAtIGltYWdlLnRvdWNoZXNTdGFydC55ICsgaW1hZ2Uuc3RhcnRZO1xuXG4gICAgaWYgKGltYWdlLmN1cnJlbnRYIDwgaW1hZ2UubWluWCkge1xuICAgICAgaW1hZ2UuY3VycmVudFggPSBpbWFnZS5taW5YICsgMSAtIE1hdGgucG93KGltYWdlLm1pblggLSBpbWFnZS5jdXJyZW50WCArIDEsIDAuOCk7XG4gICAgfVxuXG4gICAgaWYgKGltYWdlLmN1cnJlbnRYID4gaW1hZ2UubWF4WCkge1xuICAgICAgaW1hZ2UuY3VycmVudFggPSBpbWFnZS5tYXhYIC0gMSArIE1hdGgucG93KGltYWdlLmN1cnJlbnRYIC0gaW1hZ2UubWF4WCArIDEsIDAuOCk7XG4gICAgfVxuXG4gICAgaWYgKGltYWdlLmN1cnJlbnRZIDwgaW1hZ2UubWluWSkge1xuICAgICAgaW1hZ2UuY3VycmVudFkgPSBpbWFnZS5taW5ZICsgMSAtIE1hdGgucG93KGltYWdlLm1pblkgLSBpbWFnZS5jdXJyZW50WSArIDEsIDAuOCk7XG4gICAgfVxuXG4gICAgaWYgKGltYWdlLmN1cnJlbnRZID4gaW1hZ2UubWF4WSkge1xuICAgICAgaW1hZ2UuY3VycmVudFkgPSBpbWFnZS5tYXhZIC0gMSArIE1hdGgucG93KGltYWdlLmN1cnJlbnRZIC0gaW1hZ2UubWF4WSArIDEsIDAuOCk7XG4gICAgfSAvLyBWZWxvY2l0eVxuXG5cbiAgICBpZiAoIXZlbG9jaXR5LnByZXZQb3NpdGlvblgpIHZlbG9jaXR5LnByZXZQb3NpdGlvblggPSBpbWFnZS50b3VjaGVzQ3VycmVudC54O1xuICAgIGlmICghdmVsb2NpdHkucHJldlBvc2l0aW9uWSkgdmVsb2NpdHkucHJldlBvc2l0aW9uWSA9IGltYWdlLnRvdWNoZXNDdXJyZW50Lnk7XG4gICAgaWYgKCF2ZWxvY2l0eS5wcmV2VGltZSkgdmVsb2NpdHkucHJldlRpbWUgPSBEYXRlLm5vdygpO1xuICAgIHZlbG9jaXR5LnggPSAoaW1hZ2UudG91Y2hlc0N1cnJlbnQueCAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblgpIC8gKERhdGUubm93KCkgLSB2ZWxvY2l0eS5wcmV2VGltZSkgLyAyO1xuICAgIHZlbG9jaXR5LnkgPSAoaW1hZ2UudG91Y2hlc0N1cnJlbnQueSAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblkpIC8gKERhdGUubm93KCkgLSB2ZWxvY2l0eS5wcmV2VGltZSkgLyAyO1xuICAgIGlmIChNYXRoLmFicyhpbWFnZS50b3VjaGVzQ3VycmVudC54IC0gdmVsb2NpdHkucHJldlBvc2l0aW9uWCkgPCAyKSB2ZWxvY2l0eS54ID0gMDtcbiAgICBpZiAoTWF0aC5hYnMoaW1hZ2UudG91Y2hlc0N1cnJlbnQueSAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblkpIDwgMikgdmVsb2NpdHkueSA9IDA7XG4gICAgdmVsb2NpdHkucHJldlBvc2l0aW9uWCA9IGltYWdlLnRvdWNoZXNDdXJyZW50Lng7XG4gICAgdmVsb2NpdHkucHJldlBvc2l0aW9uWSA9IGltYWdlLnRvdWNoZXNDdXJyZW50Lnk7XG4gICAgdmVsb2NpdHkucHJldlRpbWUgPSBEYXRlLm5vdygpO1xuICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKFwiICsgaW1hZ2UuY3VycmVudFggKyBcInB4LCBcIiArIGltYWdlLmN1cnJlbnRZICsgXCJweCwwKVwiKTtcbiAgfSxcbiAgb25Ub3VjaEVuZDogZnVuY3Rpb24gb25Ub3VjaEVuZCgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgem9vbSA9IHN3aXBlci56b29tO1xuICAgIHZhciBnZXN0dXJlID0gem9vbS5nZXN0dXJlLFxuICAgICAgICBpbWFnZSA9IHpvb20uaW1hZ2UsXG4gICAgICAgIHZlbG9jaXR5ID0gem9vbS52ZWxvY2l0eTtcbiAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDApIHJldHVybjtcblxuICAgIGlmICghaW1hZ2UuaXNUb3VjaGVkIHx8ICFpbWFnZS5pc01vdmVkKSB7XG4gICAgICBpbWFnZS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgIGltYWdlLmlzTW92ZWQgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpbWFnZS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICBpbWFnZS5pc01vdmVkID0gZmFsc2U7XG4gICAgdmFyIG1vbWVudHVtRHVyYXRpb25YID0gMzAwO1xuICAgIHZhciBtb21lbnR1bUR1cmF0aW9uWSA9IDMwMDtcbiAgICB2YXIgbW9tZW50dW1EaXN0YW5jZVggPSB2ZWxvY2l0eS54ICogbW9tZW50dW1EdXJhdGlvblg7XG4gICAgdmFyIG5ld1Bvc2l0aW9uWCA9IGltYWdlLmN1cnJlbnRYICsgbW9tZW50dW1EaXN0YW5jZVg7XG4gICAgdmFyIG1vbWVudHVtRGlzdGFuY2VZID0gdmVsb2NpdHkueSAqIG1vbWVudHVtRHVyYXRpb25ZO1xuICAgIHZhciBuZXdQb3NpdGlvblkgPSBpbWFnZS5jdXJyZW50WSArIG1vbWVudHVtRGlzdGFuY2VZOyAvLyBGaXggZHVyYXRpb25cblxuICAgIGlmICh2ZWxvY2l0eS54ICE9PSAwKSBtb21lbnR1bUR1cmF0aW9uWCA9IE1hdGguYWJzKChuZXdQb3NpdGlvblggLSBpbWFnZS5jdXJyZW50WCkgLyB2ZWxvY2l0eS54KTtcbiAgICBpZiAodmVsb2NpdHkueSAhPT0gMCkgbW9tZW50dW1EdXJhdGlvblkgPSBNYXRoLmFicygobmV3UG9zaXRpb25ZIC0gaW1hZ2UuY3VycmVudFkpIC8gdmVsb2NpdHkueSk7XG4gICAgdmFyIG1vbWVudHVtRHVyYXRpb24gPSBNYXRoLm1heChtb21lbnR1bUR1cmF0aW9uWCwgbW9tZW50dW1EdXJhdGlvblkpO1xuICAgIGltYWdlLmN1cnJlbnRYID0gbmV3UG9zaXRpb25YO1xuICAgIGltYWdlLmN1cnJlbnRZID0gbmV3UG9zaXRpb25ZOyAvLyBEZWZpbmUgaWYgd2UgbmVlZCBpbWFnZSBkcmFnXG5cbiAgICB2YXIgc2NhbGVkV2lkdGggPSBpbWFnZS53aWR0aCAqIHpvb20uc2NhbGU7XG4gICAgdmFyIHNjYWxlZEhlaWdodCA9IGltYWdlLmhlaWdodCAqIHpvb20uc2NhbGU7XG4gICAgaW1hZ2UubWluWCA9IE1hdGgubWluKGdlc3R1cmUuc2xpZGVXaWR0aCAvIDIgLSBzY2FsZWRXaWR0aCAvIDIsIDApO1xuICAgIGltYWdlLm1heFggPSAtaW1hZ2UubWluWDtcbiAgICBpbWFnZS5taW5ZID0gTWF0aC5taW4oZ2VzdHVyZS5zbGlkZUhlaWdodCAvIDIgLSBzY2FsZWRIZWlnaHQgLyAyLCAwKTtcbiAgICBpbWFnZS5tYXhZID0gLWltYWdlLm1pblk7XG4gICAgaW1hZ2UuY3VycmVudFggPSBNYXRoLm1heChNYXRoLm1pbihpbWFnZS5jdXJyZW50WCwgaW1hZ2UubWF4WCksIGltYWdlLm1pblgpO1xuICAgIGltYWdlLmN1cnJlbnRZID0gTWF0aC5tYXgoTWF0aC5taW4oaW1hZ2UuY3VycmVudFksIGltYWdlLm1heFkpLCBpbWFnZS5taW5ZKTtcbiAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbC50cmFuc2l0aW9uKG1vbWVudHVtRHVyYXRpb24pLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKFwiICsgaW1hZ2UuY3VycmVudFggKyBcInB4LCBcIiArIGltYWdlLmN1cnJlbnRZICsgXCJweCwwKVwiKTtcbiAgfSxcbiAgb25UcmFuc2l0aW9uRW5kOiBmdW5jdGlvbiBvblRyYW5zaXRpb25FbmQoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICB2YXIgZ2VzdHVyZSA9IHpvb20uZ2VzdHVyZTtcblxuICAgIGlmIChnZXN0dXJlLiRzbGlkZUVsICYmIHN3aXBlci5wcmV2aW91c0luZGV4ICE9PSBzd2lwZXIuYWN0aXZlSW5kZXgpIHtcbiAgICAgIGlmIChnZXN0dXJlLiRpbWFnZUVsKSB7XG4gICAgICAgIGdlc3R1cmUuJGltYWdlRWwudHJhbnNmb3JtKCd0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoMSknKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGdlc3R1cmUuJGltYWdlV3JhcEVsKSB7XG4gICAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsLnRyYW5zZm9ybSgndHJhbnNsYXRlM2QoMCwwLDApJyk7XG4gICAgICB9XG5cbiAgICAgIHpvb20uc2NhbGUgPSAxO1xuICAgICAgem9vbS5jdXJyZW50U2NhbGUgPSAxO1xuICAgICAgZ2VzdHVyZS4kc2xpZGVFbCA9IHVuZGVmaW5lZDtcbiAgICAgIGdlc3R1cmUuJGltYWdlRWwgPSB1bmRlZmluZWQ7XG4gICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sXG4gIC8vIFRvZ2dsZSBab29tXG4gIHRvZ2dsZTogZnVuY3Rpb24gdG9nZ2xlKGUpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgem9vbSA9IHN3aXBlci56b29tO1xuXG4gICAgaWYgKHpvb20uc2NhbGUgJiYgem9vbS5zY2FsZSAhPT0gMSkge1xuICAgICAgLy8gWm9vbSBPdXRcbiAgICAgIHpvb20ub3V0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFpvb20gSW5cbiAgICAgIHpvb20uaW4oZSk7XG4gICAgfVxuICB9LFxuICBpbjogZnVuY3Rpb24gX2luKGUpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgem9vbSA9IHN3aXBlci56b29tO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnpvb207XG4gICAgdmFyIGdlc3R1cmUgPSB6b29tLmdlc3R1cmUsXG4gICAgICAgIGltYWdlID0gem9vbS5pbWFnZTtcblxuICAgIGlmICghZ2VzdHVyZS4kc2xpZGVFbCkge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiBzd2lwZXIudmlydHVhbCkge1xuICAgICAgICBnZXN0dXJlLiRzbGlkZUVsID0gc3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBzd2lwZXIucGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2VzdHVyZS4kc2xpZGVFbCA9IHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIH1cblxuICAgICAgZ2VzdHVyZS4kaW1hZ2VFbCA9IGdlc3R1cmUuJHNsaWRlRWwuZmluZCgnaW1nLCBzdmcsIGNhbnZhcywgcGljdHVyZSwgLnN3aXBlci16b29tLXRhcmdldCcpO1xuICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwgPSBnZXN0dXJlLiRpbWFnZUVsLnBhcmVudChcIi5cIiArIHBhcmFtcy5jb250YWluZXJDbGFzcyk7XG4gICAgfVxuXG4gICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgZ2VzdHVyZS4kc2xpZGVFbC5hZGRDbGFzcyhcIlwiICsgcGFyYW1zLnpvb21lZFNsaWRlQ2xhc3MpO1xuICAgIHZhciB0b3VjaFg7XG4gICAgdmFyIHRvdWNoWTtcbiAgICB2YXIgb2Zmc2V0WDtcbiAgICB2YXIgb2Zmc2V0WTtcbiAgICB2YXIgZGlmZlg7XG4gICAgdmFyIGRpZmZZO1xuICAgIHZhciB0cmFuc2xhdGVYO1xuICAgIHZhciB0cmFuc2xhdGVZO1xuICAgIHZhciBpbWFnZVdpZHRoO1xuICAgIHZhciBpbWFnZUhlaWdodDtcbiAgICB2YXIgc2NhbGVkV2lkdGg7XG4gICAgdmFyIHNjYWxlZEhlaWdodDtcbiAgICB2YXIgdHJhbnNsYXRlTWluWDtcbiAgICB2YXIgdHJhbnNsYXRlTWluWTtcbiAgICB2YXIgdHJhbnNsYXRlTWF4WDtcbiAgICB2YXIgdHJhbnNsYXRlTWF4WTtcbiAgICB2YXIgc2xpZGVXaWR0aDtcbiAgICB2YXIgc2xpZGVIZWlnaHQ7XG5cbiAgICBpZiAodHlwZW9mIGltYWdlLnRvdWNoZXNTdGFydC54ID09PSAndW5kZWZpbmVkJyAmJiBlKSB7XG4gICAgICB0b3VjaFggPSBlLnR5cGUgPT09ICd0b3VjaGVuZCcgPyBlLmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgICAgIHRvdWNoWSA9IGUudHlwZSA9PT0gJ3RvdWNoZW5kJyA/IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZO1xuICAgIH0gZWxzZSB7XG4gICAgICB0b3VjaFggPSBpbWFnZS50b3VjaGVzU3RhcnQueDtcbiAgICAgIHRvdWNoWSA9IGltYWdlLnRvdWNoZXNTdGFydC55O1xuICAgIH1cblxuICAgIHpvb20uc2NhbGUgPSBnZXN0dXJlLiRpbWFnZVdyYXBFbC5hdHRyKCdkYXRhLXN3aXBlci16b29tJykgfHwgcGFyYW1zLm1heFJhdGlvO1xuICAgIHpvb20uY3VycmVudFNjYWxlID0gZ2VzdHVyZS4kaW1hZ2VXcmFwRWwuYXR0cignZGF0YS1zd2lwZXItem9vbScpIHx8IHBhcmFtcy5tYXhSYXRpbztcblxuICAgIGlmIChlKSB7XG4gICAgICBzbGlkZVdpZHRoID0gZ2VzdHVyZS4kc2xpZGVFbFswXS5vZmZzZXRXaWR0aDtcbiAgICAgIHNsaWRlSGVpZ2h0ID0gZ2VzdHVyZS4kc2xpZGVFbFswXS5vZmZzZXRIZWlnaHQ7XG4gICAgICBvZmZzZXRYID0gZ2VzdHVyZS4kc2xpZGVFbC5vZmZzZXQoKS5sZWZ0O1xuICAgICAgb2Zmc2V0WSA9IGdlc3R1cmUuJHNsaWRlRWwub2Zmc2V0KCkudG9wO1xuICAgICAgZGlmZlggPSBvZmZzZXRYICsgc2xpZGVXaWR0aCAvIDIgLSB0b3VjaFg7XG4gICAgICBkaWZmWSA9IG9mZnNldFkgKyBzbGlkZUhlaWdodCAvIDIgLSB0b3VjaFk7XG4gICAgICBpbWFnZVdpZHRoID0gZ2VzdHVyZS4kaW1hZ2VFbFswXS5vZmZzZXRXaWR0aDtcbiAgICAgIGltYWdlSGVpZ2h0ID0gZ2VzdHVyZS4kaW1hZ2VFbFswXS5vZmZzZXRIZWlnaHQ7XG4gICAgICBzY2FsZWRXaWR0aCA9IGltYWdlV2lkdGggKiB6b29tLnNjYWxlO1xuICAgICAgc2NhbGVkSGVpZ2h0ID0gaW1hZ2VIZWlnaHQgKiB6b29tLnNjYWxlO1xuICAgICAgdHJhbnNsYXRlTWluWCA9IE1hdGgubWluKHNsaWRlV2lkdGggLyAyIC0gc2NhbGVkV2lkdGggLyAyLCAwKTtcbiAgICAgIHRyYW5zbGF0ZU1pblkgPSBNYXRoLm1pbihzbGlkZUhlaWdodCAvIDIgLSBzY2FsZWRIZWlnaHQgLyAyLCAwKTtcbiAgICAgIHRyYW5zbGF0ZU1heFggPSAtdHJhbnNsYXRlTWluWDtcbiAgICAgIHRyYW5zbGF0ZU1heFkgPSAtdHJhbnNsYXRlTWluWTtcbiAgICAgIHRyYW5zbGF0ZVggPSBkaWZmWCAqIHpvb20uc2NhbGU7XG4gICAgICB0cmFuc2xhdGVZID0gZGlmZlkgKiB6b29tLnNjYWxlO1xuXG4gICAgICBpZiAodHJhbnNsYXRlWCA8IHRyYW5zbGF0ZU1pblgpIHtcbiAgICAgICAgdHJhbnNsYXRlWCA9IHRyYW5zbGF0ZU1pblg7XG4gICAgICB9XG5cbiAgICAgIGlmICh0cmFuc2xhdGVYID4gdHJhbnNsYXRlTWF4WCkge1xuICAgICAgICB0cmFuc2xhdGVYID0gdHJhbnNsYXRlTWF4WDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRyYW5zbGF0ZVkgPCB0cmFuc2xhdGVNaW5ZKSB7XG4gICAgICAgIHRyYW5zbGF0ZVkgPSB0cmFuc2xhdGVNaW5ZO1xuICAgICAgfVxuXG4gICAgICBpZiAodHJhbnNsYXRlWSA+IHRyYW5zbGF0ZU1heFkpIHtcbiAgICAgICAgdHJhbnNsYXRlWSA9IHRyYW5zbGF0ZU1heFk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYW5zbGF0ZVggPSAwO1xuICAgICAgdHJhbnNsYXRlWSA9IDA7XG4gICAgfVxuXG4gICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwudHJhbnNpdGlvbigzMDApLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKFwiICsgdHJhbnNsYXRlWCArIFwicHgsIFwiICsgdHJhbnNsYXRlWSArIFwicHgsMClcIik7XG4gICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2l0aW9uKDMwMCkudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKFwiICsgem9vbS5zY2FsZSArIFwiKVwiKTtcbiAgfSxcbiAgb3V0OiBmdW5jdGlvbiBvdXQoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy56b29tO1xuICAgIHZhciBnZXN0dXJlID0gem9vbS5nZXN0dXJlO1xuXG4gICAgaWYgKCFnZXN0dXJlLiRzbGlkZUVsKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkICYmIHN3aXBlci52aXJ0dWFsKSB7XG4gICAgICAgIGdlc3R1cmUuJHNsaWRlRWwgPSBzd2lwZXIuJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHN3aXBlci5wYXJhbXMuc2xpZGVBY3RpdmVDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBnZXN0dXJlLiRzbGlkZUVsID0gc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgfVxuXG4gICAgICBnZXN0dXJlLiRpbWFnZUVsID0gZ2VzdHVyZS4kc2xpZGVFbC5maW5kKCdpbWcsIHN2ZywgY2FudmFzLCBwaWN0dXJlLCAuc3dpcGVyLXpvb20tdGFyZ2V0Jyk7XG4gICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbCA9IGdlc3R1cmUuJGltYWdlRWwucGFyZW50KFwiLlwiICsgcGFyYW1zLmNvbnRhaW5lckNsYXNzKTtcbiAgICB9XG5cbiAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICB6b29tLnNjYWxlID0gMTtcbiAgICB6b29tLmN1cnJlbnRTY2FsZSA9IDE7XG4gICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwudHJhbnNpdGlvbigzMDApLnRyYW5zZm9ybSgndHJhbnNsYXRlM2QoMCwwLDApJyk7XG4gICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2l0aW9uKDMwMCkudHJhbnNmb3JtKCd0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoMSknKTtcbiAgICBnZXN0dXJlLiRzbGlkZUVsLnJlbW92ZUNsYXNzKFwiXCIgKyBwYXJhbXMuem9vbWVkU2xpZGVDbGFzcyk7XG4gICAgZ2VzdHVyZS4kc2xpZGVFbCA9IHVuZGVmaW5lZDtcbiAgfSxcbiAgdG9nZ2xlR2VzdHVyZXM6IGZ1bmN0aW9uIHRvZ2dsZUdlc3R1cmVzKG1ldGhvZCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgdmFyIHNlbGVjdG9yID0gem9vbS5zbGlkZVNlbGVjdG9yLFxuICAgICAgICBwYXNzaXZlID0gem9vbS5wYXNzaXZlTGlzdGVuZXI7XG4gICAgc3dpcGVyLiR3cmFwcGVyRWxbbWV0aG9kXSgnZ2VzdHVyZXN0YXJ0Jywgc2VsZWN0b3IsIHpvb20ub25HZXN0dXJlU3RhcnQsIHBhc3NpdmUpO1xuICAgIHN3aXBlci4kd3JhcHBlckVsW21ldGhvZF0oJ2dlc3R1cmVjaGFuZ2UnLCBzZWxlY3Rvciwgem9vbS5vbkdlc3R1cmVDaGFuZ2UsIHBhc3NpdmUpO1xuICAgIHN3aXBlci4kd3JhcHBlckVsW21ldGhvZF0oJ2dlc3R1cmVlbmQnLCBzZWxlY3Rvciwgem9vbS5vbkdlc3R1cmVFbmQsIHBhc3NpdmUpO1xuICB9LFxuICBlbmFibGVHZXN0dXJlczogZnVuY3Rpb24gZW5hYmxlR2VzdHVyZXMoKSB7XG4gICAgaWYgKHRoaXMuem9vbS5nZXN0dXJlc0VuYWJsZWQpIHJldHVybjtcbiAgICB0aGlzLnpvb20uZ2VzdHVyZXNFbmFibGVkID0gdHJ1ZTtcbiAgICB0aGlzLnpvb20udG9nZ2xlR2VzdHVyZXMoJ29uJyk7XG4gIH0sXG4gIGRpc2FibGVHZXN0dXJlczogZnVuY3Rpb24gZGlzYWJsZUdlc3R1cmVzKCkge1xuICAgIGlmICghdGhpcy56b29tLmdlc3R1cmVzRW5hYmxlZCkgcmV0dXJuO1xuICAgIHRoaXMuem9vbS5nZXN0dXJlc0VuYWJsZWQgPSBmYWxzZTtcbiAgICB0aGlzLnpvb20udG9nZ2xlR2VzdHVyZXMoJ29mZicpO1xuICB9LFxuICAvLyBBdHRhY2gvRGV0YWNoIEV2ZW50c1xuICBlbmFibGU6IGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgc3VwcG9ydCA9IHN3aXBlci5zdXBwb3J0O1xuICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgaWYgKHpvb20uZW5hYmxlZCkgcmV0dXJuO1xuICAgIHpvb20uZW5hYmxlZCA9IHRydWU7XG4gICAgdmFyIHBhc3NpdmVMaXN0ZW5lciA9IHN3aXBlci50b3VjaEV2ZW50cy5zdGFydCA9PT0gJ3RvdWNoc3RhcnQnICYmIHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHN3aXBlci5wYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHtcbiAgICAgIHBhc3NpdmU6IHRydWUsXG4gICAgICBjYXB0dXJlOiBmYWxzZVxuICAgIH0gOiBmYWxzZTtcbiAgICB2YXIgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSA9IHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyID8ge1xuICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICBjYXB0dXJlOiB0cnVlXG4gICAgfSA6IHRydWU7XG4gICAgdmFyIHNsaWRlU2VsZWN0b3IgPSBcIi5cIiArIHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcztcbiAgICBzd2lwZXIuem9vbS5wYXNzaXZlTGlzdGVuZXIgPSBwYXNzaXZlTGlzdGVuZXI7XG4gICAgc3dpcGVyLnpvb20uc2xpZGVTZWxlY3RvciA9IHNsaWRlU2VsZWN0b3I7IC8vIFNjYWxlIGltYWdlXG5cbiAgICBpZiAoc3VwcG9ydC5nZXN0dXJlcykge1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub24oc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0LCBzd2lwZXIuem9vbS5lbmFibGVHZXN0dXJlcywgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9uKHN3aXBlci50b3VjaEV2ZW50cy5lbmQsIHN3aXBlci56b29tLmRpc2FibGVHZXN0dXJlcywgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICB9IGVsc2UgaWYgKHN3aXBlci50b3VjaEV2ZW50cy5zdGFydCA9PT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vbihzd2lwZXIudG91Y2hFdmVudHMuc3RhcnQsIHNsaWRlU2VsZWN0b3IsIHpvb20ub25HZXN0dXJlU3RhcnQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vbihzd2lwZXIudG91Y2hFdmVudHMubW92ZSwgc2xpZGVTZWxlY3Rvciwgem9vbS5vbkdlc3R1cmVDaGFuZ2UsIGFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmUpO1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub24oc3dpcGVyLnRvdWNoRXZlbnRzLmVuZCwgc2xpZGVTZWxlY3Rvciwgem9vbS5vbkdlc3R1cmVFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG5cbiAgICAgIGlmIChzd2lwZXIudG91Y2hFdmVudHMuY2FuY2VsKSB7XG4gICAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9uKHN3aXBlci50b3VjaEV2ZW50cy5jYW5jZWwsIHNsaWRlU2VsZWN0b3IsIHpvb20ub25HZXN0dXJlRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgfVxuICAgIH0gLy8gTW92ZSBpbWFnZVxuXG5cbiAgICBzd2lwZXIuJHdyYXBwZXJFbC5vbihzd2lwZXIudG91Y2hFdmVudHMubW92ZSwgXCIuXCIgKyBzd2lwZXIucGFyYW1zLnpvb20uY29udGFpbmVyQ2xhc3MsIHpvb20ub25Ub3VjaE1vdmUsIGFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmUpO1xuICB9LFxuICBkaXNhYmxlOiBmdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgaWYgKCF6b29tLmVuYWJsZWQpIHJldHVybjtcbiAgICB2YXIgc3VwcG9ydCA9IHN3aXBlci5zdXBwb3J0O1xuICAgIHN3aXBlci56b29tLmVuYWJsZWQgPSBmYWxzZTtcbiAgICB2YXIgcGFzc2l2ZUxpc3RlbmVyID0gc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0ID09PSAndG91Y2hzdGFydCcgJiYgc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgc3dpcGVyLnBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8ge1xuICAgICAgcGFzc2l2ZTogdHJ1ZSxcbiAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgfSA6IGZhbHNlO1xuICAgIHZhciBhY3RpdmVMaXN0ZW5lcldpdGhDYXB0dXJlID0gc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgPyB7XG4gICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgIGNhcHR1cmU6IHRydWVcbiAgICB9IDogdHJ1ZTtcbiAgICB2YXIgc2xpZGVTZWxlY3RvciA9IFwiLlwiICsgc3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzOyAvLyBTY2FsZSBpbWFnZVxuXG4gICAgaWYgKHN1cHBvcnQuZ2VzdHVyZXMpIHtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9mZihzd2lwZXIudG91Y2hFdmVudHMuc3RhcnQsIHN3aXBlci56b29tLmVuYWJsZUdlc3R1cmVzLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub2ZmKHN3aXBlci50b3VjaEV2ZW50cy5lbmQsIHN3aXBlci56b29tLmRpc2FibGVHZXN0dXJlcywgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICB9IGVsc2UgaWYgKHN3aXBlci50b3VjaEV2ZW50cy5zdGFydCA9PT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0LCBzbGlkZVNlbGVjdG9yLCB6b29tLm9uR2VzdHVyZVN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub2ZmKHN3aXBlci50b3VjaEV2ZW50cy5tb3ZlLCBzbGlkZVNlbGVjdG9yLCB6b29tLm9uR2VzdHVyZUNoYW5nZSwgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSk7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoc3dpcGVyLnRvdWNoRXZlbnRzLmVuZCwgc2xpZGVTZWxlY3Rvciwgem9vbS5vbkdlc3R1cmVFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG5cbiAgICAgIGlmIChzd2lwZXIudG91Y2hFdmVudHMuY2FuY2VsKSB7XG4gICAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9mZihzd2lwZXIudG91Y2hFdmVudHMuY2FuY2VsLCBzbGlkZVNlbGVjdG9yLCB6b29tLm9uR2VzdHVyZUVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICB9IC8vIE1vdmUgaW1hZ2VcblxuXG4gICAgc3dpcGVyLiR3cmFwcGVyRWwub2ZmKHN3aXBlci50b3VjaEV2ZW50cy5tb3ZlLCBcIi5cIiArIHN3aXBlci5wYXJhbXMuem9vbS5jb250YWluZXJDbGFzcywgem9vbS5vblRvdWNoTW92ZSwgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSk7XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICd6b29tJyxcbiAgcGFyYW1zOiB7XG4gICAgem9vbToge1xuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICBtYXhSYXRpbzogMyxcbiAgICAgIG1pblJhdGlvOiAxLFxuICAgICAgdG9nZ2xlOiB0cnVlLFxuICAgICAgY29udGFpbmVyQ2xhc3M6ICdzd2lwZXItem9vbS1jb250YWluZXInLFxuICAgICAgem9vbWVkU2xpZGVDbGFzczogJ3N3aXBlci1zbGlkZS16b29tZWQnXG4gICAgfVxuICB9LFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBiaW5kTW9kdWxlTWV0aG9kcyhzd2lwZXIsIHtcbiAgICAgIHpvb206IF9leHRlbmRzKHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgIHNjYWxlOiAxLFxuICAgICAgICBjdXJyZW50U2NhbGU6IDEsXG4gICAgICAgIGlzU2NhbGluZzogZmFsc2UsXG4gICAgICAgIGdlc3R1cmU6IHtcbiAgICAgICAgICAkc2xpZGVFbDogdW5kZWZpbmVkLFxuICAgICAgICAgIHNsaWRlV2lkdGg6IHVuZGVmaW5lZCxcbiAgICAgICAgICBzbGlkZUhlaWdodDogdW5kZWZpbmVkLFxuICAgICAgICAgICRpbWFnZUVsOiB1bmRlZmluZWQsXG4gICAgICAgICAgJGltYWdlV3JhcEVsOiB1bmRlZmluZWQsXG4gICAgICAgICAgbWF4UmF0aW86IDNcbiAgICAgICAgfSxcbiAgICAgICAgaW1hZ2U6IHtcbiAgICAgICAgICBpc1RvdWNoZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICBpc01vdmVkOiB1bmRlZmluZWQsXG4gICAgICAgICAgY3VycmVudFg6IHVuZGVmaW5lZCxcbiAgICAgICAgICBjdXJyZW50WTogdW5kZWZpbmVkLFxuICAgICAgICAgIG1pblg6IHVuZGVmaW5lZCxcbiAgICAgICAgICBtaW5ZOiB1bmRlZmluZWQsXG4gICAgICAgICAgbWF4WDogdW5kZWZpbmVkLFxuICAgICAgICAgIG1heFk6IHVuZGVmaW5lZCxcbiAgICAgICAgICB3aWR0aDogdW5kZWZpbmVkLFxuICAgICAgICAgIGhlaWdodDogdW5kZWZpbmVkLFxuICAgICAgICAgIHN0YXJ0WDogdW5kZWZpbmVkLFxuICAgICAgICAgIHN0YXJ0WTogdW5kZWZpbmVkLFxuICAgICAgICAgIHRvdWNoZXNTdGFydDoge30sXG4gICAgICAgICAgdG91Y2hlc0N1cnJlbnQ6IHt9XG4gICAgICAgIH0sXG4gICAgICAgIHZlbG9jaXR5OiB7XG4gICAgICAgICAgeDogdW5kZWZpbmVkLFxuICAgICAgICAgIHk6IHVuZGVmaW5lZCxcbiAgICAgICAgICBwcmV2UG9zaXRpb25YOiB1bmRlZmluZWQsXG4gICAgICAgICAgcHJldlBvc2l0aW9uWTogdW5kZWZpbmVkLFxuICAgICAgICAgIHByZXZUaW1lOiB1bmRlZmluZWRcbiAgICAgICAgfVxuICAgICAgfSwgWm9vbSlcbiAgICB9KTtcbiAgICB2YXIgc2NhbGUgPSAxO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzd2lwZXIuem9vbSwgJ3NjYWxlJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBzY2FsZTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICBpZiAoc2NhbGUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgdmFyIGltYWdlRWwgPSBzd2lwZXIuem9vbS5nZXN0dXJlLiRpbWFnZUVsID8gc3dpcGVyLnpvb20uZ2VzdHVyZS4kaW1hZ2VFbFswXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICB2YXIgc2xpZGVFbCA9IHN3aXBlci56b29tLmdlc3R1cmUuJHNsaWRlRWwgPyBzd2lwZXIuem9vbS5nZXN0dXJlLiRzbGlkZUVsWzBdIDogdW5kZWZpbmVkO1xuICAgICAgICAgIHN3aXBlci5lbWl0KCd6b29tQ2hhbmdlJywgdmFsdWUsIGltYWdlRWwsIHNsaWRlRWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2NhbGUgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuem9vbS5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci56b29tLmVuYWJsZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveShzd2lwZXIpIHtcbiAgICAgIHN3aXBlci56b29tLmRpc2FibGUoKTtcbiAgICB9LFxuICAgIHRvdWNoU3RhcnQ6IGZ1bmN0aW9uIHRvdWNoU3RhcnQoc3dpcGVyLCBlKSB7XG4gICAgICBpZiAoIXN3aXBlci56b29tLmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci56b29tLm9uVG91Y2hTdGFydChlKTtcbiAgICB9LFxuICAgIHRvdWNoRW5kOiBmdW5jdGlvbiB0b3VjaEVuZChzd2lwZXIsIGUpIHtcbiAgICAgIGlmICghc3dpcGVyLnpvb20uZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnpvb20ub25Ub3VjaEVuZChlKTtcbiAgICB9LFxuICAgIGRvdWJsZVRhcDogZnVuY3Rpb24gZG91YmxlVGFwKHN3aXBlciwgZSkge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuem9vbS5lbmFibGVkICYmIHN3aXBlci56b29tLmVuYWJsZWQgJiYgc3dpcGVyLnBhcmFtcy56b29tLnRvZ2dsZSkge1xuICAgICAgICBzd2lwZXIuem9vbS50b2dnbGUoZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICB0cmFuc2l0aW9uRW5kOiBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci56b29tLmVuYWJsZWQgJiYgc3dpcGVyLnBhcmFtcy56b29tLmVuYWJsZWQpIHtcbiAgICAgICAgc3dpcGVyLnpvb20ub25UcmFuc2l0aW9uRW5kKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzbGlkZUNoYW5nZTogZnVuY3Rpb24gc2xpZGVDaGFuZ2Uoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnpvb20uZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLnpvb20uZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgc3dpcGVyLnpvb20ub25UcmFuc2l0aW9uRW5kKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59OyIsImZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0IHsgYmluZE1vZHVsZU1ldGhvZHMgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG52YXIgT2JzZXJ2ZXIgPSB7XG4gIGF0dGFjaDogZnVuY3Rpb24gYXR0YWNoKHRhcmdldCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIE9ic2VydmVyRnVuYyA9IHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyIHx8IHdpbmRvdy5XZWJraXRNdXRhdGlvbk9ic2VydmVyO1xuICAgIHZhciBvYnNlcnZlciA9IG5ldyBPYnNlcnZlckZ1bmMoZnVuY3Rpb24gKG11dGF0aW9ucykge1xuICAgICAgLy8gVGhlIG9ic2VydmVyVXBkYXRlIGV2ZW50IHNob3VsZCBvbmx5IGJlIHRyaWdnZXJlZFxuICAgICAgLy8gb25jZSBkZXNwaXRlIHRoZSBudW1iZXIgb2YgbXV0YXRpb25zLiAgQWRkaXRpb25hbFxuICAgICAgLy8gdHJpZ2dlcnMgYXJlIHJlZHVuZGFudCBhbmQgYXJlIHZlcnkgY29zdGx5XG4gICAgICBpZiAobXV0YXRpb25zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBzd2lwZXIuZW1pdCgnb2JzZXJ2ZXJVcGRhdGUnLCBtdXRhdGlvbnNbMF0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBvYnNlcnZlclVwZGF0ZSA9IGZ1bmN0aW9uIG9ic2VydmVyVXBkYXRlKCkge1xuICAgICAgICBzd2lwZXIuZW1pdCgnb2JzZXJ2ZXJVcGRhdGUnLCBtdXRhdGlvbnNbMF0pO1xuICAgICAgfTtcblxuICAgICAgaWYgKHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShvYnNlcnZlclVwZGF0ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cuc2V0VGltZW91dChvYnNlcnZlclVwZGF0ZSwgMCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZSh0YXJnZXQsIHtcbiAgICAgIGF0dHJpYnV0ZXM6IHR5cGVvZiBvcHRpb25zLmF0dHJpYnV0ZXMgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMuYXR0cmlidXRlcyxcbiAgICAgIGNoaWxkTGlzdDogdHlwZW9mIG9wdGlvbnMuY2hpbGRMaXN0ID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmNoaWxkTGlzdCxcbiAgICAgIGNoYXJhY3RlckRhdGE6IHR5cGVvZiBvcHRpb25zLmNoYXJhY3RlckRhdGEgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMuY2hhcmFjdGVyRGF0YVxuICAgIH0pO1xuICAgIHN3aXBlci5vYnNlcnZlci5vYnNlcnZlcnMucHVzaChvYnNlcnZlcik7XG4gIH0sXG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIuc3VwcG9ydC5vYnNlcnZlciB8fCAhc3dpcGVyLnBhcmFtcy5vYnNlcnZlcikgcmV0dXJuO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMub2JzZXJ2ZVBhcmVudHMpIHtcbiAgICAgIHZhciBjb250YWluZXJQYXJlbnRzID0gc3dpcGVyLiRlbC5wYXJlbnRzKCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29udGFpbmVyUGFyZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBzd2lwZXIub2JzZXJ2ZXIuYXR0YWNoKGNvbnRhaW5lclBhcmVudHNbaV0pO1xuICAgICAgfVxuICAgIH0gLy8gT2JzZXJ2ZSBjb250YWluZXJcblxuXG4gICAgc3dpcGVyLm9ic2VydmVyLmF0dGFjaChzd2lwZXIuJGVsWzBdLCB7XG4gICAgICBjaGlsZExpc3Q6IHN3aXBlci5wYXJhbXMub2JzZXJ2ZVNsaWRlQ2hpbGRyZW5cbiAgICB9KTsgLy8gT2JzZXJ2ZSB3cmFwcGVyXG5cbiAgICBzd2lwZXIub2JzZXJ2ZXIuYXR0YWNoKHN3aXBlci4kd3JhcHBlckVsWzBdLCB7XG4gICAgICBhdHRyaWJ1dGVzOiBmYWxzZVxuICAgIH0pO1xuICB9LFxuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5vYnNlcnZlci5vYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICB9KTtcbiAgICBzd2lwZXIub2JzZXJ2ZXIub2JzZXJ2ZXJzID0gW107XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdvYnNlcnZlcicsXG4gIHBhcmFtczoge1xuICAgIG9ic2VydmVyOiBmYWxzZSxcbiAgICBvYnNlcnZlUGFyZW50czogZmFsc2UsXG4gICAgb2JzZXJ2ZVNsaWRlQ2hpbGRyZW46IGZhbHNlXG4gIH0sXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGJpbmRNb2R1bGVNZXRob2RzKHN3aXBlciwge1xuICAgICAgb2JzZXJ2ZXI6IF9leHRlbmRzKF9leHRlbmRzKHt9LCBPYnNlcnZlciksIHt9LCB7XG4gICAgICAgIG9ic2VydmVyczogW11cbiAgICAgIH0pXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdDogZnVuY3Rpb24gaW5pdChzd2lwZXIpIHtcbiAgICAgIHN3aXBlci5vYnNlcnZlci5pbml0KCk7XG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KHN3aXBlcikge1xuICAgICAgc3dpcGVyLm9ic2VydmVyLmRlc3Ryb3koKTtcbiAgICB9XG4gIH1cbn07IiwiaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgeyBleHRlbmQgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdyZXNpemUnLFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBleHRlbmQoc3dpcGVyLCB7XG4gICAgICByZXNpemU6IHtcbiAgICAgICAgcmVzaXplSGFuZGxlcjogZnVuY3Rpb24gcmVzaXplSGFuZGxlcigpIHtcbiAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlUmVzaXplJyk7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ3Jlc2l6ZScpO1xuICAgICAgICB9LFxuICAgICAgICBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXI6IGZ1bmN0aW9uIG9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcigpIHtcbiAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnb3JpZW50YXRpb25jaGFuZ2UnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoc3dpcGVyKSB7XG4gICAgICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7IC8vIEVtaXQgcmVzaXplXG5cbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBzd2lwZXIucmVzaXplLnJlc2l6ZUhhbmRsZXIpOyAvLyBFbWl0IG9yaWVudGF0aW9uY2hhbmdlXG5cbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIHN3aXBlci5yZXNpemUub3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyKTtcbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koc3dpcGVyKSB7XG4gICAgICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3dpcGVyLnJlc2l6ZS5yZXNpemVIYW5kbGVyKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIHN3aXBlci5yZXNpemUub3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyKTtcbiAgICB9XG4gIH1cbn07IiwiaW1wb3J0IHsgJCwgYWRkQ2xhc3MsIHJlbW92ZUNsYXNzLCBoYXNDbGFzcywgdG9nZ2xlQ2xhc3MsIGF0dHIsIHJlbW92ZUF0dHIsIHRyYW5zZm9ybSwgdHJhbnNpdGlvbiwgb24sIG9mZiwgdHJpZ2dlciwgdHJhbnNpdGlvbkVuZCwgb3V0ZXJXaWR0aCwgb3V0ZXJIZWlnaHQsIHN0eWxlcywgb2Zmc2V0LCBjc3MsIGVhY2gsIGh0bWwsIHRleHQsIGlzLCBpbmRleCwgZXEsIGFwcGVuZCwgcHJlcGVuZCwgbmV4dCwgbmV4dEFsbCwgcHJldiwgcHJldkFsbCwgcGFyZW50LCBwYXJlbnRzLCBjbG9zZXN0LCBmaW5kLCBjaGlsZHJlbiwgZmlsdGVyLCByZW1vdmUgfSBmcm9tICdkb203JztcbnZhciBNZXRob2RzID0ge1xuICBhZGRDbGFzczogYWRkQ2xhc3MsXG4gIHJlbW92ZUNsYXNzOiByZW1vdmVDbGFzcyxcbiAgaGFzQ2xhc3M6IGhhc0NsYXNzLFxuICB0b2dnbGVDbGFzczogdG9nZ2xlQ2xhc3MsXG4gIGF0dHI6IGF0dHIsXG4gIHJlbW92ZUF0dHI6IHJlbW92ZUF0dHIsXG4gIHRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uLFxuICBvbjogb24sXG4gIG9mZjogb2ZmLFxuICB0cmlnZ2VyOiB0cmlnZ2VyLFxuICB0cmFuc2l0aW9uRW5kOiB0cmFuc2l0aW9uRW5kLFxuICBvdXRlcldpZHRoOiBvdXRlcldpZHRoLFxuICBvdXRlckhlaWdodDogb3V0ZXJIZWlnaHQsXG4gIHN0eWxlczogc3R5bGVzLFxuICBvZmZzZXQ6IG9mZnNldCxcbiAgY3NzOiBjc3MsXG4gIGVhY2g6IGVhY2gsXG4gIGh0bWw6IGh0bWwsXG4gIHRleHQ6IHRleHQsXG4gIGlzOiBpcyxcbiAgaW5kZXg6IGluZGV4LFxuICBlcTogZXEsXG4gIGFwcGVuZDogYXBwZW5kLFxuICBwcmVwZW5kOiBwcmVwZW5kLFxuICBuZXh0OiBuZXh0LFxuICBuZXh0QWxsOiBuZXh0QWxsLFxuICBwcmV2OiBwcmV2LFxuICBwcmV2QWxsOiBwcmV2QWxsLFxuICBwYXJlbnQ6IHBhcmVudCxcbiAgcGFyZW50czogcGFyZW50cyxcbiAgY2xvc2VzdDogY2xvc2VzdCxcbiAgZmluZDogZmluZCxcbiAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICBmaWx0ZXI6IGZpbHRlcixcbiAgcmVtb3ZlOiByZW1vdmVcbn07XG5PYmplY3Qua2V5cyhNZXRob2RzKS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7XG4gICQuZm5bbWV0aG9kTmFtZV0gPSBNZXRob2RzW21ldGhvZE5hbWVdO1xufSk7XG5leHBvcnQgZGVmYXVsdCAkOyIsImltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJ3Nzci13aW5kb3cnO1xudmFyIGJyb3dzZXI7XG5cbmZ1bmN0aW9uIGNhbGNCcm93c2VyKCkge1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG5cbiAgZnVuY3Rpb24gaXNTYWZhcmkoKSB7XG4gICAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gdWEuaW5kZXhPZignc2FmYXJpJykgPj0gMCAmJiB1YS5pbmRleE9mKCdjaHJvbWUnKSA8IDAgJiYgdWEuaW5kZXhPZignYW5kcm9pZCcpIDwgMDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaXNFZGdlOiAhIXdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9FZGdlL2cpLFxuICAgIGlzU2FmYXJpOiBpc1NhZmFyaSgpLFxuICAgIGlzV2ViVmlldzogLyhpUGhvbmV8aVBvZHxpUGFkKS4qQXBwbGVXZWJLaXQoPyEuKlNhZmFyaSkvaS50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRCcm93c2VyKCkge1xuICBpZiAoIWJyb3dzZXIpIHtcbiAgICBicm93c2VyID0gY2FsY0Jyb3dzZXIoKTtcbiAgfVxuXG4gIHJldHVybiBicm93c2VyO1xufVxuXG5leHBvcnQgeyBnZXRCcm93c2VyIH07IiwiaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgeyBnZXRTdXBwb3J0IH0gZnJvbSAnLi9nZXQtc3VwcG9ydCc7XG52YXIgZGV2aWNlO1xuXG5mdW5jdGlvbiBjYWxjRGV2aWNlKF90ZW1wKSB7XG4gIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICB1c2VyQWdlbnQgPSBfcmVmLnVzZXJBZ2VudDtcblxuICB2YXIgc3VwcG9ydCA9IGdldFN1cHBvcnQoKTtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICB2YXIgcGxhdGZvcm0gPSB3aW5kb3cubmF2aWdhdG9yLnBsYXRmb3JtO1xuICB2YXIgdWEgPSB1c2VyQWdlbnQgfHwgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gIHZhciBkZXZpY2UgPSB7XG4gICAgaW9zOiBmYWxzZSxcbiAgICBhbmRyb2lkOiBmYWxzZVxuICB9O1xuICB2YXIgc2NyZWVuV2lkdGggPSB3aW5kb3cuc2NyZWVuLndpZHRoO1xuICB2YXIgc2NyZWVuSGVpZ2h0ID0gd2luZG93LnNjcmVlbi5oZWlnaHQ7XG4gIHZhciBhbmRyb2lkID0gdWEubWF0Y2goLyhBbmRyb2lkKTs/W1xcc1xcL10rKFtcXGQuXSspPy8pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgdmFyIGlwYWQgPSB1YS5tYXRjaCgvKGlQYWQpLipPU1xccyhbXFxkX10rKS8pO1xuICB2YXIgaXBvZCA9IHVhLm1hdGNoKC8oaVBvZCkoLipPU1xccyhbXFxkX10rKSk/Lyk7XG4gIHZhciBpcGhvbmUgPSAhaXBhZCAmJiB1YS5tYXRjaCgvKGlQaG9uZVxcc09TfGlPUylcXHMoW1xcZF9dKykvKTtcbiAgdmFyIHdpbmRvd3MgPSBwbGF0Zm9ybSA9PT0gJ1dpbjMyJztcbiAgdmFyIG1hY29zID0gcGxhdGZvcm0gPT09ICdNYWNJbnRlbCc7IC8vIGlQYWRPcyAxMyBmaXhcblxuICB2YXIgaVBhZFNjcmVlbnMgPSBbJzEwMjR4MTM2NicsICcxMzY2eDEwMjQnLCAnODM0eDExOTQnLCAnMTE5NHg4MzQnLCAnODM0eDExMTInLCAnMTExMng4MzQnLCAnNzY4eDEwMjQnLCAnMTAyNHg3NjgnXTtcblxuICBpZiAoIWlwYWQgJiYgbWFjb3MgJiYgc3VwcG9ydC50b3VjaCAmJiBpUGFkU2NyZWVucy5pbmRleE9mKHNjcmVlbldpZHRoICsgXCJ4XCIgKyBzY3JlZW5IZWlnaHQpID49IDApIHtcbiAgICBpcGFkID0gdWEubWF0Y2goLyhWZXJzaW9uKVxcLyhbXFxkLl0rKS8pO1xuICAgIGlmICghaXBhZCkgaXBhZCA9IFswLCAxLCAnMTNfMF8wJ107XG4gICAgbWFjb3MgPSBmYWxzZTtcbiAgfSAvLyBBbmRyb2lkXG5cblxuICBpZiAoYW5kcm9pZCAmJiAhd2luZG93cykge1xuICAgIGRldmljZS5vcyA9ICdhbmRyb2lkJztcbiAgICBkZXZpY2UuYW5kcm9pZCA9IHRydWU7XG4gIH1cblxuICBpZiAoaXBhZCB8fCBpcGhvbmUgfHwgaXBvZCkge1xuICAgIGRldmljZS5vcyA9ICdpb3MnO1xuICAgIGRldmljZS5pb3MgPSB0cnVlO1xuICB9IC8vIEV4cG9ydCBvYmplY3RcblxuXG4gIHJldHVybiBkZXZpY2U7XG59XG5cbmZ1bmN0aW9uIGdldERldmljZShvdmVycmlkZXMpIHtcbiAgaWYgKG92ZXJyaWRlcyA9PT0gdm9pZCAwKSB7XG4gICAgb3ZlcnJpZGVzID0ge307XG4gIH1cblxuICBpZiAoIWRldmljZSkge1xuICAgIGRldmljZSA9IGNhbGNEZXZpY2Uob3ZlcnJpZGVzKTtcbiAgfVxuXG4gIHJldHVybiBkZXZpY2U7XG59XG5cbmV4cG9ydCB7IGdldERldmljZSB9OyIsImltcG9ydCB7IGdldFdpbmRvdywgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbnZhciBzdXBwb3J0O1xuXG5mdW5jdGlvbiBjYWxjU3VwcG9ydCgpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICByZXR1cm4ge1xuICAgIHRvdWNoOiAhISgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cgfHwgd2luZG93LkRvY3VtZW50VG91Y2ggJiYgZG9jdW1lbnQgaW5zdGFuY2VvZiB3aW5kb3cuRG9jdW1lbnRUb3VjaCksXG4gICAgcG9pbnRlckV2ZW50czogISF3aW5kb3cuUG9pbnRlckV2ZW50ICYmICdtYXhUb3VjaFBvaW50cycgaW4gd2luZG93Lm5hdmlnYXRvciAmJiB3aW5kb3cubmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID49IDAsXG4gICAgb2JzZXJ2ZXI6IGZ1bmN0aW9uIGNoZWNrT2JzZXJ2ZXIoKSB7XG4gICAgICByZXR1cm4gJ011dGF0aW9uT2JzZXJ2ZXInIGluIHdpbmRvdyB8fCAnV2Via2l0TXV0YXRpb25PYnNlcnZlcicgaW4gd2luZG93O1xuICAgIH0oKSxcbiAgICBwYXNzaXZlTGlzdGVuZXI6IGZ1bmN0aW9uIGNoZWNrUGFzc2l2ZUxpc3RlbmVyKCkge1xuICAgICAgdmFyIHN1cHBvcnRzUGFzc2l2ZSA9IGZhbHNlO1xuXG4gICAgICB0cnkge1xuICAgICAgICB2YXIgb3B0cyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3Bhc3NpdmUnLCB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICBzdXBwb3J0c1Bhc3NpdmUgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0UGFzc2l2ZUxpc3RlbmVyJywgbnVsbCwgb3B0cyk7XG4gICAgICB9IGNhdGNoIChlKSB7Ly8gTm8gc3VwcG9ydFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3VwcG9ydHNQYXNzaXZlO1xuICAgIH0oKSxcbiAgICBnZXN0dXJlczogZnVuY3Rpb24gY2hlY2tHZXN0dXJlcygpIHtcbiAgICAgIHJldHVybiAnb25nZXN0dXJlc3RhcnQnIGluIHdpbmRvdztcbiAgICB9KClcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0U3VwcG9ydCgpIHtcbiAgaWYgKCFzdXBwb3J0KSB7XG4gICAgc3VwcG9ydCA9IGNhbGNTdXBwb3J0KCk7XG4gIH1cblxuICByZXR1cm4gc3VwcG9ydDtcbn1cblxuZXhwb3J0IHsgZ2V0U3VwcG9ydCB9OyIsImltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJ3Nzci13aW5kb3cnO1xuXG5mdW5jdGlvbiBkZWxldGVQcm9wcyhvYmopIHtcbiAgdmFyIG9iamVjdCA9IG9iajtcbiAgT2JqZWN0LmtleXMob2JqZWN0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB0cnkge1xuICAgICAgb2JqZWN0W2tleV0gPSBudWxsO1xuICAgIH0gY2F0Y2ggKGUpIHsvLyBubyBnZXR0ZXIgZm9yIG9iamVjdFxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBkZWxldGUgb2JqZWN0W2tleV07XG4gICAgfSBjYXRjaCAoZSkgey8vIHNvbWV0aGluZyBnb3Qgd3JvbmdcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBuZXh0VGljayhjYWxsYmFjaywgZGVsYXkpIHtcbiAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHtcbiAgICBkZWxheSA9IDA7XG4gIH1cblxuICByZXR1cm4gc2V0VGltZW91dChjYWxsYmFjaywgZGVsYXkpO1xufVxuXG5mdW5jdGlvbiBub3coKSB7XG4gIHJldHVybiBEYXRlLm5vdygpO1xufVxuXG5mdW5jdGlvbiBnZXRUcmFuc2xhdGUoZWwsIGF4aXMpIHtcbiAgaWYgKGF4aXMgPT09IHZvaWQgMCkge1xuICAgIGF4aXMgPSAneCc7XG4gIH1cblxuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIHZhciBtYXRyaXg7XG4gIHZhciBjdXJUcmFuc2Zvcm07XG4gIHZhciB0cmFuc2Zvcm1NYXRyaXg7XG4gIHZhciBjdXJTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKTtcblxuICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkge1xuICAgIGN1clRyYW5zZm9ybSA9IGN1clN0eWxlLnRyYW5zZm9ybSB8fCBjdXJTdHlsZS53ZWJraXRUcmFuc2Zvcm07XG5cbiAgICBpZiAoY3VyVHJhbnNmb3JtLnNwbGl0KCcsJykubGVuZ3RoID4gNikge1xuICAgICAgY3VyVHJhbnNmb3JtID0gY3VyVHJhbnNmb3JtLnNwbGl0KCcsICcpLm1hcChmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gYS5yZXBsYWNlKCcsJywgJy4nKTtcbiAgICAgIH0pLmpvaW4oJywgJyk7XG4gICAgfSAvLyBTb21lIG9sZCB2ZXJzaW9ucyBvZiBXZWJraXQgY2hva2Ugd2hlbiAnbm9uZScgaXMgcGFzc2VkOyBwYXNzXG4gICAgLy8gZW1wdHkgc3RyaW5nIGluc3RlYWQgaW4gdGhpcyBjYXNlXG5cblxuICAgIHRyYW5zZm9ybU1hdHJpeCA9IG5ldyB3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KGN1clRyYW5zZm9ybSA9PT0gJ25vbmUnID8gJycgOiBjdXJUcmFuc2Zvcm0pO1xuICB9IGVsc2Uge1xuICAgIHRyYW5zZm9ybU1hdHJpeCA9IGN1clN0eWxlLk1velRyYW5zZm9ybSB8fCBjdXJTdHlsZS5PVHJhbnNmb3JtIHx8IGN1clN0eWxlLk1zVHJhbnNmb3JtIHx8IGN1clN0eWxlLm1zVHJhbnNmb3JtIHx8IGN1clN0eWxlLnRyYW5zZm9ybSB8fCBjdXJTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCd0cmFuc2Zvcm0nKS5yZXBsYWNlKCd0cmFuc2xhdGUoJywgJ21hdHJpeCgxLCAwLCAwLCAxLCcpO1xuICAgIG1hdHJpeCA9IHRyYW5zZm9ybU1hdHJpeC50b1N0cmluZygpLnNwbGl0KCcsJyk7XG4gIH1cblxuICBpZiAoYXhpcyA9PT0gJ3gnKSB7XG4gICAgLy8gTGF0ZXN0IENocm9tZSBhbmQgd2Via2l0cyBGaXhcbiAgICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkgY3VyVHJhbnNmb3JtID0gdHJhbnNmb3JtTWF0cml4Lm00MTsgLy8gQ3JhenkgSUUxMCBNYXRyaXhcbiAgICBlbHNlIGlmIChtYXRyaXgubGVuZ3RoID09PSAxNikgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbMTJdKTsgLy8gTm9ybWFsIEJyb3dzZXJzXG4gICAgICBlbHNlIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzRdKTtcbiAgfVxuXG4gIGlmIChheGlzID09PSAneScpIHtcbiAgICAvLyBMYXRlc3QgQ2hyb21lIGFuZCB3ZWJraXRzIEZpeFxuICAgIGlmICh3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KSBjdXJUcmFuc2Zvcm0gPSB0cmFuc2Zvcm1NYXRyaXgubTQyOyAvLyBDcmF6eSBJRTEwIE1hdHJpeFxuICAgIGVsc2UgaWYgKG1hdHJpeC5sZW5ndGggPT09IDE2KSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFsxM10pOyAvLyBOb3JtYWwgQnJvd3NlcnNcbiAgICAgIGVsc2UgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbNV0pO1xuICB9XG5cbiAgcmV0dXJuIGN1clRyYW5zZm9ybSB8fCAwO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdChvKSB7XG4gIHJldHVybiB0eXBlb2YgbyA9PT0gJ29iamVjdCcgJiYgbyAhPT0gbnVsbCAmJiBvLmNvbnN0cnVjdG9yICYmIG8uY29uc3RydWN0b3IgPT09IE9iamVjdDtcbn1cblxuZnVuY3Rpb24gZXh0ZW5kKCkge1xuICB2YXIgdG8gPSBPYmplY3QoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKTtcblxuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBuZXh0U291cmNlID0gaSA8IDAgfHwgYXJndW1lbnRzLmxlbmd0aCA8PSBpID8gdW5kZWZpbmVkIDogYXJndW1lbnRzW2ldO1xuXG4gICAgaWYgKG5leHRTb3VyY2UgIT09IHVuZGVmaW5lZCAmJiBuZXh0U291cmNlICE9PSBudWxsKSB7XG4gICAgICB2YXIga2V5c0FycmF5ID0gT2JqZWN0LmtleXMoT2JqZWN0KG5leHRTb3VyY2UpKTtcblxuICAgICAgZm9yICh2YXIgbmV4dEluZGV4ID0gMCwgbGVuID0ga2V5c0FycmF5Lmxlbmd0aDsgbmV4dEluZGV4IDwgbGVuOyBuZXh0SW5kZXggKz0gMSkge1xuICAgICAgICB2YXIgbmV4dEtleSA9IGtleXNBcnJheVtuZXh0SW5kZXhdO1xuICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobmV4dFNvdXJjZSwgbmV4dEtleSk7XG5cbiAgICAgICAgaWYgKGRlc2MgIT09IHVuZGVmaW5lZCAmJiBkZXNjLmVudW1lcmFibGUpIHtcbiAgICAgICAgICBpZiAoaXNPYmplY3QodG9bbmV4dEtleV0pICYmIGlzT2JqZWN0KG5leHRTb3VyY2VbbmV4dEtleV0pKSB7XG4gICAgICAgICAgICBleHRlbmQodG9bbmV4dEtleV0sIG5leHRTb3VyY2VbbmV4dEtleV0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIWlzT2JqZWN0KHRvW25leHRLZXldKSAmJiBpc09iamVjdChuZXh0U291cmNlW25leHRLZXldKSkge1xuICAgICAgICAgICAgdG9bbmV4dEtleV0gPSB7fTtcbiAgICAgICAgICAgIGV4dGVuZCh0b1tuZXh0S2V5XSwgbmV4dFNvdXJjZVtuZXh0S2V5XSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdG87XG59XG5cbmZ1bmN0aW9uIGJpbmRNb2R1bGVNZXRob2RzKGluc3RhbmNlLCBvYmopIHtcbiAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoaXNPYmplY3Qob2JqW2tleV0pKSB7XG4gICAgICBPYmplY3Qua2V5cyhvYmpba2V5XSkuZm9yRWFjaChmdW5jdGlvbiAoc3ViS2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqW2tleV1bc3ViS2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIG9ialtrZXldW3N1YktleV0gPSBvYmpba2V5XVtzdWJLZXldLmJpbmQoaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpbnN0YW5jZVtrZXldID0gb2JqW2tleV07XG4gIH0pO1xufVxuXG5leHBvcnQgeyBkZWxldGVQcm9wcywgbmV4dFRpY2ssIG5vdywgZ2V0VHJhbnNsYXRlLCBpc09iamVjdCwgZXh0ZW5kLCBiaW5kTW9kdWxlTWV0aG9kcyB9OyIsIi8qKlxuICogU3dpcGVyIDYuMS4yXG4gKiBNb3N0IG1vZGVybiBtb2JpbGUgdG91Y2ggc2xpZGVyIGFuZCBmcmFtZXdvcmsgd2l0aCBoYXJkd2FyZSBhY2NlbGVyYXRlZCB0cmFuc2l0aW9uc1xuICogaHR0cDovL3N3aXBlcmpzLmNvbVxuICpcbiAqIENvcHlyaWdodCAyMDE0LTIwMjAgVmxhZGltaXIgS2hhcmxhbXBpZGlcbiAqXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqXG4gKiBSZWxlYXNlZCBvbjogQXVndXN0IDE3LCAyMDIwXG4gKi9cblxuaW1wb3J0IFN3aXBlciBmcm9tICcuL2VzbS9jb21wb25lbnRzL2NvcmUvY29yZS1jbGFzcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFN3aXBlciwgZGVmYXVsdCB9IGZyb20gJy4vZXNtL2NvbXBvbmVudHMvY29yZS9jb3JlLWNsYXNzJztcbmltcG9ydCBWaXJ0dWFsIGZyb20gJy4vZXNtL2NvbXBvbmVudHMvdmlydHVhbC92aXJ0dWFsJztcbmltcG9ydCBLZXlib2FyZCBmcm9tICcuL2VzbS9jb21wb25lbnRzL2tleWJvYXJkL2tleWJvYXJkJztcbmltcG9ydCBNb3VzZXdoZWVsIGZyb20gJy4vZXNtL2NvbXBvbmVudHMvbW91c2V3aGVlbC9tb3VzZXdoZWVsJztcbmltcG9ydCBOYXZpZ2F0aW9uIGZyb20gJy4vZXNtL2NvbXBvbmVudHMvbmF2aWdhdGlvbi9uYXZpZ2F0aW9uJztcbmltcG9ydCBQYWdpbmF0aW9uIGZyb20gJy4vZXNtL2NvbXBvbmVudHMvcGFnaW5hdGlvbi9wYWdpbmF0aW9uJztcbmltcG9ydCBTY3JvbGxiYXIgZnJvbSAnLi9lc20vY29tcG9uZW50cy9zY3JvbGxiYXIvc2Nyb2xsYmFyJztcbmltcG9ydCBQYXJhbGxheCBmcm9tICcuL2VzbS9jb21wb25lbnRzL3BhcmFsbGF4L3BhcmFsbGF4JztcbmltcG9ydCBab29tIGZyb20gJy4vZXNtL2NvbXBvbmVudHMvem9vbS96b29tJztcbmltcG9ydCBMYXp5IGZyb20gJy4vZXNtL2NvbXBvbmVudHMvbGF6eS9sYXp5JztcbmltcG9ydCBDb250cm9sbGVyIGZyb20gJy4vZXNtL2NvbXBvbmVudHMvY29udHJvbGxlci9jb250cm9sbGVyJztcbmltcG9ydCBBMTF5IGZyb20gJy4vZXNtL2NvbXBvbmVudHMvYTExeS9hMTF5JztcbmltcG9ydCBIaXN0b3J5IGZyb20gJy4vZXNtL2NvbXBvbmVudHMvaGlzdG9yeS9oaXN0b3J5JztcbmltcG9ydCBIYXNoTmF2aWdhdGlvbiBmcm9tICcuL2VzbS9jb21wb25lbnRzL2hhc2gtbmF2aWdhdGlvbi9oYXNoLW5hdmlnYXRpb24nO1xuaW1wb3J0IEF1dG9wbGF5IGZyb20gJy4vZXNtL2NvbXBvbmVudHMvYXV0b3BsYXkvYXV0b3BsYXknO1xuaW1wb3J0IEVmZmVjdEZhZGUgZnJvbSAnLi9lc20vY29tcG9uZW50cy9lZmZlY3QtZmFkZS9lZmZlY3QtZmFkZSc7XG5pbXBvcnQgRWZmZWN0Q3ViZSBmcm9tICcuL2VzbS9jb21wb25lbnRzL2VmZmVjdC1jdWJlL2VmZmVjdC1jdWJlJztcbmltcG9ydCBFZmZlY3RGbGlwIGZyb20gJy4vZXNtL2NvbXBvbmVudHMvZWZmZWN0LWZsaXAvZWZmZWN0LWZsaXAnO1xuaW1wb3J0IEVmZmVjdENvdmVyZmxvdyBmcm9tICcuL2VzbS9jb21wb25lbnRzL2VmZmVjdC1jb3ZlcmZsb3cvZWZmZWN0LWNvdmVyZmxvdyc7XG5pbXBvcnQgVGh1bWJzIGZyb20gJy4vZXNtL2NvbXBvbmVudHMvdGh1bWJzL3RodW1icyc7XG5cbi8vIFN3aXBlciBDbGFzc1xudmFyIGNvbXBvbmVudHMgPSBbVmlydHVhbCwgS2V5Ym9hcmQsIE1vdXNld2hlZWwsIE5hdmlnYXRpb24sIFBhZ2luYXRpb24sIFNjcm9sbGJhciwgUGFyYWxsYXgsIFpvb20sIExhenksIENvbnRyb2xsZXIsIEExMXksIEhpc3RvcnksIEhhc2hOYXZpZ2F0aW9uLCBBdXRvcGxheSwgRWZmZWN0RmFkZSwgRWZmZWN0Q3ViZSwgRWZmZWN0RmxpcCwgRWZmZWN0Q292ZXJmbG93LCBUaHVtYnNdO1xuU3dpcGVyLnVzZShjb21wb25lbnRzKTtcbiIsIigoKSA9PiB7XHJcbiAgY29uc3QgY3RhV3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jLWJhY2stdG8tdG9wLWN0YScpO1xyXG4gIGlmIChjdGFXcmFwcGVyKSB7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKCkgPT4ge1xyXG4gICAgICB3aW5kb3cucGFnZVlPZmZzZXQgPiAyNTBcclxuICAgICAgICA/IGN0YVdyYXBwZXIuY2xhc3NMaXN0LmFkZCgnaXMtdmlzaWJsZScpXHJcbiAgICAgICAgOiBjdGFXcmFwcGVyLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLXZpc2libGUnKTtcclxuICAgIH0pO1xyXG4gICAgY29uc3QgY3RhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWJhY2stdG8tdG9wLWN0YV9fbGluaycpO1xyXG4gICAgY3RhLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICB3aW5kb3cuc2Nyb2xsVG8oe1xyXG4gICAgICAgIHRvcDogMCxcclxuICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCcsXHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59KSgpO1xyXG4iLCIoKCkgPT4ge1xyXG4gIHdpbmRvdy5PYnNlcnZlSW1hZ2VzID0gKGVsZW0pID0+IHtcclxuICAgIGNvbnN0IGltYWdlT2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKGVudHJpZXMsIGltZ09ic2VydmVyKSA9PiB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcclxuICAgICAgZW50cmllcy5mb3JFYWNoKChlbnRyeSkgPT4ge1xyXG4gICAgICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZykge1xyXG4gICAgICAgICAgY29uc3QgbGF6eVBpY3R1cmUgPSBlbnRyeS50YXJnZXQ7XHJcbiAgICAgICAgICBjb25zdCBwaWMgPSBsYXp5UGljdHVyZS5xdWVyeVNlbGVjdG9yQWxsKCdzb3VyY2UnKTtcclxuICAgICAgICAgIHBpYy5mb3JFYWNoKChzb3VyY2UpID0+IHtcclxuICAgICAgICAgICAgc291cmNlLnNyY3NldCA9IHNvdXJjZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3Jjc2V0Jyk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIGxhenlQaWN0dXJlLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWxvYWRpbmcnKTtcclxuICAgICAgICAgIGxhenlQaWN0dXJlLmNsYXNzTGlzdC5hZGQoJ2lzLWxvYWRlZCcpO1xyXG4gICAgICAgICAgbGF6eVBpY3R1cmUuc3R5bGUuaGVpZ2h0ID0gJ2F1dG8nO1xyXG4gICAgICAgICAgbGF6eVBpY3R1cmUuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gJ25vbmUnO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBlbGVtLmZvckVhY2goKHZhbCkgPT4ge1xyXG4gICAgICBpbWFnZU9ic2VydmVyLm9ic2VydmUodmFsKTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IGVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgncGljdHVyZS5sYXp5bG9hZC10cnVlLmlzLWxvYWRpbmcnKTtcclxuICB3aW5kb3cuT2JzZXJ2ZUltYWdlcyhlbGVtZW50cyk7XHJcbn0pKCk7XHJcbiIsIigoKSA9PiB7XHJcbiAgY29uc3QgbW9vZHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYy1tb29kLXNlbGVjdG9yX2Vtb2ppX2xpbmsnKTtcclxuICBjb25zdCBhcnRpY2xlUGFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hcnRpY2xlLXdyYXBwZXInKTtcclxuICBpZiAobW9vZHMubGVuZ3RoICYmIGFydGljbGVQYWdlKSB7XHJcbiAgICBjb25zdCBhcnRpY2xlSWQgPSBhcnRpY2xlUGFnZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGFnZS1pZCcpO1xyXG4gICAgbGV0IHByZVNlbGVjdGVkTW9vZDtcclxuICAgIGxldCBkYXRhO1xyXG4gICAgbGV0IG1vb2REYXRhO1xyXG4gICAgbGV0IGZpbmFsRGF0YTtcclxuXHJcbiAgICAvLyBSZXRhaW4gYWN0aXZlIG1vb2Qgb2YgYXJ0aWNsZSBmcm9tIGxvY2Fsc3RvcmFnZVxyXG4gICAgaWYgKGxvY2FsU3RvcmFnZS5zaW0pIHtcclxuICAgICAgZGF0YSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLnNpbSk7XHJcbiAgICAgIGRhdGEuZm9yRWFjaCgoZCkgPT4ge1xyXG4gICAgICAgIGQuYXJ0aWNsZSA9PT0gYXJ0aWNsZUlkID8gKHByZVNlbGVjdGVkTW9vZCA9IGQubW9vZCkgOiAnJztcclxuICAgICAgfSk7XHJcbiAgICAgIG1vb2RzLmZvckVhY2goKGVsKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc21pbGV5ID0gZWwuZ2V0QXR0cmlidXRlKCd0aXRsZScpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgaWYgKHNtaWxleSA9PT0gcHJlU2VsZWN0ZWRNb29kKSB7XHJcbiAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgbW9vZHMuZm9yRWFjaCgobW9vZCkgPT4ge1xyXG4gICAgICAvLyBhZGRpbmcgY2xpY2sgZXZlbnQgb24gbW9vZFxyXG4gICAgICBtb29kLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGVsdCkgPT4ge1xyXG4gICAgICAgIG1vb2RzLmZvckVhY2goKGVsKSA9PiB7XHJcbiAgICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAhZWx0LmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdhY3RpdmUnKVxyXG4gICAgICAgICAgPyBlbHQuY3VycmVudFRhcmdldC5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKVxyXG4gICAgICAgICAgOiBlbHQuY3VycmVudFRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcclxuXHJcbiAgICAgICAgLy8gc2V0dGluZyBsb2NhbHN0b3JhZ2Ugdy5yLnQuIGFydGljbGVcclxuICAgICAgICAvLyBUT0RPIGFydGljbGVJRCBuZWVkIHRvIGJlIHBpY2tlZCBmcm9tIGFydGljbGUgZGV0YWlsIHBhZ2UgLyBjb21wb25lbnQuIHVwZGF0ZSBiZWxvdyBsaW5lIGxhdGVyXHJcblxyXG4gICAgICAgIGNvbnN0IHNlbGVjdGVkTW9vZCA9IGVsdC5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgndGl0bGUnKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIGNvbnN0IGZpbmFsVmFsID0geyBhcnRpY2xlOiBhcnRpY2xlSWQsIG1vb2Q6IHNlbGVjdGVkTW9vZCB9O1xyXG5cclxuICAgICAgICBpZiAobG9jYWxTdG9yYWdlLnNpbSkge1xyXG4gICAgICAgICAgbW9vZERhdGEgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5zaW0pO1xyXG4gICAgICAgICAgZmluYWxEYXRhID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2Uuc2ltKTtcclxuICAgICAgICAgIGZpbmFsRGF0YS5maWx0ZXIoKGQsIGopID0+IHtcclxuICAgICAgICAgICAgaWYgKGQuYXJ0aWNsZSA9PT0gYXJ0aWNsZUlkKSB7XHJcbiAgICAgICAgICAgICAgZmluYWxEYXRhLnNwbGljZShqLCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgZmluYWxEYXRhLnB1c2goZmluYWxWYWwpO1xyXG5cclxuICAgICAgICAgIGlmIChtb29kRGF0YS5sZW5ndGggPCAxKSB7XHJcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdzaW0nLCBgWyAke0pTT04uc3RyaW5naWZ5KGZpbmFsVmFsKX0gXWApO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3NpbScsIEpTT04uc3RyaW5naWZ5KGZpbmFsRGF0YSkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnc2ltJywgW10pO1xyXG4gICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3NpbScsIGBbICR7SlNPTi5zdHJpbmdpZnkoZmluYWxWYWwpfSBdYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxufSkoKTtcclxuIiwiKCgpID0+IHtcclxuICBjb25zdCBicmVha3BvaW50ID0gd2luZG93Lm1hdGNoTWVkaWEoJyhtaW4td2lkdGg6IDM2ZW0pJyk7XHJcbiAgY29uc3Qgd2hhdHNhcHAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtc29jaWFsLXNoYXJlLXdoYXRzYXBwJyk7XHJcbiAgY29uc3QgZmIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtc29jaWFsLXNoYXJlLWZhY2Vib29rJyk7XHJcbiAgY29uc3QgdHdpdHRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1zb2NpYWwtc2hhcmUtdHdpdHRlcicpO1xyXG4gIGNvbnN0IHBhZ2UgPSBkb2N1bWVudC5VUkw7XHJcbiAgLy8gd2hhdHNhcHAgc2hhcmVcclxuICBpZiAod2hhdHNhcHApIHtcclxuICAgIHdoYXRzYXBwLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgaWYgKGJyZWFrcG9pbnQubWF0Y2hlcyA9PT0gZmFsc2UpIHtcclxuICAgICAgICBlLmN1cnJlbnRUYXJnZXQuaHJlZiA9IGBodHRwOi8vd2EubWUvP3RleHQ9JHtwYWdlfWA7XHJcbiAgICAgIH0gZWxzZSBpZiAoYnJlYWtwb2ludC5tYXRjaGVzID09PSB0cnVlKSB7XHJcbiAgICAgICAgZS5jdXJyZW50VGFyZ2V0LmhyZWYgPSBgaHR0cHM6Ly93ZWIud2hhdHNhcHAuY29tL3NlbmQ/dGV4dD0ke3BhZ2V9YDtcclxuICAgICAgfVxyXG4gICAgICBlLmN1cnJlbnRUYXJnZXQuc2V0QXR0cmlidXRlKCd0YXJnZXQnLCAnX2JsYW5rJyk7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgLy8gdHdpdHRlciBzaGFyZVxyXG4gIGlmICh0d2l0dGVyKSB7XHJcbiAgICB0d2l0dGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgZS5jdXJyZW50VGFyZ2V0LmhyZWYgPSBgaHR0cHM6Ly90d2l0dGVyLmNvbS9pbnRlbnQvdHdlZXQ/b3JpZ2luYWxfcmVmZXJlcj0ke3BhZ2V9YDtcclxuICAgICAgZS5jdXJyZW50VGFyZ2V0LnNldEF0dHJpYnV0ZSgndGFyZ2V0JywgJ19ibGFuaycpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIC8vIGZhY2Vib29rIHNoYXJlXHJcbiAgaWYgKGZiKSB7XHJcbiAgICBmYi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgIGUuY3VycmVudFRhcmdldC5ocmVmID0gJyMnO1xyXG4gICAgICBjb25zdCB1cmkgPSBgaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3NoYXJlci9zaGFyZXIucGhwP3U9JHtwYWdlfWA7XHJcbiAgICAgIHdpbmRvdy5vcGVuKHVyaSwgJ3BvcCcsICd3aWR0aD0zNTAgLCBoZWlnaHQ9MTUwLCBzY3JvbGxiYXJzPW5vJyk7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0pO1xyXG4gIH1cclxufSkoKTtcclxuIiwiaW1wb3J0IFN3aXBlciBmcm9tICdzd2lwZXIvYnVuZGxlJztcblxuKCgpID0+IHtcbiAgY29uc3QgYnJlYWtwb2ludCA9IHdpbmRvdy5tYXRjaE1lZGlhKCcobWluLXdpZHRoOiA2MmVtKScpO1xuICBjb25zdCBsYXlvdXRUeXBlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZT1cImFydGljbGVMYXlvdXRUeXBlXCJdJylcbiAgICA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W25hbWU9XCJhcnRpY2xlTGF5b3V0VHlwZVwiXScpLnZhbHVlXG4gICAgOiAnJztcblxuICBsZXQgbXlTd2lwZXI7XG4gIGNvbnN0IHNob3dFbGVtZW50cyA9IChzaG93KSA9PiB7XG4gICAgbGV0IGNvbnRlbnRTdGF0dXM7XG4gICAgbGV0IHRpdGxlU3RhdHVzO1xuICAgIGlmIChzaG93KSB7XG4gICAgICBjb250ZW50U3RhdHVzID0gJ2Jsb2NrJztcbiAgICAgIHRpdGxlU3RhdHVzID0gJ25vbmUnO1xuICAgICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hcnRpY2xlLWRldGFpbF9fcGFnaW5hdGlvbicpKSB7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hcnRpY2xlLWRldGFpbF9fcGFnaW5hdGlvbicpLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZW50U3RhdHVzID0gJ25vbmUnO1xuICAgICAgdGl0bGVTdGF0dXMgPSAnYmxvY2snO1xuICAgICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hcnRpY2xlLWRldGFpbF9fcGFnaW5hdGlvbicpKSB7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hcnRpY2xlLWRldGFpbF9fcGFnaW5hdGlvbicpLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFydGljbGUtZGV0YWlsX19oZWFkaW5nJykpIHtcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hcnRpY2xlLWRldGFpbF9faGVhZGluZycpLnN0eWxlLmRpc3BsYXkgPSB0aXRsZVN0YXR1cztcbiAgICB9XG4gICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hcnRpY2xlLWRldGFpbF9fdGl0bGUnKSkge1xuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFydGljbGUtZGV0YWlsX190aXRsZScpLnN0eWxlLmRpc3BsYXkgPSBjb250ZW50U3RhdHVzO1xuICAgIH1cbiAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZm9vdGVyJykpIHtcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Zvb3RlcicpLnN0eWxlLmRpc3BsYXkgPSBjb250ZW50U3RhdHVzO1xuICAgIH1cbiAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmMtbW9vZC1zZWxlY3Rvci13cmFwcGVyJykpIHtcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jLW1vb2Qtc2VsZWN0b3Itd3JhcHBlcicpLnN0eWxlLmRpc3BsYXkgPSBjb250ZW50U3RhdHVzO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgY3JlYXRlSGVhZGluZ0VsZW1lbnQgPSAoKSA9PiB7XG4gICAgbGV0IGhlYWRpbmdFbDtcbiAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFydGljbGUtZGV0YWlsX190aXRsZScpKSB7XG4gICAgICBoZWFkaW5nRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYXJ0aWNsZS1kZXRhaWxfX3RpdGxlJyk7XG4gICAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFydGljbGUtZGV0YWlsX19oZWFkaW5nJykpIHtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFydGljbGUtZGV0YWlsX19oZWFkaW5nJykuaW5uZXJIVE1MID0gaGVhZGluZ0VsLmlubmVySFRNTDtcbiAgICAgICAgaGVhZGluZ0VsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBlbmFibGVTd2lwZXIgPSAoKSA9PiB7XG4gICAgbXlTd2lwZXIgPSBuZXcgU3dpcGVyKCcuc3dpcGVyLWNvbnRhaW5lcicsIHtcbiAgICAgIGxvb3A6IGZhbHNlLFxuICAgICAgaW5pdDogdHJ1ZSxcbiAgICAgIHNsaWRlc1BlclZpZXc6ICdhdXRvJyxcbiAgICAgIGNlbnRlcmVkU2xpZGVzOiBmYWxzZSxcbiAgICAgIGRpcmVjdGlvbjogJ2hvcml6b250YWwnLFxuICAgICAgcGFnaW5hdGlvbjoge1xuICAgICAgICBlbDogJy5zd2lwZXItcGFnaW5hdGlvbicsXG4gICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgIH0sXG4gICAgICBuYXZpZ2F0aW9uOiB7XG4gICAgICAgIG5leHRFbDogJy5zd2lwZXItYnV0dG9uLW5leHQtYnRuJyxcbiAgICAgICAgcHJldkVsOiAnLnN3aXBlci1idXR0b24tcHJldi1idG4nLFxuICAgICAgfSxcbiAgICAgIHNjcm9sbGJhcjoge1xuICAgICAgICBlbDogJy5zd2lwZXItc2Nyb2xsYmFyJyxcbiAgICAgIH0sXG4gICAgICBvbjoge1xuICAgICAgICBpbml0OiAoKSA9PiB7XG4gICAgICAgICAgc2hvd0VsZW1lbnRzKGZhbHNlKTtcbiAgICAgICAgICBjcmVhdGVIZWFkaW5nRWxlbWVudCgpO1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgYnJlYWtwb2ludENoZWNrZXIgPSAoKSA9PiB7XG4gICAgaWYgKGxheW91dFR5cGUgIT09IHVuZGVmaW5lZCAmJiBsYXlvdXRUeXBlID09PSAnaW5zdGFDYXJkJykge1xuICAgICAgaWYgKGJyZWFrcG9pbnQubWF0Y2hlcyA9PT0gdHJ1ZSkge1xuICAgICAgICBpZiAobXlTd2lwZXIgIT09IHVuZGVmaW5lZCAmJiBteVN3aXBlci5pbml0aWFsaXplZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHNob3dFbGVtZW50cyh0cnVlKTtcbiAgICAgICAgICBteVN3aXBlci5kZXRhY2hFdmVudHMoKTtcbiAgICAgICAgICBteVN3aXBlci5kZXN0cm95KHRydWUsIHRydWUpO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGJyZWFrcG9pbnQubWF0Y2hlcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGVuYWJsZVN3aXBlcigpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIGJyZWFrcG9pbnQuYWRkTGlzdGVuZXIoYnJlYWtwb2ludENoZWNrZXIpO1xuICBicmVha3BvaW50Q2hlY2tlcigpO1xufSkoKTtcbiIsIigoKSA9PiB7XHJcbiAgY29uc3QgbmF2SXRlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uYXZiYXJfX2xpc3QnKTtcclxuICBjb25zdCBoYW1idXJnZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjaGFtYnVyZ2VyJyk7XHJcbiAgY29uc3Qgc2VhcmNoID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NlYXJjaGljb24nKTtcclxuICBjb25zdCBib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpO1xyXG5cclxuICBuYXZJdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICFlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2Ryb3Bkb3duLS1vcGVuJylcclxuICAgICAgPyBlLnRhcmdldC5jbGFzc0xpc3QuYWRkKCdkcm9wZG93bi0tb3BlbicpXHJcbiAgICAgIDogZS50YXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgnZHJvcGRvd24tLW9wZW4nKTtcclxuICB9KTtcclxuXHJcbiAgaGFtYnVyZ2VyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgIWJvZHkuY2xhc3NMaXN0LmNvbnRhaW5zKCdtZW51LS1vcGVuJylcclxuICAgICAgPyBib2R5LmNsYXNzTGlzdC5hZGQoJ21lbnUtLW9wZW4nKVxyXG4gICAgICA6IGJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnbWVudS0tb3BlbicpO1xyXG4gIH0pO1xyXG5cclxuICBzZWFyY2guYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAhYm9keS5jbGFzc0xpc3QuY29udGFpbnMoJ21vZGFsLS1vcGVuJylcclxuICAgICAgPyBib2R5LmNsYXNzTGlzdC5hZGQoJ21vZGFsLS1vcGVuJylcclxuICAgICAgOiBib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ21vZGFsLS1vcGVuJyk7XHJcbiAgfSk7XHJcbn0pKCk7XHJcbiIsImltcG9ydCBTd2lwZXIgZnJvbSAnc3dpcGVyL2J1bmRsZSc7XHJcblxyXG4oKCkgPT4ge1xyXG4gIGNvbnN0IGVuYWJsZVN3aXBlciA9ICgpID0+IHtcclxuICAgIHJldHVybiBuZXcgU3dpcGVyKCcuaW1hZ2VDYXJvdXNlbCcsIHtcclxuICAgICAgbG9vcDogZmFsc2UsXHJcbiAgICAgIHNsaWRlc1BlclZpZXc6ICdhdXRvJyxcclxuICAgICAgY2VudGVyZWRTbGlkZXM6IGZhbHNlLFxyXG4gICAgICBhdXRvcGxheTogdHJ1ZSxcclxuICAgICAgZGlyZWN0aW9uOiAnaG9yaXpvbnRhbCcsXHJcbiAgICAgIHBhZ2luYXRpb246IHtcclxuICAgICAgICBlbDogJy5pbWFnZUNhcm91c2VsX19wYWdpbmF0aW9uJyxcclxuICAgICAgICBjbGlja2FibGU6IHRydWUsXHJcbiAgICAgIH0sXHJcbiAgICAgIG5hdmlnYXRpb246IHtcclxuICAgICAgICBuZXh0RWw6ICcuc3dpcGVyLWJ1dHRvbi1uZXh0JyxcclxuICAgICAgICBwcmV2RWw6ICcuc3dpcGVyLWJ1dHRvbi1wcmV2JyxcclxuICAgICAgICBoaWRlT25DbGljazogdHJ1ZSxcclxuICAgICAgfSxcclxuICAgICAgc2Nyb2xsYmFyOiB7XHJcbiAgICAgICAgZWw6ICcuc3dpcGVyLXNjcm9sbGJhcicsXHJcbiAgICAgIH0sXHJcbiAgICAgIG9uOiB7XHJcbiAgICAgICAgaW5pdDogKCkgPT4ge30sXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuICB9O1xyXG4gIGVuYWJsZVN3aXBlcigpO1xyXG59KSgpO1xyXG4iLCIoKCkgPT4ge1xyXG4gIGNvbnN0IG1vZGFsQ0xvc2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbW9kYWxDTG9zZScpO1xyXG4gIGNvbnN0IHNlYXJjaCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNnbG9iYWxTZWFyY2gnKTtcclxuICBjb25zdCBib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpO1xyXG4gIGNvbnN0IHNlYXJjaElucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NlYXJjaFRlcm0nKTtcclxuXHJcbiAgbW9kYWxDTG9zZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICFib2R5LmNsYXNzTGlzdC5jb250YWlucygnbW9kYWwtLW9wZW4nKVxyXG4gICAgICA/IGJvZHkuY2xhc3NMaXN0LmFkZCgnbW9kYWwtLW9wZW4nKVxyXG4gICAgICA6IGJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnbW9kYWwtLW9wZW4nKTtcclxuICAgIHNlYXJjaElucHV0LnZhbHVlID0gJyc7XHJcbiAgfSk7XHJcblxyXG4gIHNlYXJjaC5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZSkgPT4ge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgIGNvbnN0IHNlYXJjaFRlcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VhcmNoVGVybScpLnZhbHVlO1xyXG4gICAgbGV0IHNlYXJjaFVybCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZWFyY2hVcmwnKS52YWx1ZTtcclxuICAgIGlmIChzZWFyY2hUZXJtICE9PSAnJykge1xyXG4gICAgICBzZWFyY2hVcmwgPSBzZWFyY2hVcmwucmVwbGFjZSgne3tzZWFyY2hUZXJtfX0nLCBzZWFyY2hUZXJtKTtcclxuICAgICAgc2VhcmNoSW5wdXQudmFsdWUgPSAnJztcclxuICAgICAgd2luZG93Lm9wZW4oc2VhcmNoVXJsLCAnX3NlbGYnKTtcclxuICAgIH1cclxuICB9KTtcclxufSkoKTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==